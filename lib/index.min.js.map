{"version":3,"sources":["webpack://Mem/webpack/universalModuleDefinition","webpack://Mem/webpack/bootstrap","webpack://Mem/external \"lodash\"","webpack://Mem/./src/mem.coffee","webpack://Mem/./src/query.coffee","webpack://Mem/./src/index.coffee","webpack://Mem/./src/base.coffee","webpack://Mem/./src/rule.coffee","webpack://Mem/./src/set.coffee","webpack://Mem/./src/map.coffee","webpack://Mem/./src/list.coffee","webpack://Mem/./src/model.coffee","webpack://Mem/./src/finder.coffee"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Finder","Map","Name","Query","Set","State","_","cache","merge","set_depend","set_deploy","transaction","cb","result","$journal","journal","type","list","base","$sort","$memory","$format","step","$base","store","pack","_id","model","results","_finder","bless","item","clear_cache","deploys","push","depends","val","append","query_parser","set_for","len","set","length","req","this","_filters","concat","constructor","Function","Array","String","console","log","[object Object]","_all_ids","_group","$partition","all","tap","_step","_copy","_all_ids1","_group1","_filters1","$sort1","$partition1","$page_by","q","target","path","add","ref","f","ref1","RegExp","test","Boolean","Number","indexOf","Error","ary","text","regexp","split","replace","join","where","search_words","sort","Math","random","order","isEqual","cloneDeep","page_by","ids","base1","oo","find","id","form","__proto__","hash","pluck","arguments","defineProperties","reduce","calculate","_reduce","memory","keys","undefined","Mem","Rule","Base","List","Model","rename","snakeCase","$name","map","build","depend_on","map_property","model_property","form_property","changes","$model","isChanged","list_property","first","head","tail","last","uniq","at","set_property","schema","_set","finder","parent","use_cache","assign","scope","default_scope","shuffle","ik","else_id","cmd","qk","_ids","a","j","k","len1","args","name1","pk","belongs_to","deploy","idx","subids","slice","siblings","to","option","miss","relation_to_one","reverse","relation_to_many","fk","relation_tree","leaf","not_leaf","cost","directed","relation_graph","f_clear","f_item","f_merge","f_remove","f_reset","reset","remove","clear_cach","reject","del","refresh","rehash","splice","$group","$deploy","$deploy_reduce","$deploy_sort","emit_group","init","emit","map_partition","map_reduce","count","query","from","___","counts","len2","len3","per","orderBy","group_by","groupBy","page","page_idx","includes","index","pow","avg","min","max","range","density","max_is","min_is","values","floor","in","JSON","stringify","old","rowid","$step","Format","each","validate","process","chklist","partition","paths","finish_order","results1","finish","hit","delete","news","update"],"mappings":"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","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mem\"] = factory();\n\telse\n\t\troot[\"Mem\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"lodash\");","_ = require 'lodash'\n\nSet = {}\nMap = {}\nName = {}\nQuery = {}\nFinder = {}\n\ncache = (type, { list })->\n  State[type][list] ?=\n    $sort:   new Object null\n    $memory: new Object null\n    $format:  new Object null\n\nState =\n  transaction: (cb)->\n    State.$journal = result = {}\n    cb()\n    State.$journal = {}\n    result\n\n  journal: cache.bind null, '$journal'\n  base:    cache.bind null, '$base'\n  step:     new Object null\n  $journal: new Object null\n  $base:    new Object null\n\n  store: (pack)->\n    _.merge State.$base, pack\n    for key, { $sort, $memory, $format } of pack\n      { model } = Query[key]._finder\n      for _id, o of $memory\n        model.bless o.item\n      Query[key]._finder.clear_cache()\n\nset_deploy = (key, cb)-> Name[key].deploys.push cb\nset_depend = (key, cb)-> Name[key].depends.push cb\nmerge = (o)->\n  for key, val of o\n    switch\n      when Query[key]?\n        key = Name[key].base\n        Set[key].merge val\n      when Set[key]?\n        Set[key].append val\n\nmodule.exports = { Set, Map, Name, State, Finder, Query, set_deploy, set_depend, merge }\n","_ = require \"lodash\"\n\n\nset_for = (list)->\n  set = new Object null\n  for key in list\n    set[key] = true\n  set\n\nquery_parser = (base, req, cb)->\n  return base unless req\n\n  new Query base, ->\n    @_filters = base._filters.concat()\n    switch req && req.constructor\n      when Object\n        for key, val of req\n          cb @, key, val, _.property key\n\n      when Function, Array, String\n        cb @, null, req, (o)-> o\n      else\n        console.log { req }\n        #throw Error 'unimplemented'\n\n\nmodule.exports = class Query\n  @build: ({ $sort, $memory })->\n    _all_ids = _group = null\n    _filters = []\n    $partition = [\"set\"]\n    new Query { _all_ids, _group, _filters, $sort, $partition }, ->\n      @all = @\n      @$memory = $memory\n\n  constructor: (base, tap)->\n    @_step = 0\n    @_copy base\n    tap.call @\n\n  _copy: ({ @all, @_all_ids, @_group, @_filters, @$sort, @$partition, @$page_by })->\n\n  in: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Array\n          set = set_for req\n          add (o)->\n            for key in path o\n              return true if set[key]\n            false\n        when RegExp\n          add (o)->\n            for val in path o\n              return true if req.test val\n            false\n        when null, 0, \"\", Boolean, String, Number\n          add (o)->\n            -1 < path(o)?.indexOf req\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  partition: (...ary)->\n    new Query @, ->\n      @$partition = ary\n\n  where: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Function\n          add req\n        when Array\n          if \"_id\" == target\n            q._all_ids = req\n          else\n            set = set_for req\n            add (o)-> set[ path o ]\n        when RegExp\n          add (o)-> req.test path o\n        when null, 0, \"\", Boolean, String, Number\n          if \"_id\" == target\n            q._all_ids = [req]\n          else\n            add (o)-> req == path o\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  search: (text)->\n    return @ unless text\n    list =\n      for item in text.split(/\\s+/)\n        item = item.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n        continue unless item.length\n        \"(#{item})\"\n    return @ unless list.length\n    regexp = (new RegExp list.join(\"|\"), \"ig\")\n    @where (o)->\n      s = o.q.search_words\n      (!s) || regexp.test s\n\n  shuffle: ->\n    @sort Math.random\n\n  order: (order)->\n    return @ if _.isEqual order, @$sort['_reduce.list']\n    new Query @, ->\n      @$sort = _.cloneDeep @$sort\n      @$sort['_reduce.list'] = order\n\n  sort: (sort...)->\n    @order { sort }\n  \n  page: (page_by)->\n    new Query @, ->\n      @$page_by = page_by\n\n  form: (ids...)->\n    oo = @find ...ids\n    if oo\n      o = @all.$memory[oo.id].form ?= {}\n      o.__proto__ = oo\n      o\n    else\n      oo\n\n  find: (ids...)->\n    for id in ids when o = @hash[id]\n      return o if o\n    null\n\n  finds: (ids)->\n    for id in ids when o = @hash[id]\n      o\n\n  pluck: -> @list.pluck arguments...\n\n  Object.defineProperties @::,\n    reduce:\n      get: ->\n        @all._finder.calculate @, @all.$memory\n        @_reduce\n\n    list:\n      get: ->\n        @reduce.list\n\n    hash:\n      get: ->\n        @reduce.hash\n\n    memory:\n      get: ->\n        @all.$memory\n\n    ids:\n      get: ->\n        Object.keys @hash\n","module.exports = Mem = require \"./mem.coffee\"\nMem.Rule = require \"./rule.coffee\"\nMem.Base = require \"./base.coffee\"\n","\nmodule.exports =\n  Query:  require \"./query.coffee\"\n  Set:    require \"./set.coffee\"\n  Map:    require \"./map.coffee\"\n  List:   require \"./list.coffee\"\n  Model:  require \"./model.coffee\"\n  Finder: require \"./finder.coffee\"\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\n{ Finder, Query, Model, List, Set, Map } = require \"./base.coffee\"\n\nrename = (base)->\n  base = _.snakeCase(base).replace /s$/, \"\"\n  name = Mem.Name[base]\n  return name if name\n\n  id =   \"#{base}_id\"\n  ids =  \"#{base}_ids\"\n  list = \"#{base}s\"\n  deploys = []\n  depends = []\n  Mem.Name[list] = Mem.Name[base] = { id, ids, list, base, deploys, depends }\n\nmodule.exports = class Rule\n  constructor: (base, cb)->\n    @$name = rename base\n    @model = Model\n    @list  = List\n    @set   = Set\n    @map   = Map\n\n    @all = Query.build Mem.State.base(@$name)\n    @all.cache = {}\n    @all._finder = new Finder @$name\n\n    @depend_on base\n\n    @map_property = {}\n\n    { base } = @$name\n    @model_property =\n      id:\n        enumerable: true\n        get: -> @_id\n      \"#{@$name.id}\":\n        enumerable: true\n        get: -> @_id\n\n    @form_property =\n      changes:\n        enumerable: true\n        value: (key)->\n          if _.isEqual @[key], @find[key]\n            null\n          else\n            @$model[key]\n      isChanged:\n        enumerable: true\n        get: ->\n          keys = Object.keys @\n          for key in keys\n            return true unless _.isEqual @[key], @$model[key]\n          return false\n\n    @list_property =\n      first:\n        enumerable: false\n        get: -> @[0]\n      head:\n        enumerable: false\n        get: -> @[0]\n      tail:\n        enumerable: false\n        get: -> @[@length - 1]\n      last:\n        enumerable: false\n        get: -> @[@length - 1]\n\n      uniq:\n        enumerable: false\n        get: ->\n          @constructor.bless _.uniq @\n\n      pluck:\n        enumerable: false\n        value: (keys...)->\n          cb =\n            switch keys.length\n              when 0\n                -> null\n              when 1\n                _.property keys[0]\n              else\n                (o)-> _.at(o, keys...)\n          @constructor.bless @map cb\n\n    @set_property = {}\n\n    @schema cb if cb\n    return\n\n  schema: (cb)->\n    cb.call @\n    if @model == Model\n      class @model extends @model\n    Object.defineProperties @model::, @model_property\n\n    if @list == List\n      class @list extends @list\n    Object.defineProperties @list::, @list_property\n\n    if @set == Set\n      class @set extends @set\n    Object.defineProperties @set::, @set_property\n\n    if @map == Map\n      class @map extends @map\n    Object.defineProperties @map::, @map_property\n\n    @model.$name = @list.$name = @set.$name = @map.$name = @$name\n\n    Mem.Query[@$name.list] = @all\n\n    Mem.Set[@$name.base] = _set = new @set\n    _set.all = @all\n    _set.$name = @$name\n    list = @list.bless [], @all\n\n    Mem.Finder[@$name.list] = finder = @all._finder\n    finder.set = @set\n    finder.map = @map\n    finder.list = @list\n    finder.model = @model\n    finder.$format = Mem.State.base(@$name).$format\n    @\n\n  key_by: (keys)->\n    cb =\n      switch keys?.constructor\n        when undefined\n          -> @_id\n        when Function\n          keys\n        when String, Array\n          _.property keys\n        else\n          throw Error \"unimplemented #{keys}\"\n\n    @model_property.id =\n      enumerable: true\n      get: cb\n\n  deploy: (cb)->\n    Mem.set_deploy @$name.base, cb\n\n  depend_on: (parent)->\n    { _finder } = @all\n    Mem.set_depend parent, ->\n      _finder.clear_cache()\n\n  scope: (cb)->\n    for key, val of cb @all\n      @use_cache key, val\n\n\n  property: (type, o)->\n    Object.assign @[\"#{type}_property\"], o\n\n\n  default_scope: (scope)->\n    @all._copy scope @all\n\n  shuffle: ->\n    @default_scope (all)-> all.shuffle()\n\n  order: (sort...)->\n    @default_scope (all)-> all.sort sort...\n\n  \n\n  relation_to_one: (key, target, ik, else_id)->\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        id = _.get @, ik\n        Mem.Query[target].find id, else_id\n\n  relation_to_many: (key, target, cmd, ik, qk)->\n    all = @all\n    @use_cache key, (id)->\n      Mem.Query[target][cmd] \"#{qk}\": id\n\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        all[key](@[ik])\n\n  relation_tree: (key, ik)->\n    all = @all\n    @use_cache key, (_id, n)->\n      if n\n        q = all.where \"#{ik}\": _id\n        all[key] q.ids, n - 1\n      else\n        all.where _id: _id\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@_id], n\n\n  relation_graph: (key, ik)->\n    all = @all\n    @use_cache key, (_id, n)->\n      q = all.where _id: _id\n      if n\n        _ids = []\n        for a in q.pluck(ik) when a?\n          for k in a when k?\n            _ids.push k\n\n        all[key] _.uniq(_ids), n - 1\n      else\n        q\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@_id], n\n\n  use_cache: (key, val)->\n    switch val?.constructor\n      when Function\n        @all[key] = (args...)=>\n          @all.cache[\"#{key}:#{JSON.stringify args}\"] ?= val args...\n      else\n        @all[key] = val\n\n  path: (keys...)->\n    for key in keys\n      @belongs_to key\n    @deploy ->\n      subids = @_id.split(\"-\")\n      @idx = subids[keys.length]\n      for key, idx in keys\n        @[\"#{key}_id\"] = subids[0..idx].join '-'\n\n    { all } = @\n    pk = keys[-1..][0] + \"_id\"\n    @model_property.siblings =\n      get: ->\n        q = {}\n        q[pk] = @[pk]\n        all.where q\n\n  belongs_to: (to, option = {})->\n    name = rename to\n    { key = name.id, target = name.list, miss } = option\n    @relation_to_one name.base, target, key, miss\n\n  habtm: (to, option = {})->\n    name = rename to\n    if option.reverse\n      { key = @$name.ids, target = to } = option\n      @relation_to_many name.list, target, \"in\", \"_id\", key\n    else\n      { key = name.ids, target = name.list } = option\n      @relation_to_many name.list, target, \"where\", key, \"_id\"\n\n  has_many: (to, option = {})->\n    name = rename to\n    { key = @$name.id, target = name.list } = option\n    @relation_to_many name.list, target, \"where\", \"_id\", key\n\n  tree: (option = {})->\n    fk = @$name.id\n    @relation_tree \"nodes\", fk\n    @belongs_to @$name.base, option\n\n    Object.defineProperties @all,\n      leaf:\n        get: ->\n          not_leaf = _.uniq @pluck fk\n          @where (o)-> o._id not in not_leaf\n\n  graph: (option = {})->\n    { directed, cost } = option\n    ik = @$name.ids\n    @relation_to_many @$name.list, @$name.list, \"where\", ik, \"_id\"\n    @relation_graph \"path\", ik\n    unless directed\n      true # todo\n","_ = require \"lodash\"\n{ State } = require \"./index.coffee\"\nQuery = require \"./query.coffee\"\n\nf_reset = (list, parent)->\n  @all._finder.reset @all, list, parent\n\nf_merge = (list, parent)->\n  @all._finder.merge @all, list, parent\n\nf_remove = (list)->\n  @all._finder.remove @all, list\n\nf_item = (cb)->\n  (item, parent)->\n    if item?\n      cb.call @, [item], parent\n\nf_clear = ->\n  @all._finder.clear_cach @all\n\n\nmodule.exports = class Set\n  set:           f_reset\n  reset:         f_reset\n\n  merge:         f_merge\n  add:    f_item f_merge\n  append: f_item f_merge\n\n  reject:        f_remove\n  del:    f_item f_remove\n  remove: f_item f_remove\n\n  clear_cache:   f_clear\n  refresh:       f_clear\n  rehash:        f_clear\n","_ = require \"lodash\"\n{ State, Query } = require \"./mem.coffee\"\n\nmatrix =\n  map: (cb)->\n    list = []\n    for a in @ when a\n      for item in a\n        list.push cb item\n    list\n\nmodule.exports = class Map\n  @bless: (o)->\n    o.__proto__ = @::\n    o\n\n  @$deploy: (model, $format, all, item, parent)->\n    o = { item, $group: [] }\n\n    model.$deploy item, parent\n    @$deploy_reduce model, item, $format, o\n    @$deploy_sort   model, item, all\n    o\n\n  @$deploy_reduce: (model, item, $format, o)->\n    journal = State.journal(@$name)\n    emit = (target)=> (keys..., cmd)=>\n      path = [\"_reduce\", keys...].join('.')\n      target.push [path, cmd]\n      map = $format[path] ?= {}\n      journal.$format[path] ?= {}\n      @init map, cmd\n    emit_group = emit o.$group\n    emit_group\n      list: true\n    model.map_partition item, emit_group\n    model.map_reduce    item, emit_group\n\n  @$deploy_sort: (model, item, all)->\n    journal = State.journal(@$name)\n    emit = (keys..., cmd)->\n      path = [\"_reduce\", keys...].join('.')\n      all.$sort[path] = cmd\n      journal.$sort[path] = cmd\n    emit \"list\", {}\n    model.order item, emit\n\n  @init: (o, map)->\n    if map.id\n      o.id = map.id\n    if map.list\n      o.list = []\n    if map.count\n      o.count = 0\n    if map.all\n      o.all = 0\n    if map.set\n      o.hash = {}\n\n  @order: (query, path, from, map, list, cb)->\n    o = from\n    if Object == from.constructor\n      if map.belongs_to\n        for id, val of from\n          val.__proto__ = Query[map.belongs_to].find id\n      else\n        for id, val of from\n          val.id = id\n\n    else\n      if map.belongs_to\n        for val in from\n          val.__proto__ = Query[map.belongs_to].find val.id\n\n    if map.sort\n      o = _.orderBy o, map.sort...\n    \n    if map.pluck\n      o = for oo in o when val = _.get oo, map.pluck\n        val\n\n    if key = map.group_by\n      from = o\n      o = _.groupBy o, (oo)-> _.get oo, key\n      for a of o when a\n        cb a\n\n    if map.page && per = query.$page_by\n      from = o\n      o = []\n      o.all = from.length\n      for oo, idx in from\n        unless idx % per\n          o.push c = []\n        c.push oo\n      o.page_idx = (item)->\n        for a, page_idx in @ when a.includes item\n          return page_idx\n        null\n      for a in o when a\n        cb a\n\n    if key = map.index\n      counts = []\n      for ___, oo of o\n        idx = _.get oo, key\n        counts[idx] ?= []\n        counts[idx].push oo\n      o = counts\n      for a in o when a\n        cb a\n\n    cb o\n    o\n\n  @finish: (query, path, o, list)->\n    if o.hash\n      o.set = Object.keys o.hash\n    if o.count && o.pow?\n      o.avg = o.all ** (1 / o.count)\n    if o.count && o.all?\n      o.avg = o.all * (1 / o.count)\n    if o.min? && o.max?\n      o.range = o.max - o.min\n      if o.all\n        o.density = o.all / o.range\n\n  @reduce: (query, path, item, o, map)->\n    if map.count\n      o.count += map.count\n    if map.all\n      o.all += map.all\n    if map.pow\n      o.pow *= map.pow\n\n    if map.list\n      o.list.push item\n\n    if map.set\n      o.hash[map.set] = item\n\n    if map.max\n      unless map.max <= o.max\n        o.max_is = item\n        o.max = map.max\n    if map.min\n      unless o.min <= map.min\n        o.min_is = item\n        o.min = map.min\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nmodule.exports = class List extends Array\n  @bless: (list, query)->\n    list.__proto__ = @::\n    list.query = query\n    list\n\n  sort: (sort...)->\n    o = _.orderBy @, sort...\n    o.__proto__ = @__proto__\n    o\n\n  group_by: (cb)->\n    o = _.groupBy @, cb\n    for key, oo of o\n      oo.__proto__ = @__proto__\n    o\n\n  page_by: (per)->\n    idx = 0\n    Object.values @group_by (o)->\n      Math.floor(idx++ / per)\n\n  where: (req)-> @query.where req\n  in:    (req)-> @query.in    req\n","_ = require \"lodash\"\n\n\nmodule.exports = class Model\n  @rowid = 0\n\n  @bless: (o)->\n    o.__proto__ = @::\n    o\n\n  @$deploy: (item, parent)->\n    @bless item\n    Object.assign item, parent\n    for deploy in @$name.deploys\n      deploy.call item, @\n    unless item.id\n      throw new Error \"detect bad data: #{JSON.stringify item}\"\n\n  @update: (item, old)->\n  @create: (item)->\n  @delete: (old)->\n\n  @map_partition:  (item, emit)->\n    emit\n      set: item.id\n\n  @map_reduce: (item, emit)->\n    undefined\n\n  @order: (reduce, emit)->\n    undefined\n","_ = require \"lodash\"\n{ State, Query, Format } = require \"./mem.coffee\"\n\n\neach = ({ list, depends }, from, process)->\n\n  f() for f in depends\n  switch from?.constructor\n    when Array\n      for item in from\n        process item\n    when Object\n      for id, item of from\n        item._id = id\n        process item\n  return\n\nvalidate = (item, chklist)->\n  return false unless item and chklist\n  for chk in chklist when ! chk item\n    return false\n  true\n\n$step = 0\n\nmodule.exports = class Finder\n  constructor: (@$name)->\n    State.step[@$name.list] = ++$step\n    State.base(@$name)\n\n  calculate: (query, memory)->\n    return unless query._step < State.step[@$name.list]\n\n    delete query._reduce\n    query._step = ++$step\n\n    cache = _.cloneDeep @$format\n    paths =\n      _reduce:\n        list: []\n        hash: {}\n\n    if query._all_ids\n      @reduce @map, cache, paths, query, memory, query._all_ids\n    else\n      if query == query.all\n        @reduce @map, cache, paths, query, memory, Object.keys memory\n      else\n        for partition in query.$partition\n          @reduce @map, cache, paths, query, memory, _.get query.all, \"reduce.#{partition}\"\n\n    @finish_order @map, cache, paths, query\n    return\n\n  reduce: (map, cache, paths, query, memory, ids)->\n    return unless ids\n    for id in ids when o = memory[id]\n      { item, $group } = o\n      continue unless validate item, query._filters\n      for [path, a] in $group\n        o = paths[path] = cache[path]\n        map.reduce query, path, item, o, a\n\n  finish_order: (map, cache, paths, query)->\n    for path, o of paths\n      map.finish query, path, o, @list\n      _.set query, path, o\n\n    for path, cmd of query.$sort when o = from = _.get(query, path)\n      o = map.order query, path, o, cmd, @list, (target)=>\n        @list.bless target, query\n      o.from = from\n      _.set query, path, o\n\n  clear_cache: (all = null)->\n    State.step[@$name.list] = ++$step\n    if all\n      for id, { item } of all.$memory\n        @map.$deploy_sort @model, item, all\n    return\n\n  remove: (all, from)->\n    { $memory } = all\n    journal = State.journal(@$name)\n    hit = false\n    each @$name, from, (item)=>\n      @model.bless item\n      old = $memory[item.id]\n      if old?\n        @model.delete old.item\n        delete journal.$memory[item.id]\n        delete $memory[item.id]\n        hit = true\n    if hit?\n      @clear_cache()\n\n  reset: (all, from, parent)->\n    { $memory } = all\n    State.journal(@$name).$memory = new Object null\n    State.base(@$name).$memory = all.$memory = news = new Object null\n    @merge all, from, parent\n\n    for key, old of $memory\n      item = news[key]\n      unless item?\n        @model.delete old\n\n  merge: (all, from, parent)->\n    { $memory } = all\n    journal = State.journal(@$name)\n    each @$name, from, (item)=>\n      o = @map.$deploy @model, @$format, all, item, parent\n      old = $memory[item.id]\n      journal.$memory[item.id] = o\n      $memory[item.id] = o\n      if old?\n        @model.update item, old.item\n      else\n        @model.create item\n        @model.rowid++\n    @clear_cache()\n"],"sourceRoot":""}