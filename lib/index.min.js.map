{"version":3,"sources":["webpack://Mem/webpack/universalModuleDefinition","webpack://Mem/webpack/bootstrap","webpack://Mem/external \"lodash\"","webpack://Mem/./src/mem.coffee","webpack://Mem/./src/query.coffee","webpack://Mem/./src/index.coffee","webpack://Mem/./src/base.coffee","webpack://Mem/./src/rule.coffee","webpack://Mem/./src/set.coffee","webpack://Mem/./src/map.coffee","webpack://Mem/./src/list.coffee","webpack://Mem/./src/model.coffee","webpack://Mem/./src/finder.coffee"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","$step","Finder","Map","Name","OBJ","Query","Set","State","cache","merge","set_depend","set_deploy","step","transaction","cb","result","$journal","journal","type","list","base1","_step","$sort","$memory","$format","base","$base","store","pack","model","bless","item","clear_cache","deploys","push","depends","results","val","append","_","query_parser","set_for","len","set","length","req","this","_filters","concat","constructor","Function","Array","String","console","log","[object Object]","_all_ids","_group","$partition","all","tap","_copy","_all_ids1","_group1","_filters1","$sort1","$partition1","$page_by","q","target","path","add","ref","f","ref1","RegExp","test","Boolean","Number","indexOf","Error","ary","text","regexp","split","replace","join","where","search_words","sort","Math","random","order","isEqual","cloneDeep","page_by","ids","oo","find","id","form","__proto__","hash","pluck","arguments","defineProperties","reduce","_finder","calculate","_reduce","memory","keys","Mem","Rule","Base","List","Model","rename","snakeCase","$name","map","build","depend_on","map_property","model_property","_id","form_property","changes","$model","isChanged","list_property","first","head","tail","last","uniq","at","set_property","schema","_set","finder","parent","use_cache","assign","scope","default_scope","shuffle","ik","else_id","cmd","qk","a","j","k","len1","args","name1","pk","belongs_to","deploy","idx","subids","slice","siblings","to","option","miss","relation_to_one","reverse","relation_to_many","fk","relation_tree","leaf","not_leaf","cost","directed","relation_graph","f_clear","f_common","f_item","f_update","update","clear_cach","reset","reject","del","remove","updates","refresh","rehash","splice","$group","$deploy_reduce","$deploy_sort","emit_default","emit_default_origin","emit_group","map_j","init","emit","map_partition","map_reduce","count","query","from","___","counts","cover","len2","per","remain","orderBy","group_by","groupBy","page","page_idx","len3","includes","index","pow","avg","min","max","range","density","max_is","min_is","values","floor","in","JSON","stringify","old","Format","each","each_by_id","validate","process","chklist","partition","paths","finish_order","results1","finish","news","delete","$deploy","hit"],"mappings":"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","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mem\"] = factory();\n\telse\n\t\troot[\"Mem\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"lodash\");","_ = require 'lodash'\n\nSet = {}\nMap = {}\nName = {}\nQuery = {}\nFinder = {}\n\nOBJ = ->\n  new Object null\n\n$step = 0\nstep = -> ++$step\n\ncache = (type, { list })->\n  State[type][list] ?=\n    _step: step()\n    $sort:   OBJ()\n    $memory: OBJ()\n    $format:  OBJ()\n\nState =\n  transaction: (cb)->\n    State.$journal = result = OBJ()\n    cb()\n    State.$journal = OBJ()\n    result\n\n  journal: cache.bind null, '$journal'\n  base:    cache.bind null, '$base'\n  step:     OBJ()\n  $journal: OBJ()\n  $base:    OBJ()\n\n  store: (pack)->\n    for list, { $sort, $memory, $format } of pack\n      { model } = Finder[list]\n      base = State.base { list }\n\n      for key, o of $sort\n        base.$sort[key] = o\n\n      for key, o of $format\n        base.$format[key] = o\n\n      for key, o of $memory\n        model.bless o.item\n        base.$memory[key] = o\n\n      Finder[list].clear_cache()\n\n    true\n\nset_deploy = (key, cb)-> Name[key].deploys.push cb\nset_depend = (key, cb)-> Name[key].depends.push cb\nmerge = (o)->\n  for key, val of o\n    switch\n      when Query[key]?\n        key = Name[key].base\n        Set[key].merge val\n      when Set[key]?\n        Set[key].append val\n\nmodule.exports = { Set, Map, Name, State, Finder, Query, set_deploy, set_depend, merge, step }\n","_ = require \"lodash\"\n\n\nset_for = (list)->\n  set = new Object null\n  for key in list\n    set[key] = true\n  set\n\nquery_parser = (base, req, cb)->\n  return base unless req\n\n  new Query base, ->\n    @_filters = base._filters.concat()\n    switch req && req.constructor\n      when Object\n        for key, val of req\n          cb @, key, val, _.property key\n\n      when Function, Array, String\n        cb @, null, req, (o)-> o\n      else\n        console.log { req }\n        #throw Error 'unimplemented'\n\n\nmodule.exports = class Query\n  @build: ({ $sort, $memory })->\n    _all_ids = _group = null\n    _filters = []\n    $partition = [\"set\"]\n    new Query { _all_ids, _group, _filters, $sort, $partition }, ->\n      @all = @\n      @$memory = $memory\n\n  constructor: (base, tap)->\n    @_step = 0\n    @_copy base\n    tap.call @\n\n  _copy: ({ @all, @_all_ids, @_group, @_filters, @$sort, @$partition, @$page_by })->\n\n  in: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Array\n          set = set_for req\n          add (o)->\n            for key in path o\n              return true if set[key]\n            false\n        when RegExp\n          add (o)->\n            for val in path o\n              return true if req.test val\n            false\n        when null, 0, \"\", Boolean, String, Number\n          add (o)->\n            -1 < path(o)?.indexOf req\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  partition: (...ary)->\n    new Query @, ->\n      @$partition = ary\n\n  where: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Function\n          add req\n        when Array\n          if \"_id\" == target\n            q._all_ids = req\n          else\n            set = set_for req\n            add (o)-> set[ path o ]\n        when RegExp\n          add (o)-> req.test path o\n        when null, 0, \"\", Boolean, String, Number\n          if \"_id\" == target\n            q._all_ids = [req]\n          else\n            add (o)-> req == path o\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  search: (text)->\n    return @ unless text\n    list =\n      for item in text.split(/\\s+/)\n        item = item.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n        continue unless item.length\n        \"(#{item})\"\n    return @ unless list.length\n    regexp = (new RegExp list.join(\"|\"), \"ig\")\n    @where (o)->\n      s = o.q.search_words\n      (!s) || regexp.test s\n\n  shuffle: ->\n    @sort Math.random\n\n  order: (order)->\n    return @ if _.isEqual order, @$sort['_reduce.list']\n    new Query @, ->\n      @$sort = _.cloneDeep @$sort\n      @$sort['_reduce.list'] = order\n\n  sort: (sort...)->\n    @order { sort }\n  \n  page: (page_by)->\n    new Query @, ->\n      @$page_by = page_by\n\n  form: (ids...)->\n    oo = @find ...ids\n    if oo\n      o = @all.$memory[oo.id].form ?= {}\n      o.__proto__ = oo\n      o\n    else\n      oo\n\n  find: (...ids)->\n    for id in ids when o = @hash[id]\n      return o\n    null\n\n  finds: (ids)->\n    for id in ids when o = @hash[id]\n      o\n\n  pluck: -> @list.pluck arguments...\n\n  Object.defineProperties @::,\n    reduce:\n      get: ->\n        @all._finder.calculate @, @all.$memory\n        @_reduce\n\n    list:\n      get: ->\n        @reduce.list\n\n    hash:\n      get: ->\n        @reduce.hash\n\n    memory:\n      get: ->\n        @all.$memory\n\n    ids:\n      get: ->\n        Object.keys @hash\n","module.exports = Mem = require \"./mem.coffee\"\nMem.Rule = require \"./rule.coffee\"\nMem.Base = require \"./base.coffee\"\n","\nmodule.exports =\n  Query:  require \"./query.coffee\"\n  Set:    require \"./set.coffee\"\n  Map:    require \"./map.coffee\"\n  List:   require \"./list.coffee\"\n  Model:  require \"./model.coffee\"\n  Finder: require \"./finder.coffee\"\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\n{ Finder, Query, Model, List, Set, Map } = require \"./base.coffee\"\n\nrename = (base)->\n  base = _.snakeCase(base).replace /s$/, \"\"\n  name = Mem.Name[base]\n  return name if name\n\n  id =   \"#{base}_id\"\n  ids =  \"#{base}_ids\"\n  list = \"#{base}s\"\n  deploys = []\n  depends = []\n  Mem.Name[list] = Mem.Name[base] = { id, ids, list, base, deploys, depends }\n\nmodule.exports = class Rule\n  constructor: (base, cb)->\n    @$name = rename base\n    @model = Model\n    @list  = List\n    @set   = Set\n    @map   = Map\n\n    @all = Query.build Mem.State.base(@$name)\n    @all.cache = {}\n    @all._finder = new Finder @$name\n\n    @depend_on base\n\n    @map_property = {}\n\n    { base } = @$name\n    @model_property =\n      id:\n        enumerable: true\n        get: -> @_id\n      [@$name.id]:\n        enumerable: true\n        get: -> @_id\n\n    @form_property =\n      changes:\n        enumerable: true\n        value: (key)->\n          if _.isEqual @[key], @find[key]\n            null\n          else\n            @$model[key]\n      isChanged:\n        enumerable: true\n        get: ->\n          keys = Object.keys @\n          for key in keys\n            return true unless _.isEqual @[key], @$model[key]\n          return false\n\n    @list_property =\n      first:\n        enumerable: false\n        get: -> @[0]\n      head:\n        enumerable: false\n        get: -> @[0]\n      tail:\n        enumerable: false\n        get: -> @[@length - 1]\n      last:\n        enumerable: false\n        get: -> @[@length - 1]\n\n      uniq:\n        enumerable: false\n        get: ->\n          @constructor.bless _.uniq @\n\n      pluck:\n        enumerable: false\n        value: (keys...)->\n          cb =\n            switch keys.length\n              when 0\n                -> null\n              when 1\n                _.property keys[0]\n              else\n                (o)-> _.at(o, keys...)\n          @constructor.bless @map cb\n\n    @set_property = {}\n\n    @schema cb if cb\n    return\n\n  schema: (cb)->\n    cb.call @\n    if @model == Model\n      class @model extends @model\n    Object.defineProperties @model::, @model_property\n\n    if @list == List\n      class @list extends @list\n    Object.defineProperties @list::, @list_property\n\n    if @set == Set\n      class @set extends @set\n    Object.defineProperties @set::, @set_property\n\n    if @map == Map\n      class @map extends @map\n    Object.defineProperties @map::, @map_property\n\n    @model.$name = @list.$name = @set.$name = @map.$name = @$name\n\n    Mem.Query[@$name.list] = @all\n\n    Mem.Set[@$name.base] = _set = new @set\n    _set.all = @all\n    _set.$name = @$name\n    list = @list.bless [], @all\n\n    Mem.Finder[@$name.list] = finder = @all._finder\n    finder.set = @set\n    finder.map = @map\n    finder.list = @list\n    finder.model = @model\n    finder.$format = Mem.State.base(@$name).$format\n    @\n\n  key_by: (keys)->\n    cb =\n      switch keys?.constructor\n        when undefined\n          -> @_id\n        when Function\n          keys\n        when String, Array\n          _.property keys\n        else\n          throw Error \"unimplemented #{keys}\"\n\n    @model_property.id =\n      enumerable: true\n      get: cb\n\n  deploy: (cb)->\n    Mem.set_deploy @$name.base, cb\n\n  depend_on: (parent)->\n    { _finder } = @all\n    Mem.set_depend parent, ->\n      _finder.clear_cache()\n\n  scope: (cb)->\n    for key, val of cb @all\n      @use_cache key, val\n\n\n  property: (type, o)->\n    Object.assign @[\"#{type}_property\"], o\n\n\n  default_scope: (scope)->\n    @all._copy scope @all\n    base = Mem.State.base(@$name)\n    base.$sort = @all.$sort\n\n  shuffle: ->\n    @default_scope (all)-> all.shuffle()\n\n  order: (sort...)->\n    @default_scope (all)-> all.sort sort...\n\n  \n\n  relation_to_one: (key, target, ik, else_id)->\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        id = _.get @, ik\n        Mem.Query[target].find id, else_id\n\n  relation_to_many: (key, target, cmd, ik, qk)->\n    all = @all\n    @use_cache key, (id)->\n      Mem.Query[target][cmd] \"#{qk}\": id\n\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        all[key](@[ik])\n\n  relation_tree: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      if n\n        q = all.where \"#{ik}\": id\n        all[key] q.ids, n - 1\n      else\n        all.where { id }\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  relation_graph: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      q = all.where { id }\n      if n\n        ids = []\n        for a in q.pluck(ik) when a?\n          for k in a when k?\n            ids.push k\n\n        all[key] _.uniq(ids), n - 1\n      else\n        q\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  use_cache: (key, val)->\n    switch val?.constructor\n      when Function\n        @all[key] = (args...)=>\n          @all.cache[\"#{key}:#{JSON.stringify args}\"] ?= val args...\n      else\n        @all[key] = val\n\n  path: (keys...)->\n    for key in keys\n      @belongs_to key\n    @deploy ->\n      subids = @id.split(\"-\")\n      @idx = subids[keys.length]\n      for key, idx in keys\n        @[\"#{key}_id\"] = subids[0..idx].join '-'\n\n    { all } = @\n    pk = keys[-1..][0] + \"_id\"\n    @model_property.siblings =\n      get: ->\n        q = {}\n        q[pk] = @[pk]\n        all.where q\n\n  belongs_to: (to, option = {})->\n    name = rename to\n    { key = name.id, target = name.list, miss } = option\n    @relation_to_one name.base, target, key, miss\n\n  habtm: (to, option = {})->\n    name = rename to\n    if option.reverse\n      { key = @$name.ids, target = to } = option\n      @relation_to_many name.list, target, \"in\", \"id\", key\n    else\n      { key = name.ids, target = name.list } = option\n      @relation_to_many name.list, target, \"where\", key, \"id\"\n\n  has_many: (to, option = {})->\n    name = rename to\n    { key = @$name.id, target = name.list } = option\n    @relation_to_many name.list, target, \"where\", \"id\", key\n\n  tree: (option = {})->\n    fk = @$name.id\n    @relation_tree \"nodes\", fk\n    @belongs_to @$name.base, option\n\n    Object.defineProperties @all,\n      leaf:\n        get: ->\n          not_leaf = _.uniq @pluck fk\n          @where (o)-> o.id not in not_leaf\n\n  graph: (option = {})->\n    { directed, cost } = option\n    ik = @$name.ids\n    @relation_to_many @$name.list, @$name.list, \"where\", ik, \"id\"\n    @relation_graph \"path\", ik\n    unless directed\n      true # todo\n","_ = require \"lodash\"\n{ State } = require \"./index.coffee\"\nQuery = require \"./query.coffee\"\n\nf_common = (type)-> (list, parent)->\n  journal = State.journal(@$name)\n  @all._finder[type] journal, @all, list, parent\n\nf_update = (list, parent)->\n  journal = State.journal(@$name)\n  if parent?\n    @all._finder.update journal, @all, list, parent\n\nf_item = (cb)->\n  (item, parent)->\n    if item?\n      cb.call @, [item], parent\n\nf_clear = ->\n  @all._finder.clear_cach @all\n\n\nmodule.exports = class Set\n  set:           f_common \"reset\"\n  reset:         f_common \"reset\"\n\n  merge:         f_common \"merge\"\n  add:    f_item f_common \"merge\"\n  append: f_item f_common \"merge\"\n\n  reject:        f_common \"remove\"\n  del:    f_item f_common \"remove\"\n  remove: f_item f_common \"remove\"\n  updates:       f_update\n  update: f_item f_update\n\n  clear_cache:   f_clear\n  refresh:       f_clear\n  rehash:        f_clear\n\n  find: (...ids)->\n    journal = State.journal(@$name)\n    for id in ids when o = @all.$memory[id]\n      journal.$memory[id] = o\n      return o.item\n    null\n","_ = require \"lodash\"\n{ State, Query } = require \"./mem.coffee\"\n\nmodule.exports = class Map\n  @bless: (o)->\n    o.__proto__ = @::\n    o\n\n  @$deploy: (model, $format, $sort, journal, item, parent)->\n    o = { item, $group: [] }\n\n    @$deploy_reduce model, item, $format, journal, o\n    @$deploy_sort   model, item, $sort,   journal\n    o\n\n  @$deploy_reduce: (model, item, $format, journal, o)->\n    emit_default = emit_default_origin = (keys, cmd)->\n      return cmd if keys.length\n      emit_default = (keys, cmd)-> cmd\n\n      base =\n        set: item.id\n        list: true\n      Object.assign base, cmd\n\n    emit = (target)=> (keys..., cmd)=>\n      cmd = emit_default keys, cmd\n      path = [\"_reduce\", keys...].join('.')\n      target.push [path, cmd]\n      map   = $format[path] ?= {}\n      map_j = journal.$format[path] ?= {}\n      @init map,   cmd\n      @init map_j, cmd\n\n    emit_group = emit o.$group\n    model.map_partition item, emit_group\n    model.map_reduce    item, emit_group\n\n    if emit_default == emit_default_origin\n      emit_group {}\n\n  @$deploy_sort: (model, item, $sort, journal)->\n    emit = (keys..., cmd)->\n      path = [\"_reduce\", keys...].join('.')\n      $sort[path] = cmd\n      journal.$sort[path] = cmd\n    emit \"list\", {}\n    model.order item, emit\n\n  @init: (o, map)->\n    if map.id\n      o.id = map.id\n    if map.list\n      o.list = []\n    if map.count\n      o.count = 0\n    if map.all\n      o.all = 0\n    if map.set\n      o.hash = {}\n\n  @order: (query, path, from, map, list, bless)->\n    o = from\n    if Object == from.constructor\n      if map.belongs_to\n        for id, val of from\n          val.__proto__ = Query[map.belongs_to].find id\n      else\n        for id, val of from\n          val.id = id\n\n    else\n      if map.belongs_to\n        for val in from\n          val.__proto__ = Query[map.belongs_to].find val.id\n\n    if map.cover\n      remain = []\n      cover  = []\n      for id in map.cover\n        if from[id]\n          cover.push id\n        else\n          remain.push id\n      o.remain = remain\n      o.cover  = cover\n\n    if map.sort\n      o = _.orderBy o, map.sort...\n    \n    if map.pluck\n      o = for oo in o when val = _.get oo, map.pluck\n        val\n\n    if key = map.group_by\n      from = o\n      o = _.groupBy o, (oo)-> _.get oo, key\n      for idx, a of o when a\n        bless a\n\n    if map.page && per = query.$page_by\n      from = o\n      o = []\n      o.all = from.length\n      for oo, idx in from\n        unless idx % per\n          o.push c = []\n          bless c\n        c.push oo\n      o.page_idx = (item)->\n        for a, page_idx in @ when a.includes item\n          return page_idx\n        null\n\n    if key = map.index\n      for ___, oo of o\n        is_ary = 'number' == typeof _.get oo, key\n        counts =\n          if is_ary\n            []\n          else\n            {}\n        break\n      \n      for ___, oo of o\n        idx = _.get oo, key\n        unless counts[idx]\n          a = []\n          bless a\n          counts[idx] = a\n        counts[idx].push oo\n      o = counts\n\n    bless o\n    o\n\n  @finish: (query, path, o, list)->\n    if o.hash\n      o.set = Object.keys o.hash\n    if o.count && o.pow?\n      o.avg = o.all ** (1 / o.count)\n    if o.count && o.all?\n      o.avg = o.all * (1 / o.count)\n    if o.min? && o.max?\n      o.range = o.max - o.min\n      if o.all\n        o.density = o.all / o.range\n\n  @reduce: (query, path, item, o, map)->\n    if map.count\n      o.count += map.count\n    if map.all\n      o.all += map.all\n    if map.pow\n      o.pow *= map.pow\n\n    if map.list\n      o.list.push item\n\n    if map.set\n      o.hash[map.set] = item\n\n    if map.max\n      unless map.max <= o.max\n        o.max_is = item\n        o.max = map.max\n    if map.min\n      unless o.min <= map.min\n        o.min_is = item\n        o.min = map.min\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nmodule.exports = class List extends Array\n  @bless: (list, query)->\n    list.__proto__ = @::\n    list.query = query\n    list\n\n  sort: (sort...)->\n    o = _.orderBy @, sort...\n    o.__proto__ = @__proto__\n    o\n\n  group_by: (cb)->\n    o = _.groupBy @, cb\n    for key, oo of o\n      oo.__proto__ = @__proto__\n    o\n\n  page_by: (per)->\n    idx = 0\n    Object.values @group_by (o)->\n      Math.floor(idx++ / per)\n\n  where: (req)-> @query.where req\n  in:    (req)-> @query.in    req\n","_ = require \"lodash\"\n\n\nmodule.exports = class Model\n  @bless: (o)->\n    o.__proto__ = @::\n    o\n\n  @$deploy: (item, parent)->\n    @bless item\n    if parent\n      _.merge item, parent\n    for deploy in @$name.deploys\n      deploy.call item, @\n    unless item.id\n      throw new Error \"detect bad data: #{JSON.stringify item}\"\n\n  @update: (item, old)->\n  @create: (item)->\n  @delete: (old)->\n\n  @map_partition:  (item, emit)->\n    undefined\n\n  @map_reduce: (item, emit)->\n    undefined\n\n  @order: (reduce, emit)->\n    undefined\n","_ = require \"lodash\"\n{ State, Query, Format, step } = require \"./mem.coffee\"\n\neach_by_id = ({ list, depends }, from, process)->\n  f() for f in depends\n  switch from?.constructor\n    when Array\n      for item in from\n        process item.id || item\n  return\n\neach = ({ list, depends }, from, process)->\n  f() for f in depends\n  switch from?.constructor\n    when Array\n      for item in from\n        process item\n    when Object\n      for id, item of from\n        item._id = id\n        process item\n  return\n\nvalidate = (item, chklist)->\n  return false unless item and chklist\n  for chk in chklist when ! chk item\n    return false\n  true\n\n\nmodule.exports = class Finder\n  constructor: (@$name)->\n    State.step[@$name.list] = step()\n    State.base(@$name)\n\n  calculate: (query, memory)->\n    return unless query._step < State.step[@$name.list]\n\n    delete query._reduce\n    query._step = step()\n\n    cache = _.cloneDeep @$format\n    paths =\n      _reduce:\n        list: []\n        hash: {}\n\n    if query._all_ids\n      @reduce @map, cache, paths, query, memory, query._all_ids\n    else\n      if query == query.all\n        @reduce @map, cache, paths, query, memory, Object.keys memory\n      else\n        for partition in query.$partition\n          @reduce @map, cache, paths, query, memory, _.get query.all, \"reduce.#{partition}\"\n\n    @finish_order @map, cache, paths, query\n    return\n\n  reduce: (map, cache, paths, query, memory, ids)->\n    return unless ids\n    for id in ids when o = memory[id]\n      { item, $group } = o\n      continue unless validate item, query._filters\n      for [path, a] in $group\n        o = paths[path] = cache[path]\n        map.reduce query, path, item, o, a\n\n  finish_order: (map, cache, paths, query)->\n    for path, o of paths\n      map.finish query, path, o, @list\n      _.set query, path, o\n\n    for path, cmd of query.$sort when o = from = _.get(query, path)\n      o = map.order query, path, o, cmd, @list, (target)=>\n        @list.bless target, query\n      o.from = from\n      _.set query, path, o\n\n  clear_cache: (all = null)->\n    State.step[@$name.list] = step()\n    if all\n      for id, { item } of all.$memory\n        @map.$deploy_sort @model, item, all\n    return\n\n  reset: (journal, all, from, parent)->\n    { $memory } = all\n    journal.$memory = new Object null\n    State.base(@$name).$memory = all.$memory = news = new Object null\n    @merge journal, all, from, parent\n\n    for key, old of $memory\n      item = news[key]\n      unless item?\n        @model.delete old\n\n  merge: (journal, all, from, parent)->\n    { $memory } = all\n    each @$name, from, (item)=>\n      old = $memory[item.id]\n      @model.$deploy item, parent\n      o = @map.$deploy @model, @$format, all.$sort, journal, item, parent\n      journal.$memory[item.id] = o\n      $memory[item.id] = o\n      if old?\n        @model.update item, old.item\n      else\n        @model.create item\n    @clear_cache()\n\n  remove: (journal, all, ids)->\n    { $memory } = all\n    hit = false\n    each_by_id @$name, ids, (id)=>\n      old = $memory[id]\n      if old?\n        @model.delete old.item\n        delete journal.$memory[id]\n        delete $memory[id]\n        hit = true\n    if hit?\n      @clear_cache()\n\n  update: (journal, all, ids, parent)->\n    { $memory } = all\n    each_by_id @$name, ids, (id)=>\n      return unless old = $memory[id]\n      _.merge old.item, parent\n      o = @map.$deploy @model, @$format, all.$sort, journal, old.item, parent\n      journal.$memory[id] = o\n      $memory[id] = o\n\n      @model.update old.item, old.item\n    @clear_cache()\n      \n"],"sourceRoot":""}