{"version":3,"sources":["webpack://Mem/webpack/universalModuleDefinition","webpack://Mem/webpack/bootstrap","webpack://Mem/external \"lodash\"","webpack://Mem/./src/mem.coffee","webpack://Mem/./src/query.coffee","webpack://Mem/./src/datum.coffee","webpack://Mem/./src/base.coffee","webpack://Mem/./src/index.coffee","webpack://Mem/./src/rule.coffee","webpack://Mem/./src/set.coffee","webpack://Mem/./src/map.coffee","webpack://Mem/./src/list.ts","webpack://Mem/./src/model.ts","webpack://Mem/./src/struct.ts","webpack://Mem/./src/finder.coffee"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","_","Datum","Set","Map","Name","Query","Finder","$react_listeners","$step","PureObject","Metadata","Reflect","pack","JSON","val","META","meta","step","State","transaction","console","cb","journal","cache","type","oo","base","$journal","$base","store","set","finder","list","$name","$sort","$format","$memory","mixin","data","join","bye","react","notify","notify_for_react","e","changed","state","merge","type_chk","Array","req","constructor","set_for","query_parser","_filters","_all_ids","tap","_group","_is_uniq","$partition","all","$page_by","add","q","Error","path","ary","b","order","point","sort","sum","xa","idx","text","target","item","regexp","RegExp","Math","keys","page_by","form","ids","hash","id","reduce","_finder","_reduce","memory","model","$group","List","Model","Struct","Mem","rename","method","map","_id","deploys","parent","depends","scope","ik","else_id","cmd","qk","subids","navi","pk","to","option","fk","leaf","not_leaf","f_common","is_hit","f_update","f_item","f_clear","reset","append","reject","del","remove","updates","update","clear_cache","refresh","rehash","Dash","_diff","writable","diff","a","navi_reduce","is_did","child","child_keys","new_val","new_key","root_key","query","variance","head","pow","sd","min","max","from","origin","size","pad","box","counts","is_ary","max_idx","max_is","length","remain","cover","per","page_idx","this","bless","uniq","at","setPrototypeOf","where","in","super","orderBy","getPrototypeOf","groupBy","values","group_by","floor","struct","old","emit","defineProperties","each_by_id","process","each","validate","ctx","paths","tgt","sorted","dashed","result","map_j","bare","deploy","news"],"mappings":"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","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mem\"] = factory();\n\telse\n\t\troot[\"Mem\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"lodash\");","_ = require 'lodash'\n\nDatum = require './datum.coffee'\n\nSet = {}\nMap = {}\nName = {}\nQuery = {}\nFinder = {}\n\n$react_listeners = []\n$step = 0\n\nPureObject = ->\n  Object.create null\n\nclass Metadata\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o.write_at = 0\n    o.depth = 0\n    o.pack ?= PureObject()\n    o\n\n  json: ->\n    JSON.stringify @, (key, val)=>\n      if ( val && val.meta && val.item && val.$group && val.meta == @ )\n        { item, $group } = val\n        { item, $group }\n      else\n        val\n\nMETA = (meta = {})->\n  Metadata.bless meta\n  meta\n\nstep = -> ++$step\n\ncache = (type)-> (list)->\n  o = State[type].pack\n  if o[list]\n    o[list]\n  else\n    oo = o[list] = PureObject()\n    oo.$sort   = PureObject()\n    oo.$memory = PureObject()\n    oo.$format = PureObject()\n    oo\n\n\nState =\n  transaction: (cb, meta)->\n    @$journal = pack = META meta\n    if pack.depth++\n      console.warn(\"nested transaction\");\n    cb pack\n    pack.depth--\n    @$journal = META()\n    pack\n\n  journal: cache '$journal'\n  base:    cache '$base'\n  meta: -> @$journal\n  step:     PureObject()\n  $journal: META()\n  $base:    META()\n\n  store: (meta)->\n    return false unless meta?.pack\n    for list, { $sort, $memory, $format } of meta.pack\n      finder = Finder[list]\n      set = Set[finder.$name.base]\n      unless finder && set\n        console.error \"not found Finder and Query\", list, meta.pack\n        continue\n      { model } = set\n      base = @base list\n      journal = @journal list\n\n      for key, o of $sort\n        base.$sort[key] = o\n        journal.$sort[key] = o\n\n      for key, o of $format\n        base.$format[key] = o\n        journal.$format[key] = o\n\n      for key, o of $memory\n        Datum.bless o, meta, model\n        base.$memory[key] = o\n        journal.$memory[key] = o\n\n      set.clear_cache()\n    true\n\n  mixin:\n    data: ->\n      $step: State.step\n\n  join: ({react})->\n    if react\n      $react_listeners.push react\n    return\n\n  bye: ({react})->\n    if react\n      $react_listeners = $react_listeners.filter (o)-> o != react\n    return\n\n  notify: ( list )->\n    @step[list] = step()\n    if $react_listeners.length\n      @notify_for_react()\n  \n  notify_for_react: _.debounce ->\n    for o in $react_listeners\n      e = {}\n      changed = false\n      for key, val of o.state \n        continue unless \"step_\" == key[0..4]\n        list = key[5..]\n        val = @step[list]\n        if o.state[key] < val\n          e[key] = val\n          changed = true\n      if changed\n        o.setState e\n  , 1\n\nmerge = (o)->\n  for key, val of o\n    switch\n      when Query[key]?\n        key = Name[key].base\n        Set[key].merge val\n      when Set[key]?\n        Set[key].append val\n\nmodule.exports = { Set, Map, Name, State, Finder, Query, PureObject, merge, step }\n","_ = require \"lodash\"\n\ntype_chk = (req)->\n  return req unless req\n  return Array if Array.isArray req\n  req.constructor\n\nset_for = (list)->\n  set = {}\n  Reflect.setPrototypeOf set, null\n  for key in list\n    set[key] = true\n  set\n\nquery_parser = (base, req, cb)->\n  return base unless req\n\n  new Query base, ->\n    @_filters = base._filters.concat()\n    switch type_chk req\n      when Object\n        for key, val of req\n          cb @, key, val, _.property key\n\n      when Function, Array, String\n        cb @, null, req, (o)-> o\n      else\n        console.log { req }\n        #throw Error 'unimplemented'\n\n\nmodule.exports = class Query\n  @build: ({ $sort, $memory })->\n    _all_ids = _group = null\n    _is_uniq = true\n    _filters = []\n    $partition = [\"set\"]\n    new Query { _all_ids, _group, _is_uniq, _filters, $sort, $partition }, ->\n      @all = @\n      @$memory = $memory\n\n  constructor: (base, tap)->\n    @_step = 0\n    @_copy base\n    tap.call @\n\n  _copy: ({ @all, @_all_ids, @_group, @_is_uniq, @_filters, @$sort, @$partition, @$page_by })->\n\n  in: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch type_chk req\n        when Array\n          set = set_for req\n          add (o)->\n            for key in path o\n              return true if set[key]\n            false\n        when RegExp\n          add (o)->\n            for val in path o\n              return true if req.test val\n            false\n        when null, 0, \"\", Boolean, String, Number\n          add (o)->\n            -1 < path(o)?.indexOf req\n        when undefined\n          # nop\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  where: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch type_chk req\n        when Function\n          add req\n        when Array\n          if \"id\" == target\n            q._all_ids = req\n          else\n            set = set_for req\n            add (o)-> set[ path o ]\n        when RegExp\n          add (o)-> req.test path o\n        when null, 0, \"\", Boolean, String, Number\n          if \"id\" == target\n            q._all_ids = [req]\n          else\n            add (o)-> req == path o\n        when undefined\n          # nop\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  partition: (...ary)->\n    new Query @, ->\n      @$partition = ary\n\n  distinct: (b = true)->\n    return @ if b == @_is_uniq\n    new Query @, ->\n      @_is_uniq = b\n      if b && @_all_ids\n        @_all_ids = _.uniq @_all_ids\n\n  distance: (key, order, point)->\n    @order \"list\", sort: [\n      (o)=>\n        sum = 0\n        for xp, idx in point\n          xa = _.get( o, key )[idx]\n          sum += (xa - xp) ** 2\n        sum ** 0.5\n      , order\n    ]\n\n  search: (text, target = \"q.search_words\")->\n    return @ unless text\n    list =\n      for item in text.split(/\\s+/)\n        item = item.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n        continue unless item.length\n        \"(#{item})\"\n    return @ unless list.length\n    regexp = (new RegExp list.join(\"|\"), \"ig\")\n    @where (o)->\n      s = _.get( o, target )\n      (!s) || regexp.test s\n\n  shuffle: ->\n    @sort Math.random\n\n  order: (...keys, order)->\n    keys.push \"list\" unless keys.length\n    path = [\"_reduce\", ...keys].join('.')\n\n    return @ if _.isEqual order, @$sort[path]\n    new Query @, ->\n      @$sort = _.cloneDeep @$sort\n      @$sort[path] = order\n\n  sort: (...sort)->\n    @order { sort }\n\n  page: (page_by)->\n    new Query @, ->\n      @$page_by = page_by\n\n  form: (ids...)->\n    oo = @find ...ids\n    if oo\n      o = @all.$memory[oo.id].form ?= {}\n      Reflect.setPrototypeOf o, oo\n      o\n    else\n      oo\n\n  find: (...ids)->\n    for id in ids when o = @hash[id]\n      return o\n    null\n\n  finds: (ids)->\n    for id in ids when o = @hash[id]\n      o\n\n  pluck: -> @list.pluck arguments...\n\n  Object.defineProperties @::,\n    reduce:\n      get: ->\n        @all._finder.calculate @, @all.$memory\n        @_reduce\n\n    list:\n      get: ->\n        @reduce.list\n\n    hash:\n      get: ->\n        @reduce.hash\n\n    memory:\n      get: ->\n        @all.$memory\n\n    ids:\n      get: ->\n        Object.keys @hash\n","module.exports = class Datum\n  @bless: (o, meta, model)->\n    model.bless o.item\n    o.meta = meta\n\n  constructor: (@meta, @item)->\n    @$group = []\n\n  toJSON: (key)->\n    { @item, @$group }\n","\nmodule.exports =\n  Query:  require \"./query.coffee\"\n  Set:    require \"./set.coffee\"\n  Map:    require \"./map.coffee\"\n  List:   require \"./list.ts\"\n  Model:  require \"./model.ts\"\n  Struct: require \"./struct.ts\"\n  Finder: require \"./finder.coffee\"\n","module.exports = Mem = require \"./mem.coffee\"\nMem.Rule = require \"./rule.coffee\"\nMem.Base = require \"./base.coffee\"\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\n{ Finder, Query, Model, Struct, List, Set, Map } = require \"./base.coffee\"\n\nrename = (base)->\n  base = _.snakeCase(base).replace /s$/, \"\"\n  name = Mem.Name[base]\n  return name if name\n\n  list = \"#{base}s\"\n  Mem.Name[list] = Mem.Name[base] = o = Mem.PureObject()\n  o.base = base\n  o.list = list\n  o.id =   \"#{base}_id\"\n  o.ids =  \"#{base}_ids\"\n  o.deploys = []\n  o.depends = []\n  o\n\nmethod = (r, key, o)->\n  Object.defineProperty r.model::, key, o\n\nmodule.exports = class Rule\n  constructor: (base, cb)->\n    @$name = rename base\n    @state = Mem.State.base @$name.list\n\n    @all = Query.build @state\n    @all.$sort[\"_reduce.list\"] = {}\n    @all._cache = {}\n    @all._finder = new Finder @$name, @state\n\n    @depend_on @$name.list\n\n    class @model extends Model\n    class @list  extends List\n    class @set   extends Set\n    class @map   extends Map\n\n    __form_property__ =\n      changes:\n        enumerable: true\n        value: (key)->\n          if _.isEqual @[key], @find[key]\n            null\n          else\n            @$model[key]\n      isChanged:\n        enumerable: true\n        get: ->\n          keys = Object.keys @\n          for key in keys\n            return true unless _.isEqual @[key], @$model[key]\n          return false\n\n    @schema cb if cb\n    return\n\n  schema: (cb)->\n    cb.call @\n    @model.$name = @list.$name = @set.$name = @map.$name = @$name\n    @all._finder.join @\n\n    Mem.Set[@$name.base] = new @set @\n    Mem.Query[@$name.list] = @all\n    Mem.Finder[@$name.list] = @all._finder\n    @\n\n  key_by: (keys)->\n    cb =\n      switch keys?.constructor\n        when undefined\n          -> @_id\n        when Function\n          keys\n        when String, Array\n          _.property keys\n        else\n          throw Error \"unimplemented #{keys}\"\n\n    method @, 'id',\n      enumerable: true\n      get: cb\n\n  struct: (...keys, cb)->\n    class @model extends Struct\n    keys.forEach (key, idx)=>\n      method @, key,\n        enumerable: true\n        get: -> @[idx]\n    method @, 'id',\n      enumerable: true\n      get: cb\n\n  deploy: (cb)->\n    @$name.deploys.push cb\n\n  depend_on: (parent)->\n    Mem.Name[parent].depends.push parent\n\n  scope_without_cache: (cb)->\n    for key, val of cb @all\n      @all[key] = val\n\n  scope: (cb)->\n    for key, val of cb @all\n      @use_cache key, val\n\n\n  property: (type, o)->\n    Object.defineProperties @[type]::, o\n\n  default_scope: (scope)->\n    @all._copy scope @all\n    base = Mem.State.base @$name.list\n    base.$sort = @all.$sort\n\n  shuffle: ->\n    @default_scope (all)-> all.shuffle()\n\n  sort: (...sort)->\n    @default_scope (all)-> all.sort ...sort\n\n  order: (...order)->\n    @default_scope (all)-> all.order ...order\n\n  relation_to_one: (key, target, ik, else_id)->\n    method @, key,\n      enumerable: true\n      get: ->\n        id = _.get @, ik\n        Mem.Query[target].find id, else_id\n\n  relation_to_many: (key, target, ik, cmd, qk)->\n    all = @all\n    @use_cache key, (id)->\n      Mem.Query[target].distinct(false)[cmd] \"#{qk}\": id\n\n    method @, key,\n      enumerable: true\n      get: ->\n        all[key](@[ik])\n\n  relation_tree: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      if n\n        q = all.where \"#{ik}\": id\n        all[key] q.ids, n - 1\n      else\n        all.where { id }\n\n    method @, key,\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  relation_graph: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      q = all.where { id }\n      if n\n        ids = []\n        for a in q.pluck(ik) when a?\n          for k in a when k?\n            ids.push k\n\n        all[key] _.uniq(ids), n - 1\n      else\n        q\n\n    method @, key,\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  use_cache: (key, val)->\n    switch val?.constructor\n      when Function\n        @all[key] = (args...)=>\n          @all._cache[\"#{key}:#{JSON.stringify args}\"] ?= val args...\n      else\n        @all[key] = val\n\n  path: (keys...)->\n    if '*' == keys[-1..][0]\n      { base, list } = @$name\n      @belongs_to base\n      @has_many   list\n      keys.pop()\n\n    for key in keys\n      @belongs_to key\n\n    @deploy (model, reduce, order)->\n      subids = @id.split(\"-\")\n      @idx = subids[-1..][0]\n      for key, idx in keys\n        @[\"#{key}_id\"] = subids[0..idx].join '-'\n\n      if base && keys.length + 1 < subids.length\n        @[\"#{base}_id\"] = subids[..-2].join '-'\n\n      reduce \"id_tree\",\n        navi: subids\n\n    { all } = @\n    pk = keys[-1..][0] + \"_id\"\n    method @, 'siblings',\n      get: ->\n        q = {}\n        q[pk] = @[pk]\n        all.where q\n\n  belongs_to: (to, option = {})->\n    name = rename to\n    { key = name.id, target = name.list, miss } = option\n    @relation_to_one name.base, target, key, miss\n\n  habtm: (to, option = {})->\n    name = rename to\n    if option.reverse\n      { key = @$name.ids, target = to } = option\n      @relation_to_many name.list, target, \"id\", \"in\", key\n    else\n      { key = name.ids, target = name.list } = option\n      @relation_to_many name.list, target, key, \"where\", \"id\"\n\n  has_many: (to, option = {})->\n    name = rename to\n    { key = @$name.id, target = name.list } = option\n    @relation_to_many name.list, target, \"id\", \"where\", key\n\n  tree: (option = {})->\n    fk = @$name.id\n    @relation_tree \"nodes\", fk\n    @belongs_to @$name.base, option\n\n    Object.defineProperties @all,\n      leaf:\n        get: ->\n          not_leaf = _.uniq @pluck fk\n          @where (o)-> o.id not in not_leaf\n\n  graph: (option = {})->\n    { directed, cost } = option\n    ik = @$name.ids\n    @relation_to_many @$name.list, @$name.list, ik, \"where\", \"id\"\n    @relation_graph \"path\", ik\n    unless directed\n      true # todo\n","_ = require \"lodash\"\n{ State, Set } = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nf_common = (type)-> (list, parent)->\n  is_hit = @finder.data_set type, list, parent\n  @clear_cache is_hit\n\nf_update = (list, parent)->\n  if parent?\n    is_hit = @finder.data_set 'update', list, parent\n    @clear_cache is_hit\n\n\nf_item = (cb)->\n  (item, parent)->\n    if item?\n      cb.call @, [item], parent\n\nf_clear = (is_hit = true)->\n  if is_hit?\n    for name in @$name.depends\n      State.notify name\n  return\n\nmodule.exports = class Set\n  constructor: ({ @$name, @all, @model })->\n    @finder = @all._finder\n\n  set:           f_common \"reset\"\n  reset:         f_common \"reset\"\n\n  merge:         f_common \"merge\"\n  add:    f_item f_common \"merge\"\n  append: f_item f_common \"merge\"\n\n  reject:        f_common \"remove\"\n  del:    f_item f_common \"remove\"\n  remove: f_item f_common \"remove\"\n  updates:       f_update\n  update: f_item f_update\n\n  clear_cache:   f_clear\n  refresh:       f_clear\n  rehash:        f_clear\n\n  find: (...ids)->\n    meta = State.meta()\n    journal = State.journal @$name.list\n    for id in ids when o = @all.$memory[id]\n      o.meta = meta\n      journal.$memory[id] = o\n      @clear_cache true\n      return o.item\n    null\n","_ = require \"lodash\"\n{ State, Query } = require \"./mem.coffee\"\n\nDash = (o, keys)->\n  Object.defineProperties o,\n    _diff:\n      enumerable: false\n      writable: true\n      value: null\n    diff:\n      enumerable: false\n      get: ->\n        return @_diff if @_diff\n        @_diff =\n          for idx in [0 .. @length - 2]\n            a = @[idx]\n            b = @[idx + 1]\n            oo = {}\n            for key in keys\n              _.set oo, key, _.get(b, key) - _.get(a, key)\n            oo\n        Dash @_diff, keys\n  o\n\nnavi_reduce = (root)->\n  is_did = false\n  for root_key in Object.keys root when child = root[root_key]\n    child_keys = Object.keys child\n    switch child_keys.length\n      when 0\n        is_did = true\n        root[root_key] = 0\n      when 1\n        is_did = true\n        new_key = child_keys[0]\n        new_val = child[new_key]\n        delete root[root_key]\n        root[new_key] = new_val\n      else\n        navi_reduce child\n  navi_reduce root if is_did\n  root\n\nmodule.exports = class Map\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o\n\n  @init: (o, cmd)->\n    if cmd.id\n      o.id = cmd.id\n    if cmd.list\n      o.list = []\n    if cmd.count\n      o.count = 0\n    if cmd.all\n      o.all = 0\n    if cmd.count && cmd.all?\n      o.variance = []\n    if cmd.pow\n      o.pow = 0\n    if cmd.set\n      o.hash = {}\n    if cmd.navi\n      o.navi = {}\n\n  @reduce: (query, path, item, o, cmd)->\n    unless o\n      console.error \"not found $format\", path, cmd, query, item\n      return\n    if cmd.count\n      o.count += cmd.count\n    if cmd.all\n      o.all += cmd.all\n    if cmd.count && cmd.all?\n      o.variance.push cmd.all\n    if cmd.pow\n      o.pow *= cmd.pow\n\n    if cmd.list\n      o.list.push item\n\n    if cmd.set\n      o.hash[cmd.set] = item\n\n    if cmd.max\n      unless cmd.max <= o.max\n        o.max_is = item\n        o.max = cmd.max\n    if cmd.min\n      unless o.min <= cmd.min\n        o.min_is = item\n        o.min = cmd.min\n    if cmd.navi\n      head = []\n      back = navi = o.navi\n      for idx in cmd.navi\n        head.push idx\n        key = head.join \"-\"\n        back = navi\n        navi = navi[key] ||= {}\n\n  @finish: (query, path, o, list)->\n    unless o\n      console.error \"not found $format\", path, query, list\n      return\n    if o.hash\n      o.set = Object.keys o.hash\n    if o.count && o.pow?\n      o.avg = o.pow ** (1 / o.count)\n    if o.count && o.all?\n      o.avg = o.all * (1 / o.count)\n\n    if a = o.variance\n      sum = 0\n      for data in a\n        sum += (data - o.avg) ** 2\n      o.variance = sum / ( o.count - 1 )\n      o.sd = o.variance ** 0.5\n      o.standard = (data)->\n        ( data - @avg ) / @sd\n\n    if o.min? && o.max?\n      o.range = o.max - o.min\n      if o.all\n        o.density = o.all / o.range\n    if o.navi\n      navi_reduce o.navi\n\n  @order: (query, path, from, origin, cmd, list)->\n    o = from\n    if cmd.belongs_to\n      if o instanceof Array\n        for val in o\n          Reflect.setPrototypeOf val, Query[cmd.belongs_to].find val.id\n      else\n        for id, val of o\n          Reflect.setPrototypeOf val, Query[cmd.belongs_to].find id\n\n    else\n      if o.constructor == Object\n        for id, val of o\n          val.id = id\n\n    if cmd.sort\n      o = _.orderBy o, cmd.sort...\n\n    if size = cmd.quantile\n      pad = ( o.length - 1 ) / size\n      box = for i in [0..size]\n        o[ Math.floor i * pad ]\n      o.quantile = box\n\n    if cmd.pluck\n      o = for oo in o when val = _.get oo, cmd.pluck\n        val\n\n    if key = cmd.index\n      for ___, oo of o\n        is_ary = 'number' == typeof _.get oo, key\n        counts =\n          if is_ary\n            []\n          else\n            {}\n        break\n      \n      for ___, oo of o\n        idx = _.get oo, key\n        a = counts[idx]\n        unless a\n          counts[idx] = a = new list query\n        a.push oo\n\n      if cmd.mode\n        max_idx = null\n        max_is = []\n        if is_ary\n          for a, idx in counts when a && max_is.length < a.length\n            max_idx = idx\n            max_is = a\n        else\n          for idx, a of counts when a && max_is.length < a.length\n            max_idx = idx\n            max_is = a\n        max_is.is_mode = max_idx\n      o = counts\n\n    o\n\n  @dash: (query, path, from, origin, cmd, list)->\n    return unless from instanceof Array\n\n    o = from\n    if keys = cmd.diff\n      o = Dash o, keys\n    o\n\n  @post_proc: (query, path, from, origin, cmd, list)->\n    o = from\n    if cmd.cover\n      remain = []\n      cover  = []\n      for id in cmd.cover\n        if origin[id]\n          cover.push id\n        else\n          remain.push id\n      o.remain = remain\n      o.cover  = cover\n\n    if cmd.page && per = query.$page_by\n      o = []\n      o.all = from.length\n      for oo, idx in from\n        unless idx % per\n          o.push c = new list query\n        c.push oo\n      o.page_idx = (item)->\n        for a, page_idx in @ when a.includes item\n          return page_idx\n        null\n    o\n","const _ = require(\"lodash\");\nconst Mem = require(\"./mem.coffee\");\nconst Query = require(\"./query.coffee\");\n\nmodule.exports = class List extends Array {\n\n  get first(){\n    return this[0];\n  }\n\n  get last(){\n    return this[this.length - 1];\n  }\n\n  get head(){\n    return this[0];\n  }\n\n  get tail(){\n    return this[this.length - 1];\n  }\n\n  get uniq(){\n    return this.constructor.bless(_.uniq(this));\n  }\n\n  pluck(...keys){\n    let cb;\n    switch (keys.length) {\n      case 0:\n        cb = function() {\n          return null;\n        };\n        break;\n      case 1:\n        cb = _.property(keys[0]);\n        break;\n      default:\n        cb = function(o) {\n          return _.at(o, ...keys);\n        };\n        break;\n    };\n    return this.constructor.bless(this.map(cb))\n  }\n\n  static bless(list, query) {\n    Reflect.setPrototypeOf(list, this.prototype);\n    if ( query && query.where && query.in ) {\n      list.query = query;\n    }\n    return list;\n  }\n\n  constructor(query) {\n    super();\n    if ( query && query.where && query.in ) {\n      this.query = query;\n    }\n  }\n\n  sort(...sort) {\n    const o = _.orderBy(this, ...sort);\n    Reflect.setPrototypeOf(o, Reflect.getPrototypeOf(this));\n    return o;\n  }\n\n  group_by(cb) {\n    const o = _.groupBy(this, cb);\n    for (const key in o) {\n      const oo = o[key];\n      Reflect.setPrototypeOf(oo, Reflect.getPrototypeOf(this));\n    }\n    return o;\n  }\n\n  page_by(per) {\n    let idx = 0;\n    return Object.values(this.group_by(function(o) {\n      return Math.floor(idx++ / per);\n    }));\n  }\n\n  where(req) {\n    return this.query.where(req);\n  }\n\n  in(req) {\n    return this.query.in(req);\n  }\n\n};\n","const model = class Model extends Object {\n  static bless(o) {\n    Reflect.setPrototypeOf(o, this.prototype);\n    return o;\n  }\n\n  static deploy(struct) { }\n\n  static update(item, old) { }\n\n  static create(item) { }\n\n  static delete(old) { }\n\n  static map_partition(item, emit) {\n    return void 0;\n  }\n\n  static map_reduce(item, emit) {\n    return void 0;\n  }\n\n  static order(item, emit) {\n    return void 0;\n  }\n\n};\n\nmodule.exports = model\n\nObject.defineProperties(model.prototype, {\n  id: {\n    enumerable: true,\n    get: function() {\n      return this._id;\n    },\n  }\n})","const struct = class Struct extends Array {\n  static bless(o) {\n    Reflect.setPrototypeOf(o, this.prototype);\n    return o;\n  }\n\n  static deploy(struct) { }\n\n  static update(item, old) { }\n\n  static create(item) { }\n\n  static delete(old) { }\n\n  static map_partition(item, emit) {\n    return void 0;\n  }\n\n  static map_reduce(item, emit) {\n    return void 0;\n  }\n\n  static order(item, emit) {\n    return void 0;\n  }\n\n};\n\nmodule.exports = struct\n\nObject.defineProperties(struct.prototype, {\n  id: {\n    enumerable: true,\n    get: function () {\n      return this[0];\n    },\n  }\n})","_ = require \"lodash\"\n{ Finder, State, Query, Format, PureObject, step } = require \"./mem.coffee\"\nDatum = require './datum.coffee'\n\neach_by_id = ({ from }, process)->\n  switch from?.constructor\n    when Array\n      for item in from\n        process item.id || item\n  return\n\neach = ({ from }, process)->\n  switch from?.constructor\n    when Array\n      for item in from\n        process item\n    when Object\n      for id, item of from\n        item._id = id\n        process item\n  return\n\nvalidate = (item, meta, chklist)->\n  return false unless item and chklist\n  for chk in chklist when ! chk item, meta\n    return false\n  true\n\n\nmodule.exports = class Finder\n  constructor: (@$name)->\n    State.notify @$name.list\n\n  join: ({ @all, @map, @list, @model })->\n\n  calculate: (query, memory)->\n    return unless query._step < State.step[@$name.list]\n    base = State.base @$name.list\n    delete query._reduce\n    query._step = step()\n    ctx =\n      map: @map\n      query: query\n      memory: memory\n      cache: _.cloneDeep base.$format\n      paths:\n        _reduce:\n          list: []\n          hash: {}\n\n    switch\n      when query._all_ids\n        ids = query._all_ids\n        if query._is_uniq\n          ids = _.uniq ids\n        @reduce ctx, ids\n\n      when query == query.all\n        @reduce ctx, Object.keys memory\n\n      else\n        if query._is_uniq\n          ids = []\n          for partition in query.$partition\n            tgt = _.get query.all, \"reduce.#{partition}\"\n            ids = _.union ids, tgt\n          @reduce ctx, ids\n        else\n          for partition in query.$partition\n            tgt = _.get query.all, \"reduce.#{partition}\"\n            @reduce ctx, tgt\n\n    @finish ctx\n    return\n\n  reduce: ({ map, cache, paths, query, memory }, ids)->\n    return unless ids\n    for id in ids when o = memory[id]\n      { meta, item, $group } = o\n      continue unless validate item, meta, query._filters\n      for [path, a] in $group\n        o = paths[path] = cache[path]\n        map.reduce query, path, item, o, a\n\n  finish: ({ map, cache, paths, query })->\n    for path, o of paths\n      map.finish query, path, o, @list\n      _.set query, path, o\n\n    for path, cmd of query.$sort when from = _.get(query, path)\n      sorted = map.order     query, path, from,   from, cmd, @list\n      dashed = map.dash      query, path, sorted, from, cmd, @list\n      result = map.post_proc query, path, dashed, from, cmd, @list\n      @list.bless result, query\n      result.from = from\n      _.set query, path, result\n\n  data_set: (type, from, parent)->\n    meta    = State.meta()\n    base    = State.base    @$name.list\n    journal = State.journal @$name.list\n    { deploys } = @$name\n\n    @[type] { base, journal, meta,  @model, @all, deploys, from, parent }\n\n  data_emitter: ({ base, journal }, { item, $group })->\n    throw new Error \"bad context.\" unless base.$format\n    order = (keys..., cmd)=>\n      path = [\"_reduce\", keys...].join('.')\n      base.$sort[path] = cmd\n      journal.$sort[path] = cmd\n\n    reduce = (keys..., cmd)=>\n      cmd = reduce.default keys, cmd\n      path = [\"_reduce\", keys...].join('.')\n      $group.push [path, cmd]\n      map   = base.$format[path] ?= {}\n      map_j = journal.$format[path] ?= {}\n      @map.init map,   cmd\n      @map.init map_j, cmd\n\n    reduce.default = reduce.default_origin = (keys, cmd)->\n      return cmd if keys.length\n      reduce.default = (keys, cmd)-> cmd\n\n      bare =\n        set: item.id\n        list: true\n      Object.assign bare, cmd\n\n    { reduce, order }\n\n  data_init: ({ model, parent, deploys }, { item }, { reduce, order })->\n    model.bless item\n    parent && _.merge item, parent\n    model.deploy.call item, model\n    for deploy in deploys\n      deploy.call item, model, reduce, order\n\n  data_entry: ({ model }, { item }, { reduce, order })->\n    model.map_partition item, reduce\n    model.map_reduce    item, reduce\n    if reduce.default == reduce.default_origin\n      reduce {}\n    model.order item, order\n\n  reset: (ctx)->\n    ctx.journal.$memory = PureObject()\n    ctx.base.$memory = ctx.all.$memory = news = PureObject()\n\n    @merge ctx\n\n    for key, old of ctx.base.$memory\n      item = news[key]\n      unless item?\n        ctx.model.delete old\n    true\n\n  merge: (ctx)->\n    is_hit = false\n    each ctx, (item)=>\n      old = ctx.base.$memory[item.id]\n      o = new Datum ctx.meta, item\n      emit = @data_emitter ctx, o\n      @data_init ctx, o, emit\n      @data_entry ctx, o, emit\n\n      unless id = item.id\n        throw new Error \"detect bad data: #{ JSON.stringify item }\"\n      ctx.journal.$memory[id] = o\n      ctx.base.$memory[id] = o\n\n      if old?\n        ctx.model.update item, old.item\n      else\n        ctx.model.create item\n      is_hit = true\n    is_hit\n\n  remove: (ctx)->\n    is_hit = false\n    each_by_id ctx, (id)=>\n      old = ctx.base.$memory[id]\n      if old?\n        ctx.model.delete old.item\n        delete ctx.journal.$memory[id]\n        delete ctx.base.$memory[id]\n        is_hit = true\n    is_hit\n\n  update: (ctx, parent)->\n    is_hit = false\n    each_by_id ctx, (id)=>\n      return unless old = ctx.base.$memory[id]\n      _.merge old.item, parent\n      old.$group = []\n      emit = @data_emitter ctx, o\n      @data_entry ctx, old, emit\n\n      ctx.model.update old.item, old.item\n      is_hit = true\n    is_hit\n      \n"],"sourceRoot":""}