{"version":3,"sources":["webpack://Mem/webpack/universalModuleDefinition","webpack://Mem/webpack/bootstrap","webpack://Mem/external \"lodash\"","webpack://Mem/./src/mem.coffee","webpack://Mem/./src/query.coffee","webpack://Mem/./src/index.coffee","webpack://Mem/./src/datum.coffee","webpack://Mem/./src/base.coffee","webpack://Mem/./src/rule.coffee","webpack://Mem/./src/set.coffee","webpack://Mem/./src/map.coffee","webpack://Mem/./src/list.coffee","webpack://Mem/./src/model.coffee","webpack://Mem/./src/finder.coffee"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","$step","Datum","Finder","META","Map","Name","OBJ","Query","Set","State","cache","merge","set_depend","set_deploy","step","meta","pack","transaction","cb","$journal","journal","type","list","base1","$sort","$memory","$format","base","$base","store","model","ref","bless","clear_cache","deploys","push","depends","results","val","append","_","query_parser","set_for","len","set","length","req","this","_filters","concat","constructor","Function","Array","String","console","log","[object Object]","_all_ids","_group","$partition","all","tap","_step","_copy","_all_ids1","_group1","_filters1","$sort1","$partition1","$page_by","q","target","path","add","f","ref1","RegExp","test","Boolean","Number","indexOf","Error","ary","text","item","regexp","split","replace","join","where","search_words","sort","Math","random","order","isEqual","cloneDeep","page_by","ids","oo","find","id","form","__proto__","hash","pluck","arguments","defineProperties","reduce","_finder","calculate","_reduce","memory","keys","Mem","Rule","Base","meta1","$group","List","Model","rename","snakeCase","$name","map","build","depend_on","map_property","model_property","_id","form_property","changes","$model","isChanged","list_property","first","head","tail","last","uniq","at","set_property","schema","_set","finder","parent","use_cache","assign","scope","default_scope","shuffle","ik","else_id","cmd","qk","a","j","k","len1","args","name1","pk","belongs_to","deploy","idx","subids","slice","siblings","to","option","miss","relation_to_one","reverse","relation_to_many","fk","relation_tree","leaf","not_leaf","cost","directed","relation_graph","f_clear","f_common","f_item","f_update","update","clear_cach","reset","reject","del","remove","updates","refresh","rehash","splice","$deploy_reduce","$deploy_sort","emit_default","emit_default_origin","emit_group","map_j","init","emit","map_partition","map_reduce","count","query","from","___","counts","cover","len2","per","remain","orderBy","group_by","groupBy","page","page_idx","len3","includes","index","pow","avg","min","max","range","density","max_is","min_is","values","floor","in","JSON","stringify","old","Format","each","each_by_id","validate","process","chklist","partition","paths","finish_order","results1","finish","news","delete","$deploy","hit"],"mappings":"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","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mem\"] = factory();\n\telse\n\t\troot[\"Mem\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"lodash\");","_ = require 'lodash'\n\nDatum = require './datum.coffee'\n\nSet = {}\nMap = {}\nName = {}\nQuery = {}\nFinder = {}\n\nOBJ = ->\n  new Object null\n\nMETA = (meta = OBJ())->\n  meta.pack ?= OBJ()\n  meta\n\n$step = 0\nstep = -> ++$step\n\ncache = (type)-> ({ list })->\n  State[type].pack[list] ?=\n    $sort:   OBJ()\n    $memory: OBJ()\n    $format:  OBJ()\n\nState =\n  transaction: (cb, meta)->\n    State.$journal = pack = META meta\n    cb meta\n    State.$journal = META()\n    pack\n\n  journal: cache '$journal'\n  base:    cache '$base'\n  meta: -> State.$journal\n  step:     OBJ()\n  $journal: META()\n  $base:    META()\n\n  store: (meta)->\n    for list, { $sort, $memory, $format } of meta.pack\n      { model } = Finder[list]\n      base = State.base { list }\n      journal = State.journal { list }\n\n      for key, o of $sort\n        base.$sort[key] = o\n        journal.$sort[key] = o\n\n      for key, o of $format\n        base.$format[key] = o\n        journal.$format[key] = o\n\n      for key, o of $memory\n        Datum.bless o, meta, model\n        base.$memory[key] = o\n        journal.$memory[key] = o\n\n      Finder[list].clear_cache()\n\n    true\n\nset_deploy = (key, cb)-> Name[key].deploys.push cb\nset_depend = (key, cb)-> Name[key].depends.push cb\nmerge = (o)->\n  for key, val of o\n    switch\n      when Query[key]?\n        key = Name[key].base\n        Set[key].merge val\n      when Set[key]?\n        Set[key].append val\n\nmodule.exports = { Set, Map, Name, State, Finder, Query, set_deploy, set_depend, merge, step }\n","_ = require \"lodash\"\n\n\nset_for = (list)->\n  set = new Object null\n  for key in list\n    set[key] = true\n  set\n\nquery_parser = (base, req, cb)->\n  return base unless req\n\n  new Query base, ->\n    @_filters = base._filters.concat()\n    switch req && req.constructor\n      when Object\n        for key, val of req\n          cb @, key, val, _.property key\n\n      when Function, Array, String\n        cb @, null, req, (o)-> o\n      else\n        console.log { req }\n        #throw Error 'unimplemented'\n\n\nmodule.exports = class Query\n  @build: ({ $sort, $memory })->\n    _all_ids = _group = null\n    _filters = []\n    $partition = [\"set\"]\n    new Query { _all_ids, _group, _filters, $sort, $partition }, ->\n      @all = @\n      @$memory = $memory\n\n  constructor: (base, tap)->\n    @_step = 0\n    @_copy base\n    tap.call @\n\n  _copy: ({ @all, @_all_ids, @_group, @_filters, @$sort, @$partition, @$page_by })->\n\n  in: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Array\n          set = set_for req\n          add (o)->\n            for key in path o\n              return true if set[key]\n            false\n        when RegExp\n          add (o)->\n            for val in path o\n              return true if req.test val\n            false\n        when null, 0, \"\", Boolean, String, Number\n          add (o)->\n            -1 < path(o)?.indexOf req\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  partition: (...ary)->\n    new Query @, ->\n      @$partition = ary\n\n  where: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Function\n          add req\n        when Array\n          if \"_id\" == target\n            q._all_ids = req\n          else\n            set = set_for req\n            add (o)-> set[ path o ]\n        when RegExp\n          add (o)-> req.test path o\n        when null, 0, \"\", Boolean, String, Number\n          if \"_id\" == target\n            q._all_ids = [req]\n          else\n            add (o)-> req == path o\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  search: (text)->\n    return @ unless text\n    list =\n      for item in text.split(/\\s+/)\n        item = item.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n        continue unless item.length\n        \"(#{item})\"\n    return @ unless list.length\n    regexp = (new RegExp list.join(\"|\"), \"ig\")\n    @where (o)->\n      s = o.q.search_words\n      (!s) || regexp.test s\n\n  shuffle: ->\n    @sort Math.random\n\n  order: (order)->\n    return @ if _.isEqual order, @$sort['_reduce.list']\n    new Query @, ->\n      @$sort = _.cloneDeep @$sort\n      @$sort['_reduce.list'] = order\n\n  sort: (sort...)->\n    @order { sort }\n  \n  page: (page_by)->\n    new Query @, ->\n      @$page_by = page_by\n\n  form: (ids...)->\n    oo = @find ...ids\n    if oo\n      o = @all.$memory[oo.id].form ?= {}\n      o.__proto__ = oo\n      o\n    else\n      oo\n\n  find: (...ids)->\n    for id in ids when o = @hash[id]\n      return o\n    null\n\n  finds: (ids)->\n    for id in ids when o = @hash[id]\n      o\n\n  pluck: -> @list.pluck arguments...\n\n  Object.defineProperties @::,\n    reduce:\n      get: ->\n        @all._finder.calculate @, @all.$memory\n        @_reduce\n\n    list:\n      get: ->\n        @reduce.list\n\n    hash:\n      get: ->\n        @reduce.hash\n\n    memory:\n      get: ->\n        @all.$memory\n\n    ids:\n      get: ->\n        Object.keys @hash\n","module.exports = Mem = require \"./mem.coffee\"\nMem.Rule = require \"./rule.coffee\"\nMem.Base = require \"./base.coffee\"\n","module.exports = class Datum\n  @bless: (o, meta, model)->\n    model.bless o.item\n    o.meta = meta\n\n  constructor: (@meta, @item)->\n    @$group = []\n\n  toJSON: (key)->\n    { @item, @$group }\n","\nmodule.exports =\n  Query:  require \"./query.coffee\"\n  Set:    require \"./set.coffee\"\n  Map:    require \"./map.coffee\"\n  List:   require \"./list.coffee\"\n  Model:  require \"./model.coffee\"\n  Finder: require \"./finder.coffee\"\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\n{ Finder, Query, Model, List, Set, Map } = require \"./base.coffee\"\n\nrename = (base)->\n  base = _.snakeCase(base).replace /s$/, \"\"\n  name = Mem.Name[base]\n  return name if name\n\n  id =   \"#{base}_id\"\n  ids =  \"#{base}_ids\"\n  list = \"#{base}s\"\n  deploys = []\n  depends = []\n  Mem.Name[list] = Mem.Name[base] = { id, ids, list, base, deploys, depends }\n\nmodule.exports = class Rule\n  constructor: (base, cb)->\n    @$name = rename base\n    @model = Model\n    @list  = List\n    @set   = Set\n    @map   = Map\n\n    @all = Query.build Mem.State.base @$name\n    @all.cache = {}\n    @all._finder = new Finder @$name\n\n    @depend_on base\n\n    @map_property = {}\n\n    { base } = @$name\n    @model_property =\n      id:\n        enumerable: true\n        get: -> @_id\n      [@$name.id]:\n        enumerable: true\n        get: -> @_id\n\n    @form_property =\n      changes:\n        enumerable: true\n        value: (key)->\n          if _.isEqual @[key], @find[key]\n            null\n          else\n            @$model[key]\n      isChanged:\n        enumerable: true\n        get: ->\n          keys = Object.keys @\n          for key in keys\n            return true unless _.isEqual @[key], @$model[key]\n          return false\n\n    @list_property =\n      first:\n        enumerable: false\n        get: -> @[0]\n      head:\n        enumerable: false\n        get: -> @[0]\n      tail:\n        enumerable: false\n        get: -> @[@length - 1]\n      last:\n        enumerable: false\n        get: -> @[@length - 1]\n\n      uniq:\n        enumerable: false\n        get: ->\n          @constructor.bless _.uniq @\n\n      pluck:\n        enumerable: false\n        value: (keys...)->\n          cb =\n            switch keys.length\n              when 0\n                -> null\n              when 1\n                _.property keys[0]\n              else\n                (o)-> _.at(o, keys...)\n          @constructor.bless @map cb\n\n    @set_property = {}\n\n    @schema cb if cb\n    return\n\n  schema: (cb)->\n    cb.call @\n    if @model == Model\n      class @model extends @model\n    Object.defineProperties @model::, @model_property\n\n    if @list == List\n      class @list extends @list\n    Object.defineProperties @list::, @list_property\n\n    if @set == Set\n      class @set extends @set\n    Object.defineProperties @set::, @set_property\n\n    if @map == Map\n      class @map extends @map\n    Object.defineProperties @map::, @map_property\n\n    @model.$name = @list.$name = @set.$name = @map.$name = @$name\n\n    Mem.Query[@$name.list] = @all\n\n    Mem.Set[@$name.base] = _set = new @set\n    _set.all = @all\n    _set.$name = @$name\n    list = @list.bless [], @all\n\n    Mem.Finder[@$name.list] = finder = @all._finder\n    finder.set = @set\n    finder.map = @map\n    finder.list = @list\n    finder.model = @model\n    finder.$format = Mem.State.base(@$name).$format\n    @\n\n  key_by: (keys)->\n    cb =\n      switch keys?.constructor\n        when undefined\n          -> @_id\n        when Function\n          keys\n        when String, Array\n          _.property keys\n        else\n          throw Error \"unimplemented #{keys}\"\n\n    @model_property.id =\n      enumerable: true\n      get: cb\n\n  deploy: (cb)->\n    Mem.set_deploy @$name.base, cb\n\n  depend_on: (parent)->\n    { _finder } = @all\n    Mem.set_depend parent, ->\n      _finder.clear_cache()\n\n  scope: (cb)->\n    for key, val of cb @all\n      @use_cache key, val\n\n\n  property: (type, o)->\n    Object.assign @[\"#{type}_property\"], o\n\n\n  default_scope: (scope)->\n    @all._copy scope @all\n    base = Mem.State.base(@$name)\n    base.$sort = @all.$sort\n\n  shuffle: ->\n    @default_scope (all)-> all.shuffle()\n\n  order: (sort...)->\n    @default_scope (all)-> all.sort sort...\n\n  \n\n  relation_to_one: (key, target, ik, else_id)->\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        id = _.get @, ik\n        Mem.Query[target].find id, else_id\n\n  relation_to_many: (key, target, cmd, ik, qk)->\n    all = @all\n    @use_cache key, (id)->\n      Mem.Query[target][cmd] \"#{qk}\": id\n\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        all[key](@[ik])\n\n  relation_tree: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      if n\n        q = all.where \"#{ik}\": id\n        all[key] q.ids, n - 1\n      else\n        all.where { id }\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  relation_graph: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      q = all.where { id }\n      if n\n        ids = []\n        for a in q.pluck(ik) when a?\n          for k in a when k?\n            ids.push k\n\n        all[key] _.uniq(ids), n - 1\n      else\n        q\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  use_cache: (key, val)->\n    switch val?.constructor\n      when Function\n        @all[key] = (args...)=>\n          @all.cache[\"#{key}:#{JSON.stringify args}\"] ?= val args...\n      else\n        @all[key] = val\n\n  path: (keys...)->\n    for key in keys\n      @belongs_to key\n    @deploy ->\n      subids = @id.split(\"-\")\n      @idx = subids[keys.length]\n      for key, idx in keys\n        @[\"#{key}_id\"] = subids[0..idx].join '-'\n\n    { all } = @\n    pk = keys[-1..][0] + \"_id\"\n    @model_property.siblings =\n      get: ->\n        q = {}\n        q[pk] = @[pk]\n        all.where q\n\n  belongs_to: (to, option = {})->\n    name = rename to\n    { key = name.id, target = name.list, miss } = option\n    @relation_to_one name.base, target, key, miss\n\n  habtm: (to, option = {})->\n    name = rename to\n    if option.reverse\n      { key = @$name.ids, target = to } = option\n      @relation_to_many name.list, target, \"in\", \"id\", key\n    else\n      { key = name.ids, target = name.list } = option\n      @relation_to_many name.list, target, \"where\", key, \"id\"\n\n  has_many: (to, option = {})->\n    name = rename to\n    { key = @$name.id, target = name.list } = option\n    @relation_to_many name.list, target, \"where\", \"id\", key\n\n  tree: (option = {})->\n    fk = @$name.id\n    @relation_tree \"nodes\", fk\n    @belongs_to @$name.base, option\n\n    Object.defineProperties @all,\n      leaf:\n        get: ->\n          not_leaf = _.uniq @pluck fk\n          @where (o)-> o.id not in not_leaf\n\n  graph: (option = {})->\n    { directed, cost } = option\n    ik = @$name.ids\n    @relation_to_many @$name.list, @$name.list, \"where\", ik, \"id\"\n    @relation_graph \"path\", ik\n    unless directed\n      true # todo\n","_ = require \"lodash\"\n{ State } = require \"./index.coffee\"\nQuery = require \"./query.coffee\"\n\nf_common = (type)-> (list, parent)->\n  meta = State.meta()\n  journal = State.journal @$name\n  @all._finder[type] meta, journal, @all, list, parent\n\nf_update = (list, parent)->\n  meta = State.meta()\n  journal = State.journal @$name\n  if parent?\n    @all._finder.update meta, journal, @all, list, parent\n\nf_item = (cb)->\n  (item, parent)->\n    if item?\n      cb.call @, [item], parent\n\nf_clear = ->\n  @all._finder.clear_cach @all\n\n\nmodule.exports = class Set\n  set:           f_common \"reset\"\n  reset:         f_common \"reset\"\n\n  merge:         f_common \"merge\"\n  add:    f_item f_common \"merge\"\n  append: f_item f_common \"merge\"\n\n  reject:        f_common \"remove\"\n  del:    f_item f_common \"remove\"\n  remove: f_item f_common \"remove\"\n  updates:       f_update\n  update: f_item f_update\n\n  clear_cache:   f_clear\n  refresh:       f_clear\n  rehash:        f_clear\n\n  find: (...ids)->\n    journal = State.journal @$name\n    for id in ids when o = @all.$memory[id]\n      journal.$memory[id] = o\n      return o.item\n    null\n","_ = require \"lodash\"\n{ State, Query } = require \"./mem.coffee\"\nDatum = require './datum.coffee'\n\nmodule.exports = class Map\n  @bless: (o)->\n    o.__proto__ = @::\n    o\n\n  @$deploy: (model, $format, $sort, meta, journal, item)->\n    o = new Datum( meta, item )\n\n    @$deploy_reduce model, item, $format, journal, o\n    @$deploy_sort   model, item, $sort,   journal\n    o\n\n  @$deploy_reduce: (model, item, $format, journal, o)->\n    emit_default = emit_default_origin = (keys, cmd)->\n      return cmd if keys.length\n      emit_default = (keys, cmd)-> cmd\n\n      base =\n        set: item.id\n        list: true\n      Object.assign base, cmd\n\n    emit = (target)=> (keys..., cmd)=>\n      cmd = emit_default keys, cmd\n      path = [\"_reduce\", keys...].join('.')\n      target.push [path, cmd]\n      map   = $format[path] ?= {}\n      map_j = journal.$format[path] ?= {}\n      @init map,   cmd\n      @init map_j, cmd\n\n    emit_group = emit o.$group\n    model.map_partition item, emit_group\n    model.map_reduce    item, emit_group\n\n    if emit_default == emit_default_origin\n      emit_group {}\n\n  @$deploy_sort: (model, item, $sort, journal)->\n    emit = (keys..., cmd)->\n      path = [\"_reduce\", keys...].join('.')\n      $sort[path] = cmd\n      journal.$sort[path] = cmd\n    emit \"list\", {}\n    model.order item, emit\n\n  @init: (o, map)->\n    if map.id\n      o.id = map.id\n    if map.list\n      o.list = []\n    if map.count\n      o.count = 0\n    if map.all\n      o.all = 0\n    if map.set\n      o.hash = {}\n\n  @order: (query, path, from, map, list, bless)->\n    o = from\n    if Object == from.constructor\n      if map.belongs_to\n        for id, val of from\n          val.__proto__ = Query[map.belongs_to].find id\n      else\n        for id, val of from\n          val.id = id\n\n    else\n      if map.belongs_to\n        for val in from\n          val.__proto__ = Query[map.belongs_to].find val.id\n\n    if map.cover\n      remain = []\n      cover  = []\n      for id in map.cover\n        if from[id]\n          cover.push id\n        else\n          remain.push id\n      o.remain = remain\n      o.cover  = cover\n\n    if map.sort\n      o = _.orderBy o, map.sort...\n    \n    if map.pluck\n      o = for oo in o when val = _.get oo, map.pluck\n        val\n\n    if key = map.group_by\n      from = o\n      o = _.groupBy o, (oo)-> _.get oo, key\n      for idx, a of o when a\n        bless a\n\n    if map.page && per = query.$page_by\n      from = o\n      o = []\n      o.all = from.length\n      for oo, idx in from\n        unless idx % per\n          o.push c = []\n          bless c\n        c.push oo\n      o.page_idx = (item)->\n        for a, page_idx in @ when a.includes item\n          return page_idx\n        null\n\n    if key = map.index\n      for ___, oo of o\n        is_ary = 'number' == typeof _.get oo, key\n        counts =\n          if is_ary\n            []\n          else\n            {}\n        break\n      \n      for ___, oo of o\n        idx = _.get oo, key\n        unless counts[idx]\n          a = []\n          bless a\n          counts[idx] = a\n        counts[idx].push oo\n      o = counts\n\n    bless o\n    o\n\n  @finish: (query, path, o, list)->\n    if o.hash\n      o.set = Object.keys o.hash\n    if o.count && o.pow?\n      o.avg = o.all ** (1 / o.count)\n    if o.count && o.all?\n      o.avg = o.all * (1 / o.count)\n    if o.min? && o.max?\n      o.range = o.max - o.min\n      if o.all\n        o.density = o.all / o.range\n\n  @reduce: (query, path, item, o, map)->\n    if map.count\n      o.count += map.count\n    if map.all\n      o.all += map.all\n    if map.pow\n      o.pow *= map.pow\n\n    if map.list\n      o.list.push item\n\n    if map.set\n      o.hash[map.set] = item\n\n    if map.max\n      unless map.max <= o.max\n        o.max_is = item\n        o.max = map.max\n    if map.min\n      unless o.min <= map.min\n        o.min_is = item\n        o.min = map.min\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nmodule.exports = class List extends Array\n  @bless: (list, query)->\n    list.__proto__ = @::\n    list.query = query\n    list\n\n  sort: (sort...)->\n    o = _.orderBy @, sort...\n    o.__proto__ = @__proto__\n    o\n\n  group_by: (cb)->\n    o = _.groupBy @, cb\n    for key, oo of o\n      oo.__proto__ = @__proto__\n    o\n\n  page_by: (per)->\n    idx = 0\n    Object.values @group_by (o)->\n      Math.floor(idx++ / per)\n\n  where: (req)-> @query.where req\n  in:    (req)-> @query.in    req\n","_ = require \"lodash\"\n\n\nmodule.exports = class Model\n  @bless: (o)->\n    o.__proto__ = @::\n    o\n\n  @$deploy: (item, parent)->\n    @bless item\n    if parent\n      _.merge item, parent\n    for deploy in @$name.deploys\n      deploy.call item, @\n    unless item.id\n      throw new Error \"detect bad data: #{JSON.stringify item}\"\n\n  @update: (item, old)->\n  @create: (item)->\n  @delete: (old)->\n\n  @map_partition:  (item, emit)->\n    undefined\n\n  @map_reduce: (item, emit)->\n    undefined\n\n  @order: (reduce, emit)->\n    undefined\n","_ = require \"lodash\"\n{ State, Query, Format, step } = require \"./mem.coffee\"\n\neach_by_id = ({ list, depends }, from, process)->\n  f() for f in depends\n  switch from?.constructor\n    when Array\n      for item in from\n        process item.id || item\n  return\n\neach = ({ list, depends }, from, process)->\n  f() for f in depends\n  switch from?.constructor\n    when Array\n      for item in from\n        process item\n    when Object\n      for id, item of from\n        item._id = id\n        process item\n  return\n\nvalidate = (item, meta, chklist)->\n  return false unless item and chklist\n  for chk in chklist when ! chk item, meta\n    return false\n  true\n\n\nmodule.exports = class Finder\n  constructor: (@$name)->\n    State.step[@$name.list] = step()\n\n  calculate: (query, memory)->\n    return unless query._step < State.step[@$name.list]\n\n    delete query._reduce\n    query._step = step()\n\n    cache = _.cloneDeep @$format\n    paths =\n      _reduce:\n        list: []\n        hash: {}\n\n    if query._all_ids\n      @reduce @map, cache, paths, query, memory, query._all_ids\n    else\n      if query == query.all\n        @reduce @map, cache, paths, query, memory, Object.keys memory\n      else\n        for partition in query.$partition\n          @reduce @map, cache, paths, query, memory, _.get query.all, \"reduce.#{partition}\"\n\n    @finish_order @map, cache, paths, query\n    return\n\n  reduce: (map, cache, paths, query, memory, ids)->\n    return unless ids\n    for id in ids when o = memory[id]\n      { meta, item, $group } = o\n      continue unless validate item, meta, query._filters\n      for [path, a] in $group\n        o = paths[path] = cache[path]\n        map.reduce query, path, item, o, a\n\n  finish_order: (map, cache, paths, query)->\n    for path, o of paths\n      map.finish query, path, o, @list\n      _.set query, path, o\n\n    for path, cmd of query.$sort when o = from = _.get(query, path)\n      o = map.order query, path, o, cmd, @list, (target)=>\n        @list.bless target, query\n      o.from = from\n      _.set query, path, o\n\n  clear_cache: (all = null)->\n    State.step[@$name.list] = step()\n    if all\n      for id, { item } of all.$memory\n        @map.$deploy_sort @model, item, all\n    return\n\n  reset: (meta, journal, all, from, parent)->\n    { $memory } = all\n    journal.$memory = new Object null\n    State.base(@$name).$memory = all.$memory = news = new Object null\n    @merge meta, journal, all, from, parent\n\n    for key, old of $memory\n      item = news[key]\n      unless item?\n        @model.delete old\n\n  merge: (meta, journal, all, from, parent)->\n    { $memory } = all\n    each @$name, from, (item)=>\n      old = $memory[item.id]\n      @model.$deploy item, parent\n      o = @map.$deploy @model, @$format, all.$sort, meta, journal, item\n      journal.$memory[item.id] = o\n      $memory[item.id] = o\n      if old?\n        @model.update item, old.item\n      else\n        @model.create item\n    @clear_cache()\n\n  remove: (meta, journal, all, ids)->\n    { $memory } = all\n    hit = false\n    each_by_id @$name, ids, (id)=>\n      old = $memory[id]\n      if old?\n        @model.delete old.item\n        delete journal.$memory[id]\n        delete $memory[id]\n        hit = true\n    if hit?\n      @clear_cache()\n\n  update: (meta, journal, all, ids, parent)->\n    { $memory } = all\n    each_by_id @$name, ids, (id)=>\n      return unless old = $memory[id]\n      _.merge old.item, parent\n      o = @map.$deploy @model, @$format, all.$sort, meta, journal, old.item\n      journal.$memory[id] = o\n      $memory[id] = o\n\n      @model.update old.item, old.item\n    @clear_cache()\n      \n"],"sourceRoot":""}