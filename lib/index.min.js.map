{"version":3,"sources":["webpack://Mem/webpack/universalModuleDefinition","webpack://Mem/webpack/bootstrap","webpack://Mem/external \"lodash\"","webpack://Mem/./src/mem.coffee","webpack://Mem/./src/query.coffee","webpack://Mem/./src/datum.coffee","webpack://Mem/./src/base.coffee","webpack://Mem/./src/index.coffee","webpack://Mem/./src/rule.coffee","webpack://Mem/./src/set.coffee","webpack://Mem/./src/map.coffee","webpack://Mem/./src/list.coffee","webpack://Mem/./src/model.coffee","webpack://Mem/./src/finder.coffee"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","$react_listeners","$step","Datum","Finder","META","Map","Metadata","Name","PureObject","Query","Set","State","_","cache","merge","step","[object Object]","Reflect","setPrototypeOf","this","pack","JSON","stringify","val","$group","item","meta","bless","transaction","cb","$journal","journal","type","list","oo","$sort","$memory","$format","base","$base","store","finder","model","ref","clear_cache","console","error","mixin","data","join","react","push","bye","filter","notify","length","notify_for_react","debounce","changed","e","len","results","state","slice","setState","append","query_parser","set_for","splice","set","req","_filters","concat","constructor","Function","Array","String","log","_all_ids","_group","$partition","all","tap","_step","_copy","_all_ids1","_group1","_filters1","$sort1","$partition1","$page_by","q","target","path","add","f","ref1","RegExp","test","Boolean","Number","indexOf","Error","ary","text","regexp","split","replace","where","search_words","sort","Math","random","keys","order","isEqual","cloneDeep","page_by","ids","base1","find","id","form","hash","pluck","arguments","defineProperties","reduce","_finder","calculate","_reduce","memory","meta1","List","Model","Mem","Rule","Base","rename","snakeCase","deploys","depends","$name","map","build","_cache","depend_on","map_property","model_property","_id","form_property","changes","$model","isChanged","list_property","first","head","tail","last","uniq","at","set_property","schema","deploy","parent","use_cache","assign","scope","default_scope","shuffle","ik","else_id","cmd","qk","a","j","k","len1","args","name1","pk","belongs_to","idx","subids","siblings","to","option","miss","relation_to_one","reverse","relation_to_many","fk","relation_tree","leaf","not_leaf","cost","directed","relation_graph","f_clear","f_common","f_item","f_update","update","clear_cach","reset","reject","del","remove","updates","refresh","rehash","Dash","_diff","writable","diff","b","datum","$deploy_reduce","$deploy_sort","emit_default","emit_default_origin","emit_group","map_j","init","emit","map_partition","map_reduce","count","query","pow","max","max_is","min","min_is","avg","range","density","from","___","counts","orderBy","index","cover","per","remain","page","page_idx","len2","includes","super","getPrototypeOf","groupBy","values","group_by","floor","in","old","Format","each","each_by_id","validate","process","chklist","map1","list1","partition","paths","finish","results1","dashed","result","sorted","dash","post_proc","hit","news","delete","$deploy"],"mappings":"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","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mem\"] = factory();\n\telse\n\t\troot[\"Mem\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"lodash\");","_ = require 'lodash'\n\nDatum = require './datum.coffee'\n\nSet = {}\nMap = {}\nName = {}\nQuery = {}\nFinder = {}\n\n$react_listeners = []\n$step = 0\n\nPureObject = ->\n  Object.create null\n\nclass Metadata\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o.pack ?= PureObject()\n    o\n\n  json: ->\n    JSON.stringify @, (key, val)=>\n      if ( val && val.meta && val.item && val.$group && val.meta == @ )\n        { item, $group } = val\n        { item, $group }\n      else\n        val\n\nMETA = (meta = {})->\n  Metadata.bless meta\n  meta\n\nstep = -> ++$step\n\ncache = (type)-> (list)->\n  o = State[type].pack\n  if o[list]\n    o[list]\n  else\n    oo = o[list] = PureObject()\n    oo.$sort   = PureObject()\n    oo.$memory = PureObject()\n    oo.$format = PureObject()\n    oo\n\n\nState =\n  transaction: (cb, meta)->\n    @$journal = pack = META meta\n    cb meta\n    @$journal = META()\n    pack\n\n  journal: cache '$journal'\n  base:    cache '$base'\n  meta: -> @$journal\n  step:     PureObject()\n  $journal: META()\n  $base:    META()\n\n  store: (meta)->\n    return false unless meta?.pack\n    for list, { $sort, $memory, $format } of meta.pack\n      finder = Finder[list]\n      unless finder\n        console.error \"not found Finder and Query\", list, meta.pack\n        continue\n      { model } = finder\n      base = @base list\n      journal = @journal list\n\n      for key, o of $sort\n        base.$sort[key] = o\n        journal.$sort[key] = o\n\n      for key, o of $format\n        base.$format[key] = o\n        journal.$format[key] = o\n\n      for key, o of $memory\n        Datum.bless o, meta, model\n        base.$memory[key] = o\n        journal.$memory[key] = o\n\n      finder.clear_cache()\n    true\n\n  mixin:\n    data: ->\n      $step: State.step\n\n  join: ({react})->\n    if react\n      $react_listeners.push react\n    return\n\n  bye: ({react})->\n    if react\n      $react_listeners = $react_listeners.filter (o)-> o != react\n    return\n\n  notify: ( list )->\n    @step[list] = val = step()\n    if $react_listeners.length\n      @notify_for_react()\n  \n  notify_for_react: _.debounce ->\n    for o in $react_listeners\n      e = {}\n      changed = false\n      for key, val of o.state \n        continue unless \"step_\" == key[0..4]\n        list = key[5..]\n        val = @step[list]\n        if o.state[key] < val\n          e[key] = val\n          changed = true\n      if changed\n        o.setState e\n  , 1\n\nmerge = (o)->\n  for key, val of o\n    switch\n      when Query[key]?\n        key = Name[key].base\n        Set[key].merge val\n      when Set[key]?\n        Set[key].append val\n\nmodule.exports = { Set, Map, Name, State, Finder, Query, PureObject, merge, step }\n","_ = require \"lodash\"\n\n\nset_for = (list)->\n  set = {}\n  Reflect.setPrototypeOf set, null\n  for key in list\n    set[key] = true\n  set\n\nquery_parser = (base, req, cb)->\n  return base unless req\n\n  new Query base, ->\n    @_filters = base._filters.concat()\n    switch req && req.constructor\n      when Object\n        for key, val of req\n          cb @, key, val, _.property key\n\n      when Function, Array, String\n        cb @, null, req, (o)-> o\n      else\n        console.log { req }\n        #throw Error 'unimplemented'\n\n\nmodule.exports = class Query\n  @build: ({ $sort, $memory })->\n    _all_ids = _group = null\n    _filters = []\n    $partition = [\"set\"]\n    new Query { _all_ids, _group, _filters, $sort, $partition }, ->\n      @all = @\n      @$memory = $memory\n\n  constructor: (base, tap)->\n    @_step = 0\n    @_copy base\n    tap.call @\n\n  _copy: ({ @all, @_all_ids, @_group, @_filters, @$sort, @$partition, @$page_by })->\n\n  in: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Array\n          set = set_for req\n          add (o)->\n            for key in path o\n              return true if set[key]\n            false\n        when RegExp\n          add (o)->\n            for val in path o\n              return true if req.test val\n            false\n        when null, 0, \"\", Boolean, String, Number\n          add (o)->\n            -1 < path(o)?.indexOf req\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  partition: (...ary)->\n    new Query @, ->\n      @$partition = ary\n\n  where: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Function\n          add req\n        when Array\n          if \"_id\" == target\n            q._all_ids = req\n          else\n            set = set_for req\n            add (o)-> set[ path o ]\n        when RegExp\n          add (o)-> req.test path o\n        when null, 0, \"\", Boolean, String, Number\n          if \"_id\" == target\n            q._all_ids = [req]\n          else\n            add (o)-> req == path o\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  search: (text)->\n    return @ unless text\n    list =\n      for item in text.split(/\\s+/)\n        item = item.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n        continue unless item.length\n        \"(#{item})\"\n    return @ unless list.length\n    regexp = (new RegExp list.join(\"|\"), \"ig\")\n    @where (o)->\n      s = o.q.search_words\n      (!s) || regexp.test s\n\n  shuffle: ->\n    @sort Math.random\n\n  order: (...keys, order)->\n    keys.push \"list\" unless keys.length\n    path = [\"_reduce\", ...keys].join('.')\n\n    return @ if _.isEqual order, @$sort[path]\n    new Query @, ->\n      @$sort = _.cloneDeep @$sort\n      @$sort[path] = order\n\n  sort: (...sort)->\n    @order { sort }\n\n  page: (page_by)->\n    new Query @, ->\n      @$page_by = page_by\n\n  form: (ids...)->\n    oo = @find ...ids\n    if oo\n      o = @all.$memory[oo.id].form ?= {}\n      Reflect.setPrototypeOf o, oo\n      o\n    else\n      oo\n\n  find: (...ids)->\n    for id in ids when o = @hash[id]\n      return o\n    null\n\n  finds: (ids)->\n    for id in ids when o = @hash[id]\n      o\n\n  pluck: -> @list.pluck arguments...\n\n  Object.defineProperties @::,\n    reduce:\n      get: ->\n        @all._finder.calculate @, @all.$memory\n        @_reduce\n\n    list:\n      get: ->\n        @reduce.list\n\n    hash:\n      get: ->\n        @reduce.hash\n\n    memory:\n      get: ->\n        @all.$memory\n\n    ids:\n      get: ->\n        Object.keys @hash\n","module.exports = class Datum\n  @bless: (o, meta, model)->\n    model.bless o.item\n    o.meta = meta\n\n  constructor: (@meta, @item)->\n    @$group = []\n\n  toJSON: (key)->\n    { @item, @$group }\n","\nmodule.exports =\n  Query:  require \"./query.coffee\"\n  Set:    require \"./set.coffee\"\n  Map:    require \"./map.coffee\"\n  List:   require \"./list.coffee\"\n  Model:  require \"./model.coffee\"\n  Finder: require \"./finder.coffee\"\n","module.exports = Mem = require \"./mem.coffee\"\nMem.Rule = require \"./rule.coffee\"\nMem.Base = require \"./base.coffee\"\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\n{ Finder, Query, Model, List, Set, Map } = require \"./base.coffee\"\n\nrename = (base)->\n  base = _.snakeCase(base).replace /s$/, \"\"\n  name = Mem.Name[base]\n  return name if name\n\n  list = \"#{base}s\"\n  Mem.Name[list] = Mem.Name[base] = o = Mem.PureObject()\n  o.base = base\n  o.list = list\n  o.id =   \"#{base}_id\"\n  o.ids =  \"#{base}_ids\"\n  o.deploys = []\n  o.depends = []\n  o\n\nmodule.exports = class Rule\n  constructor: (base, cb)->\n    @$name = rename base\n    @state = Mem.State.base @$name.list\n\n    @model = Model\n    @list  = List\n    @set   = Set\n    @map   = Map\n\n    @all = Query.build @state\n    @all.$sort[\"_reduce.list\"] = {}\n    @all._cache = {}\n    @all._finder = new Finder @$name, @state\n\n    @depend_on @$name.list\n    @map_property = {}\n\n    { base } = @$name\n    @model_property =\n      id:\n        enumerable: true\n        get: -> @_id\n      [@$name.id]:\n        enumerable: true\n        get: -> @_id\n\n    @form_property =\n      changes:\n        enumerable: true\n        value: (key)->\n          if _.isEqual @[key], @find[key]\n            null\n          else\n            @$model[key]\n      isChanged:\n        enumerable: true\n        get: ->\n          keys = Object.keys @\n          for key in keys\n            return true unless _.isEqual @[key], @$model[key]\n          return false\n\n    @list_property =\n      first:\n        enumerable: false\n        get: -> @[0]\n      head:\n        enumerable: false\n        get: -> @[0]\n      tail:\n        enumerable: false\n        get: -> @[@length - 1]\n      last:\n        enumerable: false\n        get: -> @[@length - 1]\n\n      uniq:\n        enumerable: false\n        get: ->\n          @constructor.bless _.uniq @\n\n      pluck:\n        enumerable: false\n        value: (keys...)->\n          cb =\n            switch keys.length\n              when 0\n                -> null\n              when 1\n                _.property keys[0]\n              else\n                (o)-> _.at(o, keys...)\n          @constructor.bless @map cb\n\n    @set_property = {}\n\n    @schema cb if cb\n    return\n\n  schema: (cb)->\n    cb.call @\n    if @model == Model\n      class @model extends @model\n    Object.defineProperties @model::, @model_property\n\n    if @list == List\n      class @list extends @list\n    Object.defineProperties @list::, @list_property\n\n    if @set == Set\n      class @set extends @set\n    Object.defineProperties @set::, @set_property\n\n    if @map == Map\n      class @map extends @map\n    Object.defineProperties @map::, @map_property\n\n    @model.$name = @list.$name = @set.$name = @map.$name = @$name\n\n\n    @all._finder.deploy @\n\n    Mem.Set[@$name.base] = new @set @\n    Mem.Query[@$name.list] = @all\n    Mem.Finder[@$name.list] = @all._finder\n    @\n\n  key_by: (keys)->\n    cb =\n      switch keys?.constructor\n        when undefined\n          -> @_id\n        when Function\n          keys\n        when String, Array\n          _.property keys\n        else\n          throw Error \"unimplemented #{keys}\"\n\n    @model_property.id =\n      enumerable: true\n      get: cb\n\n  deploy: (cb)->\n    @$name.deploys.push cb\n\n  depend_on: (parent)->\n    Mem.Name[parent].depends.push parent\n\n  scope: (cb)->\n    for key, val of cb @all\n      @use_cache key, val\n\n\n  property: (type, o)->\n    Object.assign @[\"#{type}_property\"], o\n\n\n  default_scope: (scope)->\n    @all._copy scope @all\n    base = Mem.State.base @$name.list\n    base.$sort = @all.$sort\n\n  shuffle: ->\n    @default_scope (all)-> all.shuffle()\n\n  sort: (...sort)->\n    @default_scope (all)-> all.sort ...sort\n\n  order: (...order)->\n    @default_scope (all)-> all.order ...order\n\n  relation_to_one: (key, target, ik, else_id)->\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        id = _.get @, ik\n        Mem.Query[target].find id, else_id\n\n  relation_to_many: (key, target, ik, cmd, qk)->\n    all = @all\n    @use_cache key, (id)->\n      Mem.Query[target][cmd] \"#{qk}\": id\n\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        all[key](@[ik])\n\n  relation_tree: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      if n\n        q = all.where \"#{ik}\": id\n        all[key] q.ids, n - 1\n      else\n        all.where { id }\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  relation_graph: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      q = all.where { id }\n      if n\n        ids = []\n        for a in q.pluck(ik) when a?\n          for k in a when k?\n            ids.push k\n\n        all[key] _.uniq(ids), n - 1\n      else\n        q\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  use_cache: (key, val)->\n    switch val?.constructor\n      when Function\n        @all[key] = (args...)=>\n          @all._cache[\"#{key}:#{JSON.stringify args}\"] ?= val args...\n      else\n        @all[key] = val\n\n  path: (keys...)->\n    for key in keys\n      @belongs_to key\n    @deploy ->\n      subids = @id.split(\"-\")\n      @idx = subids[keys.length]\n      for key, idx in keys\n        @[\"#{key}_id\"] = subids[0..idx].join '-'\n\n    { all } = @\n    pk = keys[-1..][0] + \"_id\"\n    @model_property.siblings =\n      get: ->\n        q = {}\n        q[pk] = @[pk]\n        all.where q\n\n  belongs_to: (to, option = {})->\n    name = rename to\n    { key = name.id, target = name.list, miss } = option\n    @relation_to_one name.base, target, key, miss\n\n  habtm: (to, option = {})->\n    name = rename to\n    if option.reverse\n      { key = @$name.ids, target = to } = option\n      @relation_to_many name.list, target, \"id\", \"in\", key\n    else\n      { key = name.ids, target = name.list } = option\n      @relation_to_many name.list, target, key, \"where\", \"id\"\n\n  has_many: (to, option = {})->\n    name = rename to\n    { key = @$name.id, target = name.list } = option\n    @relation_to_many name.list, target, \"id\", \"where\", key\n\n  tree: (option = {})->\n    fk = @$name.id\n    @relation_tree \"nodes\", fk\n    @belongs_to @$name.base, option\n\n    Object.defineProperties @all,\n      leaf:\n        get: ->\n          not_leaf = _.uniq @pluck fk\n          @where (o)-> o.id not in not_leaf\n\n  graph: (option = {})->\n    { directed, cost } = option\n    ik = @$name.ids\n    @relation_to_many @$name.list, @$name.list, ik, \"where\", \"id\"\n    @relation_graph \"path\", ik\n    unless directed\n      true # todo\n","_ = require \"lodash\"\n{ State, Set } = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nf_common = (type)-> (list, parent)->\n  meta = State.meta()\n  base = State.base @$name.list\n  journal = State.journal @$name.list\n  @all._finder[type] meta, base, journal, @all, list, parent\n\nf_update = (list, parent)->\n  meta = State.meta()\n  base = State.base @$name.list\n  journal = State.journal @$name.list\n  if parent?\n    @all._finder.update meta, base, journal, @all, list, parent\n\nf_item = (cb)->\n  (item, parent)->\n    if item?\n      cb.call @, [item], parent\n\nf_clear = ->\n  @all._finder.clear_cach()\n\nmodule.exports = class Set\n  constructor: ({ @all, @model, @$name })->\n\n  set:           f_common \"reset\"\n  reset:         f_common \"reset\"\n\n  merge:         f_common \"merge\"\n  add:    f_item f_common \"merge\"\n  append: f_item f_common \"merge\"\n\n  reject:        f_common \"remove\"\n  del:    f_item f_common \"remove\"\n  remove: f_item f_common \"remove\"\n  updates:       f_update\n  update: f_item f_update\n\n  clear_cache:   f_clear\n  refresh:       f_clear\n  rehash:        f_clear\n\n  find: (...ids)->\n    meta = State.meta()\n    journal = State.journal @$name.list\n    for id in ids when o = @all.$memory[id]\n      o.meta = meta\n      journal.$memory[id] = o\n      @all._finder.clear_cache()\n      return o.item\n    null\n","_ = require \"lodash\"\n{ State, Query } = require \"./mem.coffee\"\nDatum = require './datum.coffee'\n\nDash = (o, keys)->\n  Object.defineProperties o,\n    _diff:\n      enumerable: false\n      writable: true\n      value: null\n    diff:\n      enumerable: false\n      get: ->\n        return @_diff if @_diff\n        @_diff =\n          for idx in [0 .. @length - 2]\n            a = @[idx]\n            b = @[idx + 1]\n            oo = {}\n            for key in keys\n              _.set oo, key, _.get(b, key) - _.get(a, key)\n            oo\n        Dash @_diff, keys\n  o\n\n\nmodule.exports = class Map\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o\n\n  @$deploy: (model, $format, $sort, meta, journal, item)->\n    datum = new Datum( meta, item )\n\n    @$deploy_reduce model, item, $format, journal, datum\n    @$deploy_sort   model, item, $sort,   journal\n    datum\n\n  @$deploy_reduce: (model, item, $format, journal, o)->\n    emit_default = emit_default_origin = (keys, cmd)->\n      return cmd if keys.length\n      emit_default = (keys, cmd)-> cmd\n\n      base =\n        set: item.id\n        list: true\n      Object.assign base, cmd\n\n    emit = (target)=> (keys..., cmd)=>\n      cmd = emit_default keys, cmd\n      path = [\"_reduce\", keys...].join('.')\n      target.push [path, cmd]\n      map   = $format[path] ?= {}\n      map_j = journal.$format[path] ?= {}\n      @init map,   cmd\n      @init map_j, cmd\n\n    emit_group = emit o.$group\n    model.map_partition item, emit_group\n    model.map_reduce    item, emit_group\n\n    if emit_default == emit_default_origin\n      emit_group {}\n\n  @$deploy_sort: (model, item, $sort, journal)->\n    emit = (keys..., cmd)->\n      path = [\"_reduce\", keys...].join('.')\n      $sort[path] = cmd\n      journal.$sort[path] = cmd\n    model.order item, emit\n\n  @init: (o, map)->\n    if map.id\n      o.id = map.id\n    if map.list\n      o.list = []\n    if map.count\n      o.count = 0\n    if map.all\n      o.all = 0\n    if map.set\n      o.hash = {}\n\n  @reduce: (query, path, item, o, map)->\n    unless o\n      console.error \"not found $format\", path, map, query, item\n      return\n    if map.count\n      o.count += map.count\n    if map.all\n      o.all += map.all\n    if map.pow\n      o.pow *= map.pow\n\n    if map.list\n      o.list.push item\n\n    if map.set\n      o.hash[map.set] = item\n\n    if map.max\n      unless map.max <= o.max\n        o.max_is = item\n        o.max = map.max\n    if map.min\n      unless o.min <= map.min\n        o.min_is = item\n        o.min = map.min\n\n  @finish: (query, path, o, list)->\n    unless o\n      console.error \"not found $format\", path, query, list\n      return\n    if o.hash\n      o.set = Object.keys o.hash\n    if o.count && o.pow?\n      o.avg = o.all ** (1 / o.count)\n    if o.count && o.all?\n      o.avg = o.all * (1 / o.count)\n    if o.min? && o.max?\n      o.range = o.max - o.min\n      if o.all\n        o.density = o.all / o.range\n\n  @order: (query, path, from, map, list)->\n    o = from\n    if map.belongs_to\n      if o instanceof Array\n        for val in o\n          Reflect.setPrototypeOf val, Query[map.belongs_to].find val.id\n      else\n        for id, val of o\n          Reflect.setPrototypeOf val, Query[map.belongs_to].find id\n\n    else\n      if o.constructor == Object\n        for id, val of o\n          val.id = id\n\n    if map.sort\n      o = _.orderBy o, map.sort...\n    \n    if map.pluck\n      o = for oo in o when val = _.get oo, map.pluck\n        val\n\n    if key = map.index\n      for ___, oo of o\n        is_ary = 'number' == typeof _.get oo, key\n        counts =\n          if is_ary\n            []\n          else\n            {}\n        break\n      \n      for ___, oo of o\n        idx = _.get oo, key\n        unless counts[idx]\n          counts[idx] = a = new list query\n        a.push oo\n      o = counts\n    o\n\n  @dash: (query, path, from, map, list)->\n    return unless from instanceof Array\n\n    o = from\n    if keys = map.diff\n      o = Dash o, keys\n    o\n\n  @post_proc: (query, path, from, map, list)->\n    o = from\n    if map.cover\n      remain = []\n      cover  = []\n      for id in map.cover\n        if from[id]\n          cover.push id\n        else\n          remain.push id\n      o.remain = remain\n      o.cover  = cover\n\n    if map.page && per = query.$page_by\n      o = []\n      o.all = from.length\n      for oo, idx in from\n        unless idx % per\n          o.push c = new list query\n        c.push oo\n      o.page_idx = (item)->\n        for a, page_idx in @ when a.includes item\n          return page_idx\n        null\n    o","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nmodule.exports = class List extends Array\n  @bless: (list, query)->\n    Reflect.setPrototypeOf list, @::\n    list.query = query\n    list\n\n  constructor: (query)->\n    super()\n    @query = query\n\n  sort: (sort...)->\n    o = _.orderBy @, sort...\n    Reflect.setPrototypeOf o, Reflect.getPrototypeOf @\n    o\n\n  group_by: (cb)->\n    o = _.groupBy @, cb\n    for key, oo of o\n      Reflect.setPrototypeOf oo, Reflect.getPrototypeOf @\n    o\n\n  page_by: (per)->\n    idx = 0\n    Object.values @group_by (o)->\n      Math.floor(idx++ / per)\n\n  where: (req)-> @query.where req\n  in:    (req)-> @query.in    req\n","_ = require \"lodash\"\n\n\nmodule.exports = class Model\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o\n\n  @$deploy: (item, parent)->\n    @bless item\n    if parent\n      _.merge item, parent\n    for deploy in @$name.deploys\n      deploy.call item, @\n    unless item.id\n      throw new Error \"detect bad data: #{JSON.stringify item}\"\n\n  @update: (item, old)->\n  @create: (item)->\n  @delete: (old)->\n\n  @map_partition:  (item, emit)->\n    undefined\n\n  @map_reduce: (item, emit)->\n    undefined\n\n  @order: (reduce, emit)->\n    undefined\n","_ = require \"lodash\"\n{ Finder, State, Query, Format, PureObject, step } = require \"./mem.coffee\"\n\neach_by_id = ({ list }, from, process)->\n  switch from?.constructor\n    when Array\n      for item in from\n        process item.id || item\n  return\n\neach = ({ list }, from, process)->\n  switch from?.constructor\n    when Array\n      for item in from\n        process item\n    when Object\n      for id, item of from\n        item._id = id\n        process item\n  return\n\nvalidate = (item, meta, chklist)->\n  return false unless item and chklist\n  for chk in chklist when ! chk item, meta\n    return false\n  true\n\n\nmodule.exports = class Finder\n  constructor: (@$name, { @$format })->\n    State.notify @$name.list\n\n  deploy: ({@set, @map, @list, @model})->\n\n  calculate: (query, memory)->\n    return unless query._step < State.step[@$name.list]\n\n    delete query._reduce\n    query._step = step()\n\n    cache = _.cloneDeep @$format\n    paths =\n      _reduce:\n        list: []\n        hash: {}\n\n    if query._all_ids\n      @reduce @map, cache, paths, query, memory, query._all_ids\n    else\n      if query == query.all\n        @reduce @map, cache, paths, query, memory, Object.keys memory\n      else\n        for partition in query.$partition\n          @reduce @map, cache, paths, query, memory, _.get query.all, \"reduce.#{partition}\"\n\n    @finish @map, cache, paths, query\n    return\n\n  reduce: (map, cache, paths, query, memory, ids)->\n    return unless ids\n    for id in ids when o = memory[id]\n      { meta, item, $group } = o\n      continue unless validate item, meta, query._filters\n      for [path, a] in $group\n        o = paths[path] = cache[path]\n        map.reduce query, path, item, o, a\n\n  finish: (map, cache, paths, query)->\n    for path, o of paths\n      map.finish query, path, o, @list\n      _.set query, path, o\n\n    for path, cmd of query.$sort when from = _.get(query, path)\n      sorted = map.order     query, path, from,   cmd, @list\n      dashed = map.dash      query, path, sorted, cmd, @list\n      result = map.post_proc query, path, dashed, cmd, @list\n      @list.bless result, query\n      result.from = from\n      _.set query, path, result\n\n  clear_cache: (hit = true)->\n    if hit?\n      for name in @$name.depends\n        State.notify name\n    return\n\n  reset: (meta, base, journal, all, from, parent)->\n    journal.$memory = PureObject()\n    base.$memory = all.$memory = news = PureObject()\n\n    @merge meta, base, journal, all, from, parent\n\n    for key, old of base.$memory\n      item = news[key]\n      unless item?\n        @model.delete old\n    @clear_cache true\n\n  merge: (meta, base, journal, all, from, parent)->\n    hit = false\n    each @$name, from, (item)=>\n      old = base.$memory[item.id]\n      @model.$deploy item, parent\n      o = @map.$deploy @model, @$format, all.$sort, meta, journal, item\n      journal.$memory[item.id] = o\n      base.$memory[item.id] = o\n      if old?\n        @model.update item, old.item\n      else\n        @model.create item\n      hit = true\n    @clear_cache hit\n\n  remove: (meta, base, journal, all, ids)->\n    hit = false\n    each_by_id @$name, ids, (id)=>\n      old = base.$memory[id]\n      if old?\n        @model.delete old.item\n        delete journal.$memory[id]\n        delete base.$memory[id]\n        hit = true\n    @clear_cache hit\n\n  update: (meta, base, journal, all, ids, parent)->\n    { $memory } = all\n    hit = false\n    each_by_id @$name, ids, (id)=>\n      return unless old = base.$memory[id]\n      _.merge old.item, parent\n      o = @map.$deploy @model, @$format, all.$sort, meta, journal, old.item\n      journal.$memory[id] = o\n      base.$memory[id] = o\n\n      @model.update old.item, old.item\n      hit = true\n    @clear_cache hit\n      \n"],"sourceRoot":""}