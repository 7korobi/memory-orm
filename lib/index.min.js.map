{"version":3,"sources":["webpack://Mem/webpack/universalModuleDefinition","webpack://Mem/webpack/bootstrap","webpack://Mem/external \"lodash\"","webpack://Mem/./src/mem.coffee","webpack://Mem/./src/query.coffee","webpack://Mem/./src/index.coffee","webpack://Mem/./src/base.coffee","webpack://Mem/./src/rule.coffee","webpack://Mem/./src/set.coffee","webpack://Mem/./src/map.coffee","webpack://Mem/./src/list.coffee","webpack://Mem/./src/model.coffee","webpack://Mem/./src/finder.coffee"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Finder","Map","Name","OBJ","Query","Set","State","cache","merge","set_depend","set_deploy","transaction","cb","result","$journal","journal","type","list","base1","$sort","$memory","$format","base","step","$base","store","pack","model","bless","item","clear_cache","deploys","push","depends","results","val","append","_","query_parser","set_for","len","set","length","req","this","_filters","concat","constructor","Function","Array","String","console","log","[object Object]","_all_ids","_group","$partition","all","tap","_step","_copy","_all_ids1","_group1","_filters1","$sort1","$partition1","$page_by","q","target","path","add","ref","f","ref1","RegExp","test","Boolean","Number","indexOf","Error","ary","text","regexp","split","replace","join","where","search_words","sort","Math","random","order","isEqual","cloneDeep","page_by","ids","oo","find","id","form","__proto__","hash","pluck","arguments","defineProperties","reduce","_finder","calculate","_reduce","memory","keys","Mem","Rule","Base","List","Model","rename","snakeCase","$name","map","build","depend_on","map_property","model_property","_id","form_property","changes","$model","isChanged","list_property","first","head","tail","last","uniq","at","set_property","schema","_set","finder","parent","use_cache","assign","scope","default_scope","shuffle","ik","else_id","cmd","qk","a","j","k","len1","args","name1","pk","belongs_to","deploy","idx","subids","slice","siblings","to","option","miss","relation_to_one","reverse","relation_to_many","fk","relation_tree","leaf","not_leaf","cost","directed","relation_graph","f_clear","f_common","f_item","f_update","update","clear_cach","reset","reject","del","remove","updates","refresh","rehash","splice","$group","$deploy_reduce","$deploy_sort","emit_group","map_j","init","emit","map_partition","map_reduce","count","query","from","___","counts","len2","len3","per","orderBy","group_by","groupBy","page","page_idx","includes","index","pow","avg","min","max","range","density","max_is","min_is","values","floor","in","JSON","stringify","old","rowid","$step","Format","each","each_by_id","validate","process","chklist","partition","paths","finish_order","results1","finish","news","delete","$deploy","hit"],"mappings":"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","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mem\"] = factory();\n\telse\n\t\troot[\"Mem\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"lodash\");","_ = require 'lodash'\n\nSet = {}\nMap = {}\nName = {}\nQuery = {}\nFinder = {}\n\nOBJ = ->\n  new Object null\n\ncache = (type, { list })->\n  State[type][list] ?=\n    $sort:   OBJ()\n    $memory: OBJ()\n    $format:  OBJ()\n\nState =\n  transaction: (cb)->\n    State.$journal = result = OBJ()\n    cb()\n    State.$journal = OBJ()\n    result\n\n  journal: cache.bind null, '$journal'\n  base:    cache.bind null, '$base'\n  step:     OBJ()\n  $journal: OBJ()\n  $base:    OBJ()\n\n  store: (pack)->\n    for list, { $sort, $memory, $format } of pack\n      { model } = Finder[list]\n      base = State.base { list }\n\n      for key, o of $sort\n        base.$sort[key] = o\n\n      for key, o of $format\n        base.$format[key] = o\n\n      for key, o of $memory\n        model.bless o.item\n        base.$memory[key] = o\n\n      Finder[list].clear_cache()\n\n    true\n\nset_deploy = (key, cb)-> Name[key].deploys.push cb\nset_depend = (key, cb)-> Name[key].depends.push cb\nmerge = (o)->\n  for key, val of o\n    switch\n      when Query[key]?\n        key = Name[key].base\n        Set[key].merge val\n      when Set[key]?\n        Set[key].append val\n\nmodule.exports = { Set, Map, Name, State, Finder, Query, set_deploy, set_depend, merge }\n","_ = require \"lodash\"\n\n\nset_for = (list)->\n  set = new Object null\n  for key in list\n    set[key] = true\n  set\n\nquery_parser = (base, req, cb)->\n  return base unless req\n\n  new Query base, ->\n    @_filters = base._filters.concat()\n    switch req && req.constructor\n      when Object\n        for key, val of req\n          cb @, key, val, _.property key\n\n      when Function, Array, String\n        cb @, null, req, (o)-> o\n      else\n        console.log { req }\n        #throw Error 'unimplemented'\n\n\nmodule.exports = class Query\n  @build: ({ $sort, $memory })->\n    _all_ids = _group = null\n    _filters = []\n    $partition = [\"set\"]\n    new Query { _all_ids, _group, _filters, $sort, $partition }, ->\n      @all = @\n      @$memory = $memory\n\n  constructor: (base, tap)->\n    @_step = 0\n    @_copy base\n    tap.call @\n\n  _copy: ({ @all, @_all_ids, @_group, @_filters, @$sort, @$partition, @$page_by })->\n\n  in: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Array\n          set = set_for req\n          add (o)->\n            for key in path o\n              return true if set[key]\n            false\n        when RegExp\n          add (o)->\n            for val in path o\n              return true if req.test val\n            false\n        when null, 0, \"\", Boolean, String, Number\n          add (o)->\n            -1 < path(o)?.indexOf req\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  partition: (...ary)->\n    new Query @, ->\n      @$partition = ary\n\n  where: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Function\n          add req\n        when Array\n          if \"_id\" == target\n            q._all_ids = req\n          else\n            set = set_for req\n            add (o)-> set[ path o ]\n        when RegExp\n          add (o)-> req.test path o\n        when null, 0, \"\", Boolean, String, Number\n          if \"_id\" == target\n            q._all_ids = [req]\n          else\n            add (o)-> req == path o\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  search: (text)->\n    return @ unless text\n    list =\n      for item in text.split(/\\s+/)\n        item = item.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n        continue unless item.length\n        \"(#{item})\"\n    return @ unless list.length\n    regexp = (new RegExp list.join(\"|\"), \"ig\")\n    @where (o)->\n      s = o.q.search_words\n      (!s) || regexp.test s\n\n  shuffle: ->\n    @sort Math.random\n\n  order: (order)->\n    return @ if _.isEqual order, @$sort['_reduce.list']\n    new Query @, ->\n      @$sort = _.cloneDeep @$sort\n      @$sort['_reduce.list'] = order\n\n  sort: (sort...)->\n    @order { sort }\n  \n  page: (page_by)->\n    new Query @, ->\n      @$page_by = page_by\n\n  form: (ids...)->\n    oo = @find ...ids\n    if oo\n      o = @all.$memory[oo.id].form ?= {}\n      o.__proto__ = oo\n      o\n    else\n      oo\n\n  find: (...ids)->\n    for id in ids when o = @hash[id]\n      return o\n    null\n\n  finds: (ids)->\n    for id in ids when o = @hash[id]\n      o\n\n  pluck: -> @list.pluck arguments...\n\n  Object.defineProperties @::,\n    reduce:\n      get: ->\n        @all._finder.calculate @, @all.$memory\n        @_reduce\n\n    list:\n      get: ->\n        @reduce.list\n\n    hash:\n      get: ->\n        @reduce.hash\n\n    memory:\n      get: ->\n        @all.$memory\n\n    ids:\n      get: ->\n        Object.keys @hash\n","module.exports = Mem = require \"./mem.coffee\"\nMem.Rule = require \"./rule.coffee\"\nMem.Base = require \"./base.coffee\"\n","\nmodule.exports =\n  Query:  require \"./query.coffee\"\n  Set:    require \"./set.coffee\"\n  Map:    require \"./map.coffee\"\n  List:   require \"./list.coffee\"\n  Model:  require \"./model.coffee\"\n  Finder: require \"./finder.coffee\"\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\n{ Finder, Query, Model, List, Set, Map } = require \"./base.coffee\"\n\nrename = (base)->\n  base = _.snakeCase(base).replace /s$/, \"\"\n  name = Mem.Name[base]\n  return name if name\n\n  id =   \"#{base}_id\"\n  ids =  \"#{base}_ids\"\n  list = \"#{base}s\"\n  deploys = []\n  depends = []\n  Mem.Name[list] = Mem.Name[base] = { id, ids, list, base, deploys, depends }\n\nmodule.exports = class Rule\n  constructor: (base, cb)->\n    @$name = rename base\n    @model = Model\n    @list  = List\n    @set   = Set\n    @map   = Map\n\n    @all = Query.build Mem.State.base(@$name)\n    @all.cache = {}\n    @all._finder = new Finder @$name\n\n    @depend_on base\n\n    @map_property = {}\n\n    { base } = @$name\n    @model_property =\n      id:\n        enumerable: true\n        get: -> @_id\n      [@$name.id]:\n        enumerable: true\n        get: -> @_id\n\n    @form_property =\n      changes:\n        enumerable: true\n        value: (key)->\n          if _.isEqual @[key], @find[key]\n            null\n          else\n            @$model[key]\n      isChanged:\n        enumerable: true\n        get: ->\n          keys = Object.keys @\n          for key in keys\n            return true unless _.isEqual @[key], @$model[key]\n          return false\n\n    @list_property =\n      first:\n        enumerable: false\n        get: -> @[0]\n      head:\n        enumerable: false\n        get: -> @[0]\n      tail:\n        enumerable: false\n        get: -> @[@length - 1]\n      last:\n        enumerable: false\n        get: -> @[@length - 1]\n\n      uniq:\n        enumerable: false\n        get: ->\n          @constructor.bless _.uniq @\n\n      pluck:\n        enumerable: false\n        value: (keys...)->\n          cb =\n            switch keys.length\n              when 0\n                -> null\n              when 1\n                _.property keys[0]\n              else\n                (o)-> _.at(o, keys...)\n          @constructor.bless @map cb\n\n    @set_property = {}\n\n    @schema cb if cb\n    return\n\n  schema: (cb)->\n    cb.call @\n    if @model == Model\n      class @model extends @model\n    Object.defineProperties @model::, @model_property\n\n    if @list == List\n      class @list extends @list\n    Object.defineProperties @list::, @list_property\n\n    if @set == Set\n      class @set extends @set\n    Object.defineProperties @set::, @set_property\n\n    if @map == Map\n      class @map extends @map\n    Object.defineProperties @map::, @map_property\n\n    @model.$name = @list.$name = @set.$name = @map.$name = @$name\n\n    Mem.Query[@$name.list] = @all\n\n    Mem.Set[@$name.base] = _set = new @set\n    _set.all = @all\n    _set.$name = @$name\n    list = @list.bless [], @all\n\n    Mem.Finder[@$name.list] = finder = @all._finder\n    finder.set = @set\n    finder.map = @map\n    finder.list = @list\n    finder.model = @model\n    finder.$format = Mem.State.base(@$name).$format\n    @\n\n  key_by: (keys)->\n    cb =\n      switch keys?.constructor\n        when undefined\n          -> @_id\n        when Function\n          keys\n        when String, Array\n          _.property keys\n        else\n          throw Error \"unimplemented #{keys}\"\n\n    @model_property.id =\n      enumerable: true\n      get: cb\n\n  deploy: (cb)->\n    Mem.set_deploy @$name.base, cb\n\n  depend_on: (parent)->\n    { _finder } = @all\n    Mem.set_depend parent, ->\n      _finder.clear_cache()\n\n  scope: (cb)->\n    for key, val of cb @all\n      @use_cache key, val\n\n\n  property: (type, o)->\n    Object.assign @[\"#{type}_property\"], o\n\n\n  default_scope: (scope)->\n    @all._copy scope @all\n    base = Mem.State.base(@$name)\n    base.$sort = @all.$sort\n\n  shuffle: ->\n    @default_scope (all)-> all.shuffle()\n\n  order: (sort...)->\n    @default_scope (all)-> all.sort sort...\n\n  \n\n  relation_to_one: (key, target, ik, else_id)->\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        id = _.get @, ik\n        Mem.Query[target].find id, else_id\n\n  relation_to_many: (key, target, cmd, ik, qk)->\n    all = @all\n    @use_cache key, (id)->\n      Mem.Query[target][cmd] \"#{qk}\": id\n\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        all[key](@[ik])\n\n  relation_tree: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      if n\n        q = all.where \"#{ik}\": id\n        all[key] q.ids, n - 1\n      else\n        all.where { id }\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  relation_graph: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      q = all.where { id }\n      if n\n        ids = []\n        for a in q.pluck(ik) when a?\n          for k in a when k?\n            ids.push k\n\n        all[key] _.uniq(ids), n - 1\n      else\n        q\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  use_cache: (key, val)->\n    switch val?.constructor\n      when Function\n        @all[key] = (args...)=>\n          @all.cache[\"#{key}:#{JSON.stringify args}\"] ?= val args...\n      else\n        @all[key] = val\n\n  path: (keys...)->\n    for key in keys\n      @belongs_to key\n    @deploy ->\n      subids = @id.split(\"-\")\n      @idx = subids[keys.length]\n      for key, idx in keys\n        @[\"#{key}_id\"] = subids[0..idx].join '-'\n\n    { all } = @\n    pk = keys[-1..][0] + \"_id\"\n    @model_property.siblings =\n      get: ->\n        q = {}\n        q[pk] = @[pk]\n        all.where q\n\n  belongs_to: (to, option = {})->\n    name = rename to\n    { key = name.id, target = name.list, miss } = option\n    @relation_to_one name.base, target, key, miss\n\n  habtm: (to, option = {})->\n    name = rename to\n    if option.reverse\n      { key = @$name.ids, target = to } = option\n      @relation_to_many name.list, target, \"in\", \"id\", key\n    else\n      { key = name.ids, target = name.list } = option\n      @relation_to_many name.list, target, \"where\", key, \"id\"\n\n  has_many: (to, option = {})->\n    name = rename to\n    { key = @$name.id, target = name.list } = option\n    @relation_to_many name.list, target, \"where\", \"id\", key\n\n  tree: (option = {})->\n    fk = @$name.id\n    @relation_tree \"nodes\", fk\n    @belongs_to @$name.base, option\n\n    Object.defineProperties @all,\n      leaf:\n        get: ->\n          not_leaf = _.uniq @pluck fk\n          @where (o)-> o.id not in not_leaf\n\n  graph: (option = {})->\n    { directed, cost } = option\n    ik = @$name.ids\n    @relation_to_many @$name.list, @$name.list, \"where\", ik, \"id\"\n    @relation_graph \"path\", ik\n    unless directed\n      true # todo\n","_ = require \"lodash\"\n{ State } = require \"./index.coffee\"\nQuery = require \"./query.coffee\"\n\nf_common = (type)-> (list, parent)->\n  journal = State.journal(@$name)\n  @all._finder[type] journal, @all, list, parent\n\nf_update = (list, parent)->\n  journal = State.journal(@$name)\n  if parent?\n    @all._finder.update journal, @all, list, parent\n\nf_item = (cb)->\n  (item, parent)->\n    if item?\n      cb.call @, [item], parent\n\nf_clear = ->\n  @all._finder.clear_cach @all\n\n\nmodule.exports = class Set\n  set:           f_common \"reset\"\n  reset:         f_common \"reset\"\n\n  merge:         f_common \"merge\"\n  add:    f_item f_common \"merge\"\n  append: f_item f_common \"merge\"\n\n  reject:        f_common \"remove\"\n  del:    f_item f_common \"remove\"\n  remove: f_item f_common \"remove\"\n  updates:       f_update\n  update: f_item f_update\n\n  clear_cache:   f_clear\n  refresh:       f_clear\n  rehash:        f_clear\n\n  find: (...ids)->\n    journal = State.journal(@$name)\n    for id in ids when o = @all.$memory[id]\n      journal.$memory[id] = o\n      return o.item\n    null\n","_ = require \"lodash\"\n{ State, Query } = require \"./mem.coffee\"\n\nmatrix =\n  map: (cb)->\n    list = []\n    for a in @ when a\n      for item in a\n        list.push cb item\n    list\n\nmodule.exports = class Map\n  @bless: (o)->\n    o.__proto__ = @::\n    o\n\n  @$deploy: (model, $format, $sort, journal, item, parent)->\n    o = { item, $group: [] }\n\n    @$deploy_reduce model, item, $format, journal, o\n    @$deploy_sort   model, item, $sort,   journal\n    o\n\n  @$deploy_reduce: (model, item, $format, journal, o)->\n    emit = (target)=> (keys..., cmd)=>\n      path = [\"_reduce\", keys...].join('.')\n      target.push [path, cmd]\n      map   = $format[path] ?= {}\n      @init map,   cmd\n      map_j = journal.$format[path] ?= {}\n      @init map_j, cmd\n    emit_group = emit o.$group\n    emit_group\n      list: true\n    model.map_partition item, emit_group\n    model.map_reduce    item, emit_group\n\n  @$deploy_sort: (model, item, $sort, journal)->\n    emit = (keys..., cmd)->\n      path = [\"_reduce\", keys...].join('.')\n      $sort[path] = cmd\n      journal.$sort[path] = cmd\n    emit \"list\", {}\n    model.order item, emit\n\n  @init: (o, map)->\n    if map.id\n      o.id = map.id\n    if map.list\n      o.list = []\n    if map.count\n      o.count = 0\n    if map.all\n      o.all = 0\n    if map.set\n      o.hash = {}\n\n  @order: (query, path, from, map, list, cb)->\n    o = from\n    if Object == from.constructor\n      if map.belongs_to\n        for id, val of from\n          val.__proto__ = Query[map.belongs_to].find id\n      else\n        for id, val of from\n          val.id = id\n\n    else\n      if map.belongs_to\n        for val in from\n          val.__proto__ = Query[map.belongs_to].find val.id\n\n    if map.sort\n      o = _.orderBy o, map.sort...\n    \n    if map.pluck\n      o = for oo in o when val = _.get oo, map.pluck\n        val\n\n    if key = map.group_by\n      from = o\n      o = _.groupBy o, (oo)-> _.get oo, key\n      for a of o when a\n        cb a\n\n    if map.page && per = query.$page_by\n      from = o\n      o = []\n      o.all = from.length\n      for oo, idx in from\n        unless idx % per\n          o.push c = []\n        c.push oo\n      o.page_idx = (item)->\n        for a, page_idx in @ when a.includes item\n          return page_idx\n        null\n      for a in o when a\n        cb a\n\n    if key = map.index\n      counts = []\n      for ___, oo of o\n        idx = _.get oo, key\n        counts[idx] ?= []\n        counts[idx].push oo\n      o = counts\n      for a in o when a\n        cb a\n\n    cb o\n    o\n\n  @finish: (query, path, o, list)->\n    if o.hash\n      o.set = Object.keys o.hash\n    if o.count && o.pow?\n      o.avg = o.all ** (1 / o.count)\n    if o.count && o.all?\n      o.avg = o.all * (1 / o.count)\n    if o.min? && o.max?\n      o.range = o.max - o.min\n      if o.all\n        o.density = o.all / o.range\n\n  @reduce: (query, path, item, o, map)->\n    if map.count\n      o.count += map.count\n    if map.all\n      o.all += map.all\n    if map.pow\n      o.pow *= map.pow\n\n    if map.list\n      o.list.push item\n\n    if map.set\n      o.hash[map.set] = item\n\n    if map.max\n      unless map.max <= o.max\n        o.max_is = item\n        o.max = map.max\n    if map.min\n      unless o.min <= map.min\n        o.min_is = item\n        o.min = map.min\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nmodule.exports = class List extends Array\n  @bless: (list, query)->\n    list.__proto__ = @::\n    list.query = query\n    list\n\n  sort: (sort...)->\n    o = _.orderBy @, sort...\n    o.__proto__ = @__proto__\n    o\n\n  group_by: (cb)->\n    o = _.groupBy @, cb\n    for key, oo of o\n      oo.__proto__ = @__proto__\n    o\n\n  page_by: (per)->\n    idx = 0\n    Object.values @group_by (o)->\n      Math.floor(idx++ / per)\n\n  where: (req)-> @query.where req\n  in:    (req)-> @query.in    req\n","_ = require \"lodash\"\n\n\nmodule.exports = class Model\n  @rowid = 0\n\n  @bless: (o)->\n    o.__proto__ = @::\n    o\n\n  @$deploy: (item, parent)->\n    @bless item\n    if parent\n      _.merge item, parent\n    for deploy in @$name.deploys\n      deploy.call item, @\n    unless item.id\n      throw new Error \"detect bad data: #{JSON.stringify item}\"\n\n  @update: (item, old)->\n  @create: (item)->\n  @delete: (old)->\n\n  @map_partition:  (item, emit)->\n    emit\n      set: item.id\n\n  @map_reduce: (item, emit)->\n    undefined\n\n  @order: (reduce, emit)->\n    undefined\n","_ = require \"lodash\"\n{ State, Query, Format } = require \"./mem.coffee\"\n\neach_by_id = ({ list, depends }, from, process)->\n  f() for f in depends\n  switch from?.constructor\n    when Array\n      for item in from\n        process item.id || item\n  return\n\neach = ({ list, depends }, from, process)->\n  f() for f in depends\n  switch from?.constructor\n    when Array\n      for item in from\n        process item\n    when Object\n      for id, item of from\n        item._id = id\n        process item\n  return\n\nvalidate = (item, chklist)->\n  return false unless item and chklist\n  for chk in chklist when ! chk item\n    return false\n  true\n\n$step = 0\n\nmodule.exports = class Finder\n  constructor: (@$name)->\n    State.step[@$name.list] = ++$step\n    State.base(@$name)\n\n  calculate: (query, memory)->\n    return unless query._step < State.step[@$name.list]\n\n    delete query._reduce\n    query._step = ++$step\n\n    cache = _.cloneDeep @$format\n    paths =\n      _reduce:\n        list: []\n        hash: {}\n\n    if query._all_ids\n      @reduce @map, cache, paths, query, memory, query._all_ids\n    else\n      if query == query.all\n        @reduce @map, cache, paths, query, memory, Object.keys memory\n      else\n        for partition in query.$partition\n          @reduce @map, cache, paths, query, memory, _.get query.all, \"reduce.#{partition}\"\n\n    @finish_order @map, cache, paths, query\n    return\n\n  reduce: (map, cache, paths, query, memory, ids)->\n    return unless ids\n    for id in ids when o = memory[id]\n      { item, $group } = o\n      continue unless validate item, query._filters\n      for [path, a] in $group\n        o = paths[path] = cache[path]\n        map.reduce query, path, item, o, a\n\n  finish_order: (map, cache, paths, query)->\n    for path, o of paths\n      map.finish query, path, o, @list\n      _.set query, path, o\n\n    for path, cmd of query.$sort when o = from = _.get(query, path)\n      o = map.order query, path, o, cmd, @list, (target)=>\n        @list.bless target, query\n      o.from = from\n      _.set query, path, o\n\n  clear_cache: (all = null)->\n    State.step[@$name.list] = ++$step\n    if all\n      for id, { item } of all.$memory\n        @map.$deploy_sort @model, item, all\n    return\n\n  reset: (journal, all, from, parent)->\n    { $memory } = all\n    journal.$memory = new Object null\n    State.base(@$name).$memory = all.$memory = news = new Object null\n    @merge journal, all, from, parent\n\n    for key, old of $memory\n      item = news[key]\n      unless item?\n        @model.delete old\n\n  merge: (journal, all, from, parent)->\n    { $memory } = all\n    each @$name, from, (item)=>\n      old = $memory[item.id]\n      @model.$deploy item, parent\n      o = @map.$deploy @model, @$format, all.$sort, journal, item, parent\n      journal.$memory[item.id] = o\n      $memory[item.id] = o\n      if old?\n        @model.update item, old.item\n      else\n        @model.create item\n        @model.rowid++\n    @clear_cache()\n\n  remove: (journal, all, ids)->\n    { $memory } = all\n    hit = false\n    each_by_id @$name, ids, (id)=>\n      old = $memory[id]\n      if old?\n        @model.delete old.item\n        delete journal.$memory[id]\n        delete $memory[id]\n        hit = true\n    if hit?\n      @clear_cache()\n\n  update: (journal, all, ids, parent)->\n    { $memory } = all\n    each_by_id @$name, ids, (id)=>\n      return unless old = $memory[id]\n      _.merge old.item, parent\n      o = @map.$deploy @model, @$format, all.$sort, journal, old.item, parent\n      journal.$memory[id] = o\n      $memory[id] = o\n\n      @model.update old.item, old.item\n    @clear_cache()\n      \n"],"sourceRoot":""}