{"version":3,"sources":["webpack://Mem/webpack/universalModuleDefinition","webpack://Mem/webpack/bootstrap","webpack://Mem/external \"lodash\"","webpack://Mem/./src/mem.coffee","webpack://Mem/./src/query.coffee","webpack://Mem/./src/index.coffee","webpack://Mem/./src/datum.coffee","webpack://Mem/./src/base.coffee","webpack://Mem/./src/rule.coffee","webpack://Mem/./src/set.coffee","webpack://Mem/./src/map.coffee","webpack://Mem/./src/list.coffee","webpack://Mem/./src/model.coffee","webpack://Mem/./src/finder.coffee"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","$react_listeners","$step","Datum","Finder","META","Map","Metadata","Name","OBJ","Query","Set","State","cache","merge","set_depend","set_deploy","step","[object Object]","__proto__","this","pack","JSON","stringify","val","$group","item","meta","bless","transaction","cb","$journal","journal","type","list","base1","$sort","$memory","$format","base","$base","store","model","ref","clear_cache","console","error","join","react","push","bye","filter","notify","e","len","length","state","setState","deploys","depends","results","append","_","query_parser","set_for","set","req","_filters","concat","constructor","Function","Array","String","log","_all_ids","_group","$partition","all","tap","_step","_copy","_all_ids1","_group1","_filters1","$sort1","$partition1","$page_by","q","target","path","add","f","ref1","RegExp","test","Boolean","Number","indexOf","Error","ary","text","regexp","split","replace","where","search_words","sort","Math","random","order","isEqual","cloneDeep","page_by","ids","oo","find","id","form","hash","pluck","arguments","defineProperties","reduce","_finder","calculate","_reduce","memory","keys","Mem","Rule","Base","meta1","List","Model","rename","snakeCase","$name","map","build","depend_on","map_property","model_property","_id","form_property","changes","$model","isChanged","list_property","first","head","tail","last","uniq","at","set_property","schema","_set","finder","parent","use_cache","assign","scope","default_scope","shuffle","ik","else_id","cmd","qk","a","j","k","len1","args","name1","pk","belongs_to","deploy","idx","subids","slice","siblings","to","option","miss","relation_to_one","reverse","relation_to_many","fk","relation_tree","leaf","not_leaf","cost","directed","relation_graph","f_clear","f_common","f_item","f_update","update","clear_cach","reset","reject","del","remove","updates","refresh","rehash","splice","datum","$deploy_reduce","$deploy_sort","emit_default","emit_default_origin","emit_group","map_j","init","emit","map_partition","map_reduce","count","query","from","___","counts","cover","len2","per","remain","orderBy","group_by","groupBy","page","page_idx","len3","includes","index","pow","avg","min","max","range","density","max_is","min_is","values","floor","in","old","Format","each","each_by_id","validate","process","chklist","partition","paths","finish_order","results1","finish","news","delete","$deploy","hit"],"mappings":"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","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mem\"] = factory();\n\telse\n\t\troot[\"Mem\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"lodash\");","_ = require 'lodash'\n\nDatum = require './datum.coffee'\n\nSet = {}\nMap = {}\nName = {}\nQuery = {}\nFinder = {}\n\n$react_listeners = []\n$step = 0\n\nOBJ = ->\n  new Object null\n\nclass Metadata\n  @bless: (o)->\n    o.__proto__ = @::\n    o.pack ?= OBJ()\n    o\n\n  json: ->\n    JSON.stringify @, (key, val)=>\n      if ( val && val.meta && val.item && val.$group && val.meta == @ )\n        { item, $group } = val\n        { item, $group }\n      else\n        val\n\nMETA = (meta = {})->\n  Metadata.bless meta\n  meta\n\nstep = -> ++$step\n\ncache = (type)-> ({ list })->\n  State[type].pack[list] ?=\n    $sort:   OBJ()\n    $memory: OBJ()\n    $format:  OBJ()\n\n\nState =\n  transaction: (cb, meta)->\n    State.$journal = pack = META meta\n    cb meta\n    State.$journal = META()\n    pack\n\n  journal: cache '$journal'\n  base:    cache '$base'\n  meta: -> State.$journal\n  step:     OBJ()\n  $journal: META()\n  $base:    META()\n\n  store: (meta)->\n    return false unless meta?.pack\n    for list, { $sort, $memory, $format } of meta.pack\n      unless Finder[list]\n        console.error \"not found Finder\", list, meta.pack\n        continue\n      { model } = Finder[list]\n      base = State.base { list }\n      journal = State.journal { list }\n\n      for key, o of $sort\n        base.$sort[key] = o\n        journal.$sort[key] = o\n\n      for key, o of $format\n        base.$format[key] = o\n        journal.$format[key] = o\n\n      for key, o of $memory\n        Datum.bless o, meta, model\n        base.$memory[key] = o\n        journal.$memory[key] = o\n\n      Finder[list].clear_cache()\n    true\n\n  join: ({react})->\n    if react\n      $react_listeners.push react\n    return\n\n  bye: ({react})->\n    if react\n      $react_listeners = $react_listeners.filter (o)-> o != react\n    return\n\n  notify: ( list )->\n    State.step[list] = val = step()\n    return unless $react_listeners.length\n\n    key = \"step_#{list}\"\n    e = { [key]: val }\n    for o in $react_listeners when o.state[key] < val\n      o.setState e\n    return\n\n  ###\n  cleanup: (old, meta = State.meta() )->\n    return false unless old?.pack\n\n    for list, { $sort, $memory, $format } of old.pack\n      keep = meta?.pack[list]\n      { model } = Finder[list]\n      base = State.base { list }\n      journal = State.journal { list }\n\n      for key, o of $sort when ! keep.$sort[key]\n        delete base.$sort[key]\n        delete journal.$sort[key]\n\n      for key, o of $format when ! keep.$format[key]\n        delete base.$format[key]\n        delete journal.$format[key]\n\n      for key, o of $memory when ! keep.$memory[key]\n        delete base.$memory[key]\n        delete journal.$memory[key]\n\n      Finder[list].clear_cache()\n    true\n    ###\n\nset_deploy = (key, cb)-> Name[key].deploys.push cb\nset_depend = (key, cb)-> Name[key].depends.push cb\nmerge = (o)->\n  for key, val of o\n    switch\n      when Query[key]?\n        key = Name[key].base\n        Set[key].merge val\n      when Set[key]?\n        Set[key].append val\n\nmodule.exports = { Set, Map, Name, State, Finder, Query, set_deploy, set_depend, merge, step }\n","_ = require \"lodash\"\n\n\nset_for = (list)->\n  set = new Object null\n  for key in list\n    set[key] = true\n  set\n\nquery_parser = (base, req, cb)->\n  return base unless req\n\n  new Query base, ->\n    @_filters = base._filters.concat()\n    switch req && req.constructor\n      when Object\n        for key, val of req\n          cb @, key, val, _.property key\n\n      when Function, Array, String\n        cb @, null, req, (o)-> o\n      else\n        console.log { req }\n        #throw Error 'unimplemented'\n\n\nmodule.exports = class Query\n  @build: ({ $sort, $memory })->\n    _all_ids = _group = null\n    _filters = []\n    $partition = [\"set\"]\n    new Query { _all_ids, _group, _filters, $sort, $partition }, ->\n      @all = @\n      @$memory = $memory\n\n  constructor: (base, tap)->\n    @_step = 0\n    @_copy base\n    tap.call @\n\n  _copy: ({ @all, @_all_ids, @_group, @_filters, @$sort, @$partition, @$page_by })->\n\n  in: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Array\n          set = set_for req\n          add (o)->\n            for key in path o\n              return true if set[key]\n            false\n        when RegExp\n          add (o)->\n            for val in path o\n              return true if req.test val\n            false\n        when null, 0, \"\", Boolean, String, Number\n          add (o)->\n            -1 < path(o)?.indexOf req\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  partition: (...ary)->\n    new Query @, ->\n      @$partition = ary\n\n  where: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Function\n          add req\n        when Array\n          if \"_id\" == target\n            q._all_ids = req\n          else\n            set = set_for req\n            add (o)-> set[ path o ]\n        when RegExp\n          add (o)-> req.test path o\n        when null, 0, \"\", Boolean, String, Number\n          if \"_id\" == target\n            q._all_ids = [req]\n          else\n            add (o)-> req == path o\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  search: (text)->\n    return @ unless text\n    list =\n      for item in text.split(/\\s+/)\n        item = item.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n        continue unless item.length\n        \"(#{item})\"\n    return @ unless list.length\n    regexp = (new RegExp list.join(\"|\"), \"ig\")\n    @where (o)->\n      s = o.q.search_words\n      (!s) || regexp.test s\n\n  shuffle: ->\n    @sort Math.random\n\n  order: (order)->\n    return @ if _.isEqual order, @$sort['_reduce.list']\n    new Query @, ->\n      @$sort = _.cloneDeep @$sort\n      @$sort['_reduce.list'] = order\n\n  sort: (sort...)->\n    @order { sort }\n  \n  page: (page_by)->\n    new Query @, ->\n      @$page_by = page_by\n\n  form: (ids...)->\n    oo = @find ...ids\n    if oo\n      o = @all.$memory[oo.id].form ?= {}\n      o.__proto__ = oo\n      o\n    else\n      oo\n\n  find: (...ids)->\n    for id in ids when o = @hash[id]\n      return o\n    null\n\n  finds: (ids)->\n    for id in ids when o = @hash[id]\n      o\n\n  pluck: -> @list.pluck arguments...\n\n  Object.defineProperties @::,\n    reduce:\n      get: ->\n        @all._finder.calculate @, @all.$memory\n        @_reduce\n\n    list:\n      get: ->\n        @reduce.list\n\n    hash:\n      get: ->\n        @reduce.hash\n\n    memory:\n      get: ->\n        @all.$memory\n\n    ids:\n      get: ->\n        Object.keys @hash\n","module.exports = Mem = require \"./mem.coffee\"\nMem.Rule = require \"./rule.coffee\"\nMem.Base = require \"./base.coffee\"\n","module.exports = class Datum\n  @bless: (o, meta, model)->\n    model.bless o.item\n    o.meta = meta\n\n  constructor: (@meta, @item)->\n    @$group = []\n\n  toJSON: (key)->\n    { @item, @$group }\n","\nmodule.exports =\n  Query:  require \"./query.coffee\"\n  Set:    require \"./set.coffee\"\n  Map:    require \"./map.coffee\"\n  List:   require \"./list.coffee\"\n  Model:  require \"./model.coffee\"\n  Finder: require \"./finder.coffee\"\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\n{ Finder, Query, Model, List, Set, Map } = require \"./base.coffee\"\n\nrename = (base)->\n  base = _.snakeCase(base).replace /s$/, \"\"\n  name = Mem.Name[base]\n  return name if name\n\n  id =   \"#{base}_id\"\n  ids =  \"#{base}_ids\"\n  list = \"#{base}s\"\n  deploys = []\n  depends = []\n  Mem.Name[list] = Mem.Name[base] = { id, ids, list, base, deploys, depends }\n\nmodule.exports = class Rule\n  constructor: (base, cb)->\n    @$name = rename base\n    @model = Model\n    @list  = List\n    @set   = Set\n    @map   = Map\n\n    @all = Query.build Mem.State.base @$name\n    @all.cache = {}\n    @all._finder = new Finder @$name\n\n    @depend_on base\n\n    @map_property = {}\n\n    { base } = @$name\n    @model_property =\n      id:\n        enumerable: true\n        get: -> @_id\n      [@$name.id]:\n        enumerable: true\n        get: -> @_id\n\n    @form_property =\n      changes:\n        enumerable: true\n        value: (key)->\n          if _.isEqual @[key], @find[key]\n            null\n          else\n            @$model[key]\n      isChanged:\n        enumerable: true\n        get: ->\n          keys = Object.keys @\n          for key in keys\n            return true unless _.isEqual @[key], @$model[key]\n          return false\n\n    @list_property =\n      first:\n        enumerable: false\n        get: -> @[0]\n      head:\n        enumerable: false\n        get: -> @[0]\n      tail:\n        enumerable: false\n        get: -> @[@length - 1]\n      last:\n        enumerable: false\n        get: -> @[@length - 1]\n\n      uniq:\n        enumerable: false\n        get: ->\n          @constructor.bless _.uniq @\n\n      pluck:\n        enumerable: false\n        value: (keys...)->\n          cb =\n            switch keys.length\n              when 0\n                -> null\n              when 1\n                _.property keys[0]\n              else\n                (o)-> _.at(o, keys...)\n          @constructor.bless @map cb\n\n    @set_property = {}\n\n    @schema cb if cb\n    return\n\n  schema: (cb)->\n    cb.call @\n    if @model == Model\n      class @model extends @model\n    Object.defineProperties @model::, @model_property\n\n    if @list == List\n      class @list extends @list\n    Object.defineProperties @list::, @list_property\n\n    if @set == Set\n      class @set extends @set\n    Object.defineProperties @set::, @set_property\n\n    if @map == Map\n      class @map extends @map\n    Object.defineProperties @map::, @map_property\n\n    @model.$name = @list.$name = @set.$name = @map.$name = @$name\n\n    Mem.Query[@$name.list] = @all\n\n    Mem.Set[@$name.base] = _set = new @set\n    _set.all = @all\n    _set.$name = @$name\n    list = @list.bless [], @all\n\n    Mem.Finder[@$name.list] = finder = @all._finder\n    finder.set = @set\n    finder.map = @map\n    finder.list = @list\n    finder.model = @model\n    finder.$format = Mem.State.base(@$name).$format\n    @\n\n  key_by: (keys)->\n    cb =\n      switch keys?.constructor\n        when undefined\n          -> @_id\n        when Function\n          keys\n        when String, Array\n          _.property keys\n        else\n          throw Error \"unimplemented #{keys}\"\n\n    @model_property.id =\n      enumerable: true\n      get: cb\n\n  deploy: (cb)->\n    Mem.set_deploy @$name.base, cb\n\n  depend_on: (parent)->\n    { _finder } = @all\n    Mem.set_depend parent, ->\n      _finder.clear_cache()\n\n  scope: (cb)->\n    for key, val of cb @all\n      @use_cache key, val\n\n\n  property: (type, o)->\n    Object.assign @[\"#{type}_property\"], o\n\n\n  default_scope: (scope)->\n    @all._copy scope @all\n    base = Mem.State.base(@$name)\n    base.$sort = @all.$sort\n\n  shuffle: ->\n    @default_scope (all)-> all.shuffle()\n\n  order: (sort...)->\n    @default_scope (all)-> all.sort sort...\n\n  \n\n  relation_to_one: (key, target, ik, else_id)->\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        id = _.get @, ik\n        Mem.Query[target].find id, else_id\n\n  relation_to_many: (key, target, ik, cmd, qk)->\n    all = @all\n    @use_cache key, (id)->\n      Mem.Query[target][cmd] \"#{qk}\": id\n\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        all[key](@[ik])\n\n  relation_tree: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      if n\n        q = all.where \"#{ik}\": id\n        all[key] q.ids, n - 1\n      else\n        all.where { id }\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  relation_graph: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      q = all.where { id }\n      if n\n        ids = []\n        for a in q.pluck(ik) when a?\n          for k in a when k?\n            ids.push k\n\n        all[key] _.uniq(ids), n - 1\n      else\n        q\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  use_cache: (key, val)->\n    switch val?.constructor\n      when Function\n        @all[key] = (args...)=>\n          @all.cache[\"#{key}:#{JSON.stringify args}\"] ?= val args...\n      else\n        @all[key] = val\n\n  path: (keys...)->\n    for key in keys\n      @belongs_to key\n    @deploy ->\n      subids = @id.split(\"-\")\n      @idx = subids[keys.length]\n      for key, idx in keys\n        @[\"#{key}_id\"] = subids[0..idx].join '-'\n\n    { all } = @\n    pk = keys[-1..][0] + \"_id\"\n    @model_property.siblings =\n      get: ->\n        q = {}\n        q[pk] = @[pk]\n        all.where q\n\n  belongs_to: (to, option = {})->\n    name = rename to\n    { key = name.id, target = name.list, miss } = option\n    @relation_to_one name.base, target, key, miss\n\n  habtm: (to, option = {})->\n    name = rename to\n    if option.reverse\n      { key = @$name.ids, target = to } = option\n      @relation_to_many name.list, target, \"id\", \"in\", key\n    else\n      { key = name.ids, target = name.list } = option\n      @relation_to_many name.list, target, key, \"where\", \"id\"\n\n  has_many: (to, option = {})->\n    name = rename to\n    { key = @$name.id, target = name.list } = option\n    @relation_to_many name.list, target, \"id\", \"where\", key\n\n  tree: (option = {})->\n    fk = @$name.id\n    @relation_tree \"nodes\", fk\n    @belongs_to @$name.base, option\n\n    Object.defineProperties @all,\n      leaf:\n        get: ->\n          not_leaf = _.uniq @pluck fk\n          @where (o)-> o.id not in not_leaf\n\n  graph: (option = {})->\n    { directed, cost } = option\n    ik = @$name.ids\n    @relation_to_many @$name.list, @$name.list, ik, \"where\", \"id\"\n    @relation_graph \"path\", ik\n    unless directed\n      true # todo\n","_ = require \"lodash\"\n{ State } = require \"./index.coffee\"\nQuery = require \"./query.coffee\"\n\nf_common = (type)-> (list, parent)->\n  meta = State.meta()\n  journal = State.journal @$name\n  @all._finder[type] meta, journal, @all, list, parent\n\nf_update = (list, parent)->\n  meta = State.meta()\n  journal = State.journal @$name\n  if parent?\n    @all._finder.update meta, journal, @all, list, parent\n\nf_item = (cb)->\n  (item, parent)->\n    if item?\n      cb.call @, [item], parent\n\nf_clear = ->\n  @all._finder.clear_cach @all\n\n\nmodule.exports = class Set\n  set:           f_common \"reset\"\n  reset:         f_common \"reset\"\n\n  merge:         f_common \"merge\"\n  add:    f_item f_common \"merge\"\n  append: f_item f_common \"merge\"\n\n  reject:        f_common \"remove\"\n  del:    f_item f_common \"remove\"\n  remove: f_item f_common \"remove\"\n  updates:       f_update\n  update: f_item f_update\n\n  clear_cache:   f_clear\n  refresh:       f_clear\n  rehash:        f_clear\n\n  find: (...ids)->\n    journal = State.journal @$name\n    for id in ids when o = @all.$memory[id]\n      journal.$memory[id] = o\n      @all._finder.clear_cache()\n      return o.item\n    null\n","_ = require \"lodash\"\n{ State, Query } = require \"./mem.coffee\"\nDatum = require './datum.coffee'\n\nmodule.exports = class Map\n  @bless: (o)->\n    o.__proto__ = @::\n    o\n\n  @$deploy: (model, $format, $sort, meta, journal, item)->\n    datum = new Datum( meta, item )\n\n    @$deploy_reduce model, item, $format, journal, datum\n    @$deploy_sort   model, item, $sort,   journal\n    datum\n\n  @$deploy_reduce: (model, item, $format, journal, o)->\n    emit_default = emit_default_origin = (keys, cmd)->\n      return cmd if keys.length\n      emit_default = (keys, cmd)-> cmd\n\n      base =\n        set: item.id\n        list: true\n      Object.assign base, cmd\n\n    emit = (target)=> (keys..., cmd)=>\n      cmd = emit_default keys, cmd\n      path = [\"_reduce\", keys...].join('.')\n      target.push [path, cmd]\n      map   = $format[path] ?= {}\n      map_j = journal.$format[path] ?= {}\n      @init map,   cmd\n      @init map_j, cmd\n\n    emit_group = emit o.$group\n    model.map_partition item, emit_group\n    model.map_reduce    item, emit_group\n\n    if emit_default == emit_default_origin\n      emit_group {}\n\n  @$deploy_sort: (model, item, $sort, journal)->\n    emit = (keys..., cmd)->\n      path = [\"_reduce\", keys...].join('.')\n      $sort[path] = cmd\n      journal.$sort[path] = cmd\n    emit \"list\", {}\n    model.order item, emit\n\n  @init: (o, map)->\n    if map.id\n      o.id = map.id\n    if map.list\n      o.list = []\n    if map.count\n      o.count = 0\n    if map.all\n      o.all = 0\n    if map.set\n      o.hash = {}\n\n  @order: (query, path, from, map, list, bless)->\n    unless from\n      console.error \"not found $sort\", path, map, query, list\n      return\n\n    o = from\n    if Object == from.constructor\n      if map.belongs_to\n        for id, val of from\n          val.__proto__ = Query[map.belongs_to].find id\n      else\n        for id, val of from\n          val.id = id\n\n    else\n      if map.belongs_to\n        for val in from\n          val.__proto__ = Query[map.belongs_to].find val.id\n\n    if map.cover\n      remain = []\n      cover  = []\n      for id in map.cover\n        if from[id]\n          cover.push id\n        else\n          remain.push id\n      o.remain = remain\n      o.cover  = cover\n\n    if map.sort\n      o = _.orderBy o, map.sort...\n    \n    if map.pluck\n      o = for oo in o when val = _.get oo, map.pluck\n        val\n\n    if key = map.group_by\n      from = o\n      o = _.groupBy o, (oo)-> _.get oo, key\n      for idx, a of o when a\n        bless a\n\n    if map.page && per = query.$page_by\n      from = o\n      o = []\n      o.all = from.length\n      for oo, idx in from\n        unless idx % per\n          o.push c = []\n          bless c\n        c.push oo\n      o.page_idx = (item)->\n        for a, page_idx in @ when a.includes item\n          return page_idx\n        null\n\n    if key = map.index\n      for ___, oo of o\n        is_ary = 'number' == typeof _.get oo, key\n        counts =\n          if is_ary\n            []\n          else\n            {}\n        break\n      \n      for ___, oo of o\n        idx = _.get oo, key\n        unless counts[idx]\n          a = []\n          bless a\n          counts[idx] = a\n        counts[idx].push oo\n      o = counts\n\n    bless o\n    o\n\n  @finish: (query, path, o, list)->\n    unless o\n      console.error \"not found $format\", path, query, list\n      return\n    if o.hash\n      o.set = Object.keys o.hash\n    if o.count && o.pow?\n      o.avg = o.all ** (1 / o.count)\n    if o.count && o.all?\n      o.avg = o.all * (1 / o.count)\n    if o.min? && o.max?\n      o.range = o.max - o.min\n      if o.all\n        o.density = o.all / o.range\n\n  @reduce: (query, path, item, o, map)->\n    unless o\n      console.error \"not found $format\", path, map, query, item\n      return\n    if map.count\n      o.count += map.count\n    if map.all\n      o.all += map.all\n    if map.pow\n      o.pow *= map.pow\n\n    if map.list\n      o.list.push item\n\n    if map.set\n      o.hash[map.set] = item\n\n    if map.max\n      unless map.max <= o.max\n        o.max_is = item\n        o.max = map.max\n    if map.min\n      unless o.min <= map.min\n        o.min_is = item\n        o.min = map.min\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nmodule.exports = class List extends Array\n  @bless: (list, query)->\n    list.__proto__ = @::\n    list.query = query\n    list\n\n  sort: (sort...)->\n    o = _.orderBy @, sort...\n    o.__proto__ = @__proto__\n    o\n\n  group_by: (cb)->\n    o = _.groupBy @, cb\n    for key, oo of o\n      oo.__proto__ = @__proto__\n    o\n\n  page_by: (per)->\n    idx = 0\n    Object.values @group_by (o)->\n      Math.floor(idx++ / per)\n\n  where: (req)-> @query.where req\n  in:    (req)-> @query.in    req\n","_ = require \"lodash\"\n\n\nmodule.exports = class Model\n  @bless: (o)->\n    o.__proto__ = @::\n    o\n\n  @$deploy: (item, parent)->\n    @bless item\n    if parent\n      _.merge item, parent\n    for deploy in @$name.deploys\n      deploy.call item, @\n    unless item.id\n      throw new Error \"detect bad data: #{JSON.stringify item}\"\n\n  @update: (item, old)->\n  @create: (item)->\n  @delete: (old)->\n\n  @map_partition:  (item, emit)->\n    undefined\n\n  @map_reduce: (item, emit)->\n    undefined\n\n  @order: (reduce, emit)->\n    undefined\n","_ = require \"lodash\"\n{ State, Query, Format, step } = require \"./mem.coffee\"\n\neach_by_id = ({ list, depends }, from, process)->\n  f() for f in depends\n  switch from?.constructor\n    when Array\n      for item in from\n        process item.id || item\n  return\n\neach = ({ list, depends }, from, process)->\n  f() for f in depends\n  switch from?.constructor\n    when Array\n      for item in from\n        process item\n    when Object\n      for id, item of from\n        item._id = id\n        process item\n  return\n\nvalidate = (item, meta, chklist)->\n  return false unless item and chklist\n  for chk in chklist when ! chk item, meta\n    return false\n  true\n\n\nmodule.exports = class Finder\n  constructor: (@$name)->\n    State.notify @$name.list\n\n  calculate: (query, memory)->\n    return unless query._step < State.step[@$name.list]\n\n    delete query._reduce\n    query._step = step()\n\n    cache = _.cloneDeep @$format\n    paths =\n      _reduce:\n        list: []\n        hash: {}\n\n    if query._all_ids\n      @reduce @map, cache, paths, query, memory, query._all_ids\n    else\n      if query == query.all\n        @reduce @map, cache, paths, query, memory, Object.keys memory\n      else\n        for partition in query.$partition\n          @reduce @map, cache, paths, query, memory, _.get query.all, \"reduce.#{partition}\"\n\n    @finish_order @map, cache, paths, query\n    return\n\n  reduce: (map, cache, paths, query, memory, ids)->\n    return unless ids\n    for id in ids when o = memory[id]\n      { meta, item, $group } = o\n      continue unless validate item, meta, query._filters\n      for [path, a] in $group\n        o = paths[path] = cache[path]\n        map.reduce query, path, item, o, a\n\n  finish_order: (map, cache, paths, query)->\n    for path, o of paths\n      map.finish query, path, o, @list\n      _.set query, path, o\n\n    for path, cmd of query.$sort when o = from = _.get(query, path)\n      o = map.order query, path, o, cmd, @list, (target)=>\n        @list.bless target, query\n      o.from = from\n      _.set query, path, o\n\n  clear_cache: (all = null)->\n    State.notify @$name.list\n    if all\n      for id, { item } of all.$memory\n        @map.$deploy_sort @model, item, all\n    return\n\n  reset: (meta, journal, all, from, parent)->\n    { $memory } = all\n    journal.$memory = new Object null\n    State.base(@$name).$memory = all.$memory = news = new Object null\n    @merge meta, journal, all, from, parent\n\n    for key, old of $memory\n      item = news[key]\n      unless item?\n        @model.delete old\n\n  merge: (meta, journal, all, from, parent)->\n    { $memory } = all\n    each @$name, from, (item)=>\n      old = $memory[item.id]\n      @model.$deploy item, parent\n      o = @map.$deploy @model, @$format, all.$sort, meta, journal, item\n      journal.$memory[item.id] = o\n      $memory[item.id] = o\n      if old?\n        @model.update item, old.item\n      else\n        @model.create item\n    @clear_cache()\n\n  remove: (meta, journal, all, ids)->\n    { $memory } = all\n    hit = false\n    each_by_id @$name, ids, (id)=>\n      old = $memory[id]\n      if old?\n        @model.delete old.item\n        delete journal.$memory[id]\n        delete $memory[id]\n        hit = true\n    if hit?\n      @clear_cache()\n\n  update: (meta, journal, all, ids, parent)->\n    { $memory } = all\n    each_by_id @$name, ids, (id)=>\n      return unless old = $memory[id]\n      _.merge old.item, parent\n      o = @map.$deploy @model, @$format, all.$sort, meta, journal, old.item\n      journal.$memory[id] = o\n      $memory[id] = o\n\n      @model.update old.item, old.item\n    @clear_cache()\n      \n"],"sourceRoot":""}