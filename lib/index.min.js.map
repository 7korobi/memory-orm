{"version":3,"sources":["webpack://Mem/webpack/universalModuleDefinition","webpack://Mem/webpack/bootstrap","webpack://Mem/external \"lodash\"","webpack://Mem/./src/mem.coffee","webpack://Mem/./src/query.coffee","webpack://Mem/./src/datum.coffee","webpack://Mem/./src/base.coffee","webpack://Mem/./src/index.coffee","webpack://Mem/./src/rule.coffee","webpack://Mem/./src/set.coffee","webpack://Mem/./src/map.coffee","webpack://Mem/./src/list.coffee","webpack://Mem/./src/model.coffee","webpack://Mem/./src/finder.coffee"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","$react_listeners","$step","Datum","Finder","META","Map","Metadata","Name","OBJ","Query","Set","State","cache","merge","set_depend","set_deploy","step","Reflect","setPrototypeOf","[object Object]","this","pack","JSON","stringify","val","$group","item","meta","bless","transaction","cb","$journal","journal","type","list","base1","$sort","$memory","$format","base","$base","store","finder","model","ref","clear_cache","console","error","join","react","push","bye","filter","notify","e","len","length","state","setState","deploys","depends","results","append","_","query_parser","set_for","splice","set","req","_filters","concat","constructor","Function","Array","String","log","_all_ids","_group","$partition","all","tap","_step","_copy","_all_ids1","_group1","_filters1","$sort1","$partition1","$page_by","q","target","path","add","f","ref1","RegExp","test","Boolean","Number","indexOf","Error","ary","text","regexp","split","replace","where","search_words","sort","Math","random","keys","order","isEqual","cloneDeep","page_by","ids","oo","find","id","form","hash","pluck","arguments","defineProperties","reduce","_finder","calculate","_reduce","memory","List","Model","Mem","Rule","Base","rename","snakeCase","$name","map","build","_cache","depend_on","map_property","model_property","_id","form_property","changes","$model","isChanged","list_property","first","head","tail","last","uniq","at","set_property","schema","deploy","parent","use_cache","assign","scope","default_scope","shuffle","ik","else_id","cmd","qk","a","j","k","len1","args","name1","pk","belongs_to","idx","subids","slice","siblings","to","option","miss","relation_to_one","reverse","relation_to_many","fk","relation_tree","leaf","not_leaf","cost","directed","relation_graph","f_clear","f_common","f_item","f_update","update","clear_cach","reset","reject","del","remove","updates","refresh","rehash","datum","$deploy_reduce","$deploy_sort","emit_default","emit_default_origin","emit_group","map_j","init","emit","map_partition","map_reduce","count","query","from","___","counts","cover","len2","per","remain","orderBy","group_by","groupBy","page","page_idx","len3","includes","index","pow","avg","min","max","range","density","max_is","min_is","getPrototypeOf","values","floor","in","old","Format","each","each_by_id","validate","process","chklist","map1","list1","partition","paths","finish_order","results1","finish","news","delete","$deploy","hit"],"mappings":"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","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mem\"] = factory();\n\telse\n\t\troot[\"Mem\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"lodash\");","_ = require 'lodash'\n\nDatum = require './datum.coffee'\n\nSet = {}\nMap = {}\nName = {}\nQuery = {}\nFinder = {}\n\n$react_listeners = []\n$step = 0\n\nOBJ = ->\n  o = {}\n  Reflect.setPrototypeOf o, null\n  o\n\nclass Metadata\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o.pack ?= OBJ()\n    o\n\n  json: ->\n    JSON.stringify @, (key, val)=>\n      if ( val && val.meta && val.item && val.$group && val.meta == @ )\n        { item, $group } = val\n        { item, $group }\n      else\n        val\n\nMETA = (meta = {})->\n  Metadata.bless meta\n  meta\n\nstep = -> ++$step\n\ncache = (type)-> ({ list })->\n  State[type].pack[list] ?=\n    $sort: OBJ()\n    $memory: OBJ()\n    $format: OBJ()\n\n\nState =\n  transaction: (cb, meta)->\n    State.$journal = pack = META meta\n    cb meta\n    State.$journal = META()\n    pack\n\n  journal: cache '$journal'\n  base:    cache '$base'\n  meta: -> State.$journal\n  step:     OBJ()\n  $journal: META()\n  $base:    META()\n\n  store: (meta)->\n    return false unless meta?.pack\n    for list, { $sort, $memory, $format } of meta.pack\n      #all = Query[list]\n      finder = Finder[list]\n      unless finder\n        console.error \"not found Finder and Query\", list, meta.pack\n        continue\n      { model } = finder\n      base = State.base { list }\n      journal = State.journal { list }\n\n      #all.$sort = base.$sort\n      #all.$memory = base.$memory\n      #finder.$format = base.$format\n\n\n      for key, o of $sort\n        base.$sort[key] = o\n        journal.$sort[key] = o\n\n      for key, o of $format\n        base.$format[key] = o\n        journal.$format[key] = o\n\n      for key, o of $memory\n        Datum.bless o, meta, model\n        base.$memory[key] = o\n        journal.$memory[key] = o\n\n      finder.clear_cache()\n    true\n\n  join: ({react})->\n    if react\n      $react_listeners.push react\n    return\n\n  bye: ({react})->\n    if react\n      $react_listeners = $react_listeners.filter (o)-> o != react\n    return\n\n  notify: ( list )->\n    State.step[list] = val = step()\n    return unless $react_listeners.length\n\n    key = \"step_#{list}\"\n    e = { [key]: val }\n    for o in $react_listeners when o.state[key] < val\n      o.setState e\n    return\n\n  ###\n  cleanup: (old, meta = State.meta() )->\n    return false unless old?.pack\n\n    for list, { $sort, $memory, $format } of old.pack\n      keep = meta?.pack[list]\n      { model } = Finder[list]\n      base = State.base { list }\n      journal = State.journal { list }\n\n      for key, o of $sort when ! keep.$sort[key]\n        delete base.$sort[key]\n        delete journal.$sort[key]\n\n      for key, o of $format when ! keep.$format[key]\n        delete base.$format[key]\n        delete journal.$format[key]\n\n      for key, o of $memory when ! keep.$memory[key]\n        delete base.$memory[key]\n        delete journal.$memory[key]\n\n      Finder[list].clear_cache()\n    true\n    ###\n\nset_deploy = (key, cb)-> Name[key].deploys.push cb\nset_depend = (key, cb)-> Name[key].depends.push cb\nmerge = (o)->\n  for key, val of o\n    switch\n      when Query[key]?\n        key = Name[key].base\n        Set[key].merge val\n      when Set[key]?\n        Set[key].append val\n\nmodule.exports = { Set, Map, Name, State, Finder, Query, set_deploy, set_depend, merge, step }\n","_ = require \"lodash\"\n\n\nset_for = (list)->\n  set = {}\n  Reflect.setPrototypeOf set, null\n  for key in list\n    set[key] = true\n  set\n\nquery_parser = (base, req, cb)->\n  return base unless req\n\n  new Query base, ->\n    @_filters = base._filters.concat()\n    switch req && req.constructor\n      when Object\n        for key, val of req\n          cb @, key, val, _.property key\n\n      when Function, Array, String\n        cb @, null, req, (o)-> o\n      else\n        console.log { req }\n        #throw Error 'unimplemented'\n\n\nmodule.exports = class Query\n  @build: ({ $sort, $memory })->\n    _all_ids = _group = null\n    _filters = []\n    $partition = [\"set\"]\n    new Query { _all_ids, _group, _filters, $sort, $partition }, ->\n      @all = @\n      @$memory = $memory\n\n  constructor: (base, tap)->\n    @_step = 0\n    @_copy base\n    tap.call @\n\n  _copy: ({ @all, @_all_ids, @_group, @_filters, @$sort, @$partition, @$page_by })->\n\n  in: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Array\n          set = set_for req\n          add (o)->\n            for key in path o\n              return true if set[key]\n            false\n        when RegExp\n          add (o)->\n            for val in path o\n              return true if req.test val\n            false\n        when null, 0, \"\", Boolean, String, Number\n          add (o)->\n            -1 < path(o)?.indexOf req\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  partition: (...ary)->\n    new Query @, ->\n      @$partition = ary\n\n  where: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Function\n          add req\n        when Array\n          if \"_id\" == target\n            q._all_ids = req\n          else\n            set = set_for req\n            add (o)-> set[ path o ]\n        when RegExp\n          add (o)-> req.test path o\n        when null, 0, \"\", Boolean, String, Number\n          if \"_id\" == target\n            q._all_ids = [req]\n          else\n            add (o)-> req == path o\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  search: (text)->\n    return @ unless text\n    list =\n      for item in text.split(/\\s+/)\n        item = item.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n        continue unless item.length\n        \"(#{item})\"\n    return @ unless list.length\n    regexp = (new RegExp list.join(\"|\"), \"ig\")\n    @where (o)->\n      s = o.q.search_words\n      (!s) || regexp.test s\n\n  shuffle: ->\n    @sort Math.random\n\n  order: (...keys, order)->\n    keys.push \"list\" unless keys.length\n    path = [\"_reduce\", ...keys].join('.')\n\n    return @ if _.isEqual order, @$sort[path]\n    new Query @, ->\n      @$sort = _.cloneDeep @$sort\n      @$sort[path] = order\n\n  sort: (...sort)->\n    @order { sort }\n\n  page: (page_by)->\n    new Query @, ->\n      @$page_by = page_by\n\n  form: (ids...)->\n    oo = @find ...ids\n    if oo\n      o = @all.$memory[oo.id].form ?= {}\n      Reflect.setPrototypeOf o, oo\n      o\n    else\n      oo\n\n  find: (...ids)->\n    for id in ids when o = @hash[id]\n      return o\n    null\n\n  finds: (ids)->\n    for id in ids when o = @hash[id]\n      o\n\n  pluck: -> @list.pluck arguments...\n\n  Object.defineProperties @::,\n    reduce:\n      get: ->\n        @all._finder.calculate @, @all.$memory\n        @_reduce\n\n    list:\n      get: ->\n        @reduce.list\n\n    hash:\n      get: ->\n        @reduce.hash\n\n    memory:\n      get: ->\n        @all.$memory\n\n    ids:\n      get: ->\n        Object.keys @hash\n","module.exports = Datum = (meta, item)->\n  $group = []\n  o = { meta, item, $group }\n  Reflect.setPrototypeOf o, null\n  o\n\nDatum.bless = (o, meta, model)->\n  model.bless o.item\n  o.meta = meta\n","\nmodule.exports =\n  Query:  require \"./query.coffee\"\n  Set:    require \"./set.coffee\"\n  Map:    require \"./map.coffee\"\n  List:   require \"./list.coffee\"\n  Model:  require \"./model.coffee\"\n  Finder: require \"./finder.coffee\"\n","module.exports = Mem = require \"./mem.coffee\"\nMem.Rule = require \"./rule.coffee\"\nMem.Base = require \"./base.coffee\"\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\n{ Finder, Query, Model, List, Set, Map } = require \"./base.coffee\"\n\nrename = (base)->\n  base = _.snakeCase(base).replace /s$/, \"\"\n  name = Mem.Name[base]\n  return name if name\n\n  id =   \"#{base}_id\"\n  ids =  \"#{base}_ids\"\n  list = \"#{base}s\"\n  deploys = []\n  depends = []\n  Mem.Name[list] = Mem.Name[base] = { id, ids, list, base, deploys, depends }\n\nmodule.exports = class Rule\n  constructor: (base, cb)->\n    @$name = rename base\n    @state = Mem.State.base @$name\n\n    @model = Model\n    @list  = List\n    @set   = Set\n    @map   = Map\n\n    @all = Query.build @state\n    @all.$sort[\"_reduce.list\"] = {}\n    @all._cache = {}\n    @all._finder = new Finder @$name, @state\n\n    @depend_on base\n\n    @map_property = {}\n\n    { base } = @$name\n    @model_property =\n      id:\n        enumerable: true\n        get: -> @_id\n      [@$name.id]:\n        enumerable: true\n        get: -> @_id\n\n    @form_property =\n      changes:\n        enumerable: true\n        value: (key)->\n          if _.isEqual @[key], @find[key]\n            null\n          else\n            @$model[key]\n      isChanged:\n        enumerable: true\n        get: ->\n          keys = Object.keys @\n          for key in keys\n            return true unless _.isEqual @[key], @$model[key]\n          return false\n\n    @list_property =\n      first:\n        enumerable: false\n        get: -> @[0]\n      head:\n        enumerable: false\n        get: -> @[0]\n      tail:\n        enumerable: false\n        get: -> @[@length - 1]\n      last:\n        enumerable: false\n        get: -> @[@length - 1]\n\n      uniq:\n        enumerable: false\n        get: ->\n          @constructor.bless _.uniq @\n\n      pluck:\n        enumerable: false\n        value: (keys...)->\n          cb =\n            switch keys.length\n              when 0\n                -> null\n              when 1\n                _.property keys[0]\n              else\n                (o)-> _.at(o, keys...)\n          @constructor.bless @map cb\n\n    @set_property = {}\n\n    @schema cb if cb\n    return\n\n  schema: (cb)->\n    cb.call @\n    if @model == Model\n      class @model extends @model\n    Object.defineProperties @model::, @model_property\n\n    if @list == List\n      class @list extends @list\n    Object.defineProperties @list::, @list_property\n\n    if @set == Set\n      class @set extends @set\n    Object.defineProperties @set::, @set_property\n\n    if @map == Map\n      class @map extends @map\n    Object.defineProperties @map::, @map_property\n\n    @model.$name = @list.$name = @set.$name = @map.$name = @$name\n\n\n    @list.bless [], @all\n    @all._finder.deploy @\n\n    Mem.Set[@$name.base] = new @set @\n    Mem.Query[@$name.list] = @all\n    Mem.Finder[@$name.list] = @all._finder\n    @\n\n  key_by: (keys)->\n    cb =\n      switch keys?.constructor\n        when undefined\n          -> @_id\n        when Function\n          keys\n        when String, Array\n          _.property keys\n        else\n          throw Error \"unimplemented #{keys}\"\n\n    @model_property.id =\n      enumerable: true\n      get: cb\n\n  deploy: (cb)->\n    Mem.set_deploy @$name.base, cb\n\n  depend_on: (parent)->\n    { _finder } = @all\n    Mem.set_depend parent, ->\n      _finder.clear_cache()\n\n  scope: (cb)->\n    for key, val of cb @all\n      @use_cache key, val\n\n\n  property: (type, o)->\n    Object.assign @[\"#{type}_property\"], o\n\n\n  default_scope: (scope)->\n    @all._copy scope @all\n    base = Mem.State.base(@$name)\n    base.$sort = @all.$sort\n\n  shuffle: ->\n    @default_scope (all)-> all.shuffle()\n\n  sort: (...sort)->\n    @default_scope (all)-> all.sort ...sort\n\n  order: (...order)->\n    @default_scope (all)-> all.order ...order\n\n  relation_to_one: (key, target, ik, else_id)->\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        id = _.get @, ik\n        Mem.Query[target].find id, else_id\n\n  relation_to_many: (key, target, ik, cmd, qk)->\n    all = @all\n    @use_cache key, (id)->\n      Mem.Query[target][cmd] \"#{qk}\": id\n\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        all[key](@[ik])\n\n  relation_tree: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      if n\n        q = all.where \"#{ik}\": id\n        all[key] q.ids, n - 1\n      else\n        all.where { id }\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  relation_graph: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      q = all.where { id }\n      if n\n        ids = []\n        for a in q.pluck(ik) when a?\n          for k in a when k?\n            ids.push k\n\n        all[key] _.uniq(ids), n - 1\n      else\n        q\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  use_cache: (key, val)->\n    switch val?.constructor\n      when Function\n        @all[key] = (args...)=>\n          @all._cache[\"#{key}:#{JSON.stringify args}\"] ?= val args...\n      else\n        @all[key] = val\n\n  path: (keys...)->\n    for key in keys\n      @belongs_to key\n    @deploy ->\n      subids = @id.split(\"-\")\n      @idx = subids[keys.length]\n      for key, idx in keys\n        @[\"#{key}_id\"] = subids[0..idx].join '-'\n\n    { all } = @\n    pk = keys[-1..][0] + \"_id\"\n    @model_property.siblings =\n      get: ->\n        q = {}\n        q[pk] = @[pk]\n        all.where q\n\n  belongs_to: (to, option = {})->\n    name = rename to\n    { key = name.id, target = name.list, miss } = option\n    @relation_to_one name.base, target, key, miss\n\n  habtm: (to, option = {})->\n    name = rename to\n    if option.reverse\n      { key = @$name.ids, target = to } = option\n      @relation_to_many name.list, target, \"id\", \"in\", key\n    else\n      { key = name.ids, target = name.list } = option\n      @relation_to_many name.list, target, key, \"where\", \"id\"\n\n  has_many: (to, option = {})->\n    name = rename to\n    { key = @$name.id, target = name.list } = option\n    @relation_to_many name.list, target, \"id\", \"where\", key\n\n  tree: (option = {})->\n    fk = @$name.id\n    @relation_tree \"nodes\", fk\n    @belongs_to @$name.base, option\n\n    Object.defineProperties @all,\n      leaf:\n        get: ->\n          not_leaf = _.uniq @pluck fk\n          @where (o)-> o.id not in not_leaf\n\n  graph: (option = {})->\n    { directed, cost } = option\n    ik = @$name.ids\n    @relation_to_many @$name.list, @$name.list, ik, \"where\", \"id\"\n    @relation_graph \"path\", ik\n    unless directed\n      true # todo\n","_ = require \"lodash\"\n{ State, Set } = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nf_common = (type)-> (list, parent)->\n  meta = State.meta()\n  journal = State.journal @$name\n  @all._finder[type] meta, journal, @all, list, parent\n\nf_update = (list, parent)->\n  meta = State.meta()\n  journal = State.journal @$name\n  if parent?\n    @all._finder.update meta, journal, @all, list, parent\n\nf_item = (cb)->\n  (item, parent)->\n    if item?\n      cb.call @, [item], parent\n\nf_clear = ->\n  @all._finder.clear_cach @all\n\n\nmodule.exports = class Set\n  constructor: ({ @all, @$name })->\n\n  set:           f_common \"reset\"\n  reset:         f_common \"reset\"\n\n  merge:         f_common \"merge\"\n  add:    f_item f_common \"merge\"\n  append: f_item f_common \"merge\"\n\n  reject:        f_common \"remove\"\n  del:    f_item f_common \"remove\"\n  remove: f_item f_common \"remove\"\n  updates:       f_update\n  update: f_item f_update\n\n  clear_cache:   f_clear\n  refresh:       f_clear\n  rehash:        f_clear\n\n  find: (...ids)->\n    journal = State.journal @$name\n    for id in ids when o = @all.$memory[id]\n      journal.$memory[id] = o\n      @all._finder.clear_cache()\n      return o.item\n    null\n","_ = require \"lodash\"\n{ State, Query } = require \"./mem.coffee\"\nDatum = require './datum.coffee'\n\nmodule.exports = class Map\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o\n\n  @$deploy: (model, $format, $sort, meta, journal, item)->\n    datum = Datum( meta, item )\n\n    @$deploy_reduce model, item, $format, journal, datum\n    @$deploy_sort   model, item, $sort,   journal\n    datum\n\n  @$deploy_reduce: (model, item, $format, journal, o)->\n    emit_default = emit_default_origin = (keys, cmd)->\n      return cmd if keys.length\n      emit_default = (keys, cmd)-> cmd\n\n      base =\n        set: item.id\n        list: true\n      Object.assign base, cmd\n\n    emit = (target)=> (keys..., cmd)=>\n      cmd = emit_default keys, cmd\n      path = [\"_reduce\", keys...].join('.')\n      target.push [path, cmd]\n      map   = $format[path] ?= {}\n      map_j = journal.$format[path] ?= {}\n      @init map,   cmd\n      @init map_j, cmd\n\n    emit_group = emit o.$group\n    model.map_partition item, emit_group\n    model.map_reduce    item, emit_group\n\n    if emit_default == emit_default_origin\n      emit_group {}\n\n  @$deploy_sort: (model, item, $sort, journal)->\n    emit = (keys..., cmd)->\n      path = [\"_reduce\", keys...].join('.')\n      $sort[path] = cmd\n      journal.$sort[path] = cmd\n    model.order item, emit\n\n  @init: (o, map)->\n    if map.id\n      o.id = map.id\n    if map.list\n      o.list = []\n    if map.count\n      o.count = 0\n    if map.all\n      o.all = 0\n    if map.set\n      o.hash = {}\n\n  @order: (query, path, from, map, list, bless)->\n    unless from\n      console.error \"not found $sort\", path, map, query, list\n      return\n\n    o = from\n    if Object == from.constructor\n      if map.belongs_to\n        for id, val of from\n          Reflect.setPrototypeOf val, Query[map.belongs_to].find id\n      else\n        for id, val of from\n          val.id = id\n\n    else\n      if map.belongs_to\n        for val in from\n          Reflect.setPrototypeOf val, Query[map.belongs_to].find val.id\n\n    if map.cover\n      remain = []\n      cover  = []\n      for id in map.cover\n        if from[id]\n          cover.push id\n        else\n          remain.push id\n      o.remain = remain\n      o.cover  = cover\n\n    if map.sort\n      o = _.orderBy o, map.sort...\n    \n    if map.pluck\n      o = for oo in o when val = _.get oo, map.pluck\n        val\n\n    if key = map.group_by\n      from = o\n      o = _.groupBy o, (oo)-> _.get oo, key\n      for idx, a of o when a\n        bless a\n\n    if map.page && per = query.$page_by\n      from = o\n      o = []\n      o.all = from.length\n      for oo, idx in from\n        unless idx % per\n          o.push c = []\n          bless c\n        c.push oo\n      o.page_idx = (item)->\n        for a, page_idx in @ when a.includes item\n          return page_idx\n        null\n\n    if key = map.index\n      for ___, oo of o\n        is_ary = 'number' == typeof _.get oo, key\n        counts =\n          if is_ary\n            []\n          else\n            {}\n        break\n      \n      for ___, oo of o\n        idx = _.get oo, key\n        unless counts[idx]\n          a = []\n          bless a\n          counts[idx] = a\n        counts[idx].push oo\n      o = counts\n\n    bless o\n    o\n\n  @finish: (query, path, o, list)->\n    unless o\n      console.error \"not found $format\", path, query, list\n      return\n    if o.hash\n      o.set = Object.keys o.hash\n    if o.count && o.pow?\n      o.avg = o.all ** (1 / o.count)\n    if o.count && o.all?\n      o.avg = o.all * (1 / o.count)\n    if o.min? && o.max?\n      o.range = o.max - o.min\n      if o.all\n        o.density = o.all / o.range\n\n  @reduce: (query, path, item, o, map)->\n    unless o\n      console.error \"not found $format\", path, map, query, item\n      return\n    if map.count\n      o.count += map.count\n    if map.all\n      o.all += map.all\n    if map.pow\n      o.pow *= map.pow\n\n    if map.list\n      o.list.push item\n\n    if map.set\n      o.hash[map.set] = item\n\n    if map.max\n      unless map.max <= o.max\n        o.max_is = item\n        o.max = map.max\n    if map.min\n      unless o.min <= map.min\n        o.min_is = item\n        o.min = map.min\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nmodule.exports = class List extends Array\n  @bless: (list, query)->\n    Reflect.setPrototypeOf list, @::\n    list.query = query\n    list\n\n  sort: (sort...)->\n    o = _.orderBy @, sort...\n    Reflect.setPrototypeOf o, Reflect.getPrototypeOf @\n    o\n\n  group_by: (cb)->\n    o = _.groupBy @, cb\n    for key, oo of o\n      Reflect.setPrototypeOf oo, Reflect.getPrototypeOf @\n    o\n\n  page_by: (per)->\n    idx = 0\n    Object.values @group_by (o)->\n      Math.floor(idx++ / per)\n\n  where: (req)-> @query.where req\n  in:    (req)-> @query.in    req\n","_ = require \"lodash\"\n\n\nmodule.exports = class Model\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o\n\n  @$deploy: (item, parent)->\n    @bless item\n    if parent\n      _.merge item, parent\n    for deploy in @$name.deploys\n      deploy.call item, @\n    unless item.id\n      throw new Error \"detect bad data: #{JSON.stringify item}\"\n\n  @update: (item, old)->\n  @create: (item)->\n  @delete: (old)->\n\n  @map_partition:  (item, emit)->\n    undefined\n\n  @map_reduce: (item, emit)->\n    undefined\n\n  @order: (reduce, emit)->\n    undefined\n","_ = require \"lodash\"\n{ Finder, State, Query, Format, step } = require \"./mem.coffee\"\n\nOBJ = ->\n  o = {}\n  Reflect.setPrototypeOf o, null\n  o\n\neach_by_id = ({ list, depends }, from, process)->\n  f() for f in depends\n  switch from?.constructor\n    when Array\n      for item in from\n        process item.id || item\n  return\n\neach = ({ list, depends }, from, process)->\n  f() for f in depends\n  switch from?.constructor\n    when Array\n      for item in from\n        process item\n    when Object\n      for id, item of from\n        item._id = id\n        process item\n  return\n\nvalidate = (item, meta, chklist)->\n  return false unless item and chklist\n  for chk in chklist when ! chk item, meta\n    return false\n  true\n\n\nmodule.exports = class Finder\n  constructor: (@$name, { @$format })->\n    State.notify @$name.list\n\n  deploy: ({@set, @map, @list, @model})->\n\n  calculate: (query, memory)->\n    return unless query._step < State.step[@$name.list]\n\n    delete query._reduce\n    query._step = step()\n\n    cache = _.cloneDeep @$format\n    paths =\n      _reduce:\n        list: []\n        hash: {}\n\n    if query._all_ids\n      @reduce @map, cache, paths, query, memory, query._all_ids\n    else\n      if query == query.all\n        @reduce @map, cache, paths, query, memory, Object.keys memory\n      else\n        for partition in query.$partition\n          @reduce @map, cache, paths, query, memory, _.get query.all, \"reduce.#{partition}\"\n\n    @finish_order @map, cache, paths, query\n    return\n\n  reduce: (map, cache, paths, query, memory, ids)->\n    return unless ids\n    for id in ids when o = memory[id]\n      { meta, item, $group } = o\n      continue unless validate item, meta, query._filters\n      for [path, a] in $group\n        o = paths[path] = cache[path]\n        map.reduce query, path, item, o, a\n\n  finish_order: (map, cache, paths, query)->\n    for path, o of paths\n      map.finish query, path, o, @list\n      _.set query, path, o\n\n    for path, cmd of query.$sort when o = from = _.get(query, path)\n      o = map.order query, path, o, cmd, @list, (target)=>\n        @list.bless target, query\n      o.from = from\n      _.set query, path, o\n\n  clear_cache: (all = null)->\n    State.notify @$name.list\n    if all\n      for id, { item } of all.$memory\n        @map.$deploy_sort @model, item, all\n    return\n\n  reset: (meta, journal, all, from, parent)->\n    { $memory } = all\n    journal.$memory = OBJ()\n    State.base(@$name).$memory = all.$memory = news = OBJ()\n    @merge meta, journal, all, from, parent\n\n    for key, old of $memory\n      item = news[key]\n      unless item?\n        @model.delete old\n\n  merge: (meta, journal, all, from, parent)->\n    { $memory } = all\n    each @$name, from, (item)=>\n      old = $memory[item.id]\n      @model.$deploy item, parent\n      o = @map.$deploy @model, @$format, all.$sort, meta, journal, item\n      journal.$memory[item.id] = o\n      $memory[item.id] = o\n      if old?\n        @model.update item, old.item\n      else\n        @model.create item\n    @clear_cache()\n\n  remove: (meta, journal, all, ids)->\n    { $memory } = all\n    hit = false\n    each_by_id @$name, ids, (id)=>\n      old = $memory[id]\n      if old?\n        @model.delete old.item\n        delete journal.$memory[id]\n        delete $memory[id]\n        hit = true\n    if hit?\n      @clear_cache()\n\n  update: (meta, journal, all, ids, parent)->\n    { $memory } = all\n    each_by_id @$name, ids, (id)=>\n      return unless old = $memory[id]\n      _.merge old.item, parent\n      o = @map.$deploy @model, @$format, all.$sort, meta, journal, old.item\n      journal.$memory[id] = o\n      $memory[id] = o\n\n      @model.update old.item, old.item\n    @clear_cache()\n      \n"],"sourceRoot":""}