{"version":3,"sources":["webpack://Mem/webpack/universalModuleDefinition","webpack://Mem/webpack/bootstrap","webpack://Mem/external \"lodash\"","webpack://Mem/./src/mem.coffee","webpack://Mem/./src/query.coffee","webpack://Mem/./src/datum.coffee","webpack://Mem/./src/base.coffee","webpack://Mem/./src/index.coffee","webpack://Mem/./src/rule.coffee","webpack://Mem/./src/set.coffee","webpack://Mem/./src/map.coffee","webpack://Mem/./src/list.coffee","webpack://Mem/./src/model.coffee","webpack://Mem/./src/finder.coffee"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","$react_listeners","$step","Datum","Finder","META","Map","Metadata","Name","PureObject","Query","Set","State","cache","merge","step","[object Object]","Reflect","setPrototypeOf","this","pack","JSON","stringify","val","$group","item","meta","bless","transaction","cb","$journal","journal","type","list","oo","$sort","$memory","$format","base","$base","store","finder","model","ref","clear_cache","console","error","join","react","push","bye","filter","notify","e","len","length","state","setState","results","append","_","query_parser","set_for","splice","set","req","_filters","concat","constructor","Function","Array","String","log","_all_ids","_group","$partition","all","tap","_step","_copy","_all_ids1","_group1","_filters1","$sort1","$partition1","$page_by","q","target","path","add","f","ref1","RegExp","test","Boolean","Number","indexOf","Error","ary","text","regexp","split","replace","where","search_words","sort","Math","random","keys","order","isEqual","cloneDeep","page_by","ids","base1","find","id","form","hash","pluck","arguments","defineProperties","reduce","_finder","calculate","_reduce","memory","meta1","List","Model","Mem","Rule","Base","rename","snakeCase","deploys","depends","$name","map","build","_cache","depend_on","map_property","model_property","_id","form_property","changes","$model","isChanged","list_property","first","head","tail","last","uniq","at","set_property","schema","deploy","parent","use_cache","assign","scope","default_scope","shuffle","ik","else_id","cmd","qk","a","j","k","len1","args","name1","pk","belongs_to","idx","subids","slice","siblings","to","option","miss","relation_to_one","reverse","relation_to_many","fk","relation_tree","leaf","not_leaf","cost","directed","relation_graph","f_clear","f_common","f_item","f_update","update","clear_cach","reset","reject","del","remove","updates","refresh","rehash","datum","$deploy_reduce","$deploy_sort","emit_default","emit_default_origin","emit_group","map_j","init","emit","map_partition","map_reduce","count","query","from","___","counts","cover","len2","per","remain","orderBy","group_by","groupBy","page","page_idx","len3","includes","index","pow","avg","min","max","range","density","max_is","min_is","getPrototypeOf","values","floor","in","old","Format","each","each_by_id","validate","process","chklist","map1","list1","partition","paths","finish_order","results1","finish","hit","news","delete","$deploy"],"mappings":"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","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mem\"] = factory();\n\telse\n\t\troot[\"Mem\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"lodash\");","_ = require 'lodash'\n\nDatum = require './datum.coffee'\n\nSet = {}\nMap = {}\nName = {}\nQuery = {}\nFinder = {}\n\n$react_listeners = []\n$step = 0\n\nPureObject = ->\n  Object.create null\n\nclass Metadata\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o.pack ?= PureObject()\n    o\n\n  json: ->\n    JSON.stringify @, (key, val)=>\n      if ( val && val.meta && val.item && val.$group && val.meta == @ )\n        { item, $group } = val\n        { item, $group }\n      else\n        val\n\nMETA = (meta = {})->\n  Metadata.bless meta\n  meta\n\nstep = -> ++$step\n\ncache = (type)-> (list)->\n  o = State[type].pack\n  if o[list]\n    o[list]\n  else\n    oo = o[list] = PureObject()\n    oo.$sort   = PureObject()\n    oo.$memory = PureObject()\n    oo.$format = PureObject()\n    oo\n\n\nState =\n  transaction: (cb, meta)->\n    State.$journal = pack = META meta\n    cb meta\n    State.$journal = META()\n    pack\n\n  journal: cache '$journal'\n  base:    cache '$base'\n  meta: -> State.$journal\n  step:     PureObject()\n  $journal: META()\n  $base:    META()\n\n  store: (meta)->\n    return false unless meta?.pack\n    for list, { $sort, $memory, $format } of meta.pack\n      finder = Finder[list]\n      unless finder\n        console.error \"not found Finder and Query\", list, meta.pack\n        continue\n      { model } = finder\n      base = State.base list\n      journal = State.journal list\n\n      for key, o of $sort\n        base.$sort[key] = o\n        journal.$sort[key] = o\n\n      for key, o of $format\n        base.$format[key] = o\n        journal.$format[key] = o\n\n      for key, o of $memory\n        Datum.bless o, meta, model\n        base.$memory[key] = o\n        journal.$memory[key] = o\n\n      finder.clear_cache()\n    true\n\n  join: ({react})->\n    if react\n      $react_listeners.push react\n    return\n\n  bye: ({react})->\n    if react\n      $react_listeners = $react_listeners.filter (o)-> o != react\n    return\n\n  notify: ( list )->\n    State.step[list] = val = step()\n    return unless $react_listeners.length\n\n    key = \"step_#{list}\"\n    e = { [key]: val }\n    for o in $react_listeners when o.state[key] < val\n      o.setState e\n    return\n\nmerge = (o)->\n  for key, val of o\n    switch\n      when Query[key]?\n        key = Name[key].base\n        Set[key].merge val\n      when Set[key]?\n        Set[key].append val\n\nmodule.exports = { Set, Map, Name, State, Finder, Query, PureObject, merge, step }\n","_ = require \"lodash\"\n\n\nset_for = (list)->\n  set = {}\n  Reflect.setPrototypeOf set, null\n  for key in list\n    set[key] = true\n  set\n\nquery_parser = (base, req, cb)->\n  return base unless req\n\n  new Query base, ->\n    @_filters = base._filters.concat()\n    switch req && req.constructor\n      when Object\n        for key, val of req\n          cb @, key, val, _.property key\n\n      when Function, Array, String\n        cb @, null, req, (o)-> o\n      else\n        console.log { req }\n        #throw Error 'unimplemented'\n\n\nmodule.exports = class Query\n  @build: ({ $sort, $memory })->\n    _all_ids = _group = null\n    _filters = []\n    $partition = [\"set\"]\n    new Query { _all_ids, _group, _filters, $sort, $partition }, ->\n      @all = @\n      @$memory = $memory\n\n  constructor: (base, tap)->\n    @_step = 0\n    @_copy base\n    tap.call @\n\n  _copy: ({ @all, @_all_ids, @_group, @_filters, @$sort, @$partition, @$page_by })->\n\n  in: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Array\n          set = set_for req\n          add (o)->\n            for key in path o\n              return true if set[key]\n            false\n        when RegExp\n          add (o)->\n            for val in path o\n              return true if req.test val\n            false\n        when null, 0, \"\", Boolean, String, Number\n          add (o)->\n            -1 < path(o)?.indexOf req\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  partition: (...ary)->\n    new Query @, ->\n      @$partition = ary\n\n  where: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Function\n          add req\n        when Array\n          if \"_id\" == target\n            q._all_ids = req\n          else\n            set = set_for req\n            add (o)-> set[ path o ]\n        when RegExp\n          add (o)-> req.test path o\n        when null, 0, \"\", Boolean, String, Number\n          if \"_id\" == target\n            q._all_ids = [req]\n          else\n            add (o)-> req == path o\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  search: (text)->\n    return @ unless text\n    list =\n      for item in text.split(/\\s+/)\n        item = item.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n        continue unless item.length\n        \"(#{item})\"\n    return @ unless list.length\n    regexp = (new RegExp list.join(\"|\"), \"ig\")\n    @where (o)->\n      s = o.q.search_words\n      (!s) || regexp.test s\n\n  shuffle: ->\n    @sort Math.random\n\n  order: (...keys, order)->\n    keys.push \"list\" unless keys.length\n    path = [\"_reduce\", ...keys].join('.')\n\n    return @ if _.isEqual order, @$sort[path]\n    new Query @, ->\n      @$sort = _.cloneDeep @$sort\n      @$sort[path] = order\n\n  sort: (...sort)->\n    @order { sort }\n\n  page: (page_by)->\n    new Query @, ->\n      @$page_by = page_by\n\n  form: (ids...)->\n    oo = @find ...ids\n    if oo\n      o = @all.$memory[oo.id].form ?= {}\n      Reflect.setPrototypeOf o, oo\n      o\n    else\n      oo\n\n  find: (...ids)->\n    for id in ids when o = @hash[id]\n      return o\n    null\n\n  finds: (ids)->\n    for id in ids when o = @hash[id]\n      o\n\n  pluck: -> @list.pluck arguments...\n\n  Object.defineProperties @::,\n    reduce:\n      get: ->\n        @all._finder.calculate @, @all.$memory\n        @_reduce\n\n    list:\n      get: ->\n        @reduce.list\n\n    hash:\n      get: ->\n        @reduce.hash\n\n    memory:\n      get: ->\n        @all.$memory\n\n    ids:\n      get: ->\n        Object.keys @hash\n","module.exports = class Datum\n  @bless: (o, meta, model)->\n    model.bless o.item\n    o.meta = meta\n\n  constructor: (@meta, @item)->\n    @$group = []\n\n  toJSON: (key)->\n    { @item, @$group }\n","\nmodule.exports =\n  Query:  require \"./query.coffee\"\n  Set:    require \"./set.coffee\"\n  Map:    require \"./map.coffee\"\n  List:   require \"./list.coffee\"\n  Model:  require \"./model.coffee\"\n  Finder: require \"./finder.coffee\"\n","module.exports = Mem = require \"./mem.coffee\"\nMem.Rule = require \"./rule.coffee\"\nMem.Base = require \"./base.coffee\"\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\n{ Finder, Query, Model, List, Set, Map } = require \"./base.coffee\"\n\nrename = (base)->\n  base = _.snakeCase(base).replace /s$/, \"\"\n  name = Mem.Name[base]\n  return name if name\n\n  list = \"#{base}s\"\n  Mem.Name[list] = Mem.Name[base] = o = Mem.PureObject()\n  o.base = base\n  o.list = list\n  o.id =   \"#{base}_id\"\n  o.ids =  \"#{base}_ids\"\n  o.deploys = []\n  o.depends = []\n  o\n\nmodule.exports = class Rule\n  constructor: (base, cb)->\n    @$name = rename base\n    @state = Mem.State.base @$name.list\n\n    @model = Model\n    @list  = List\n    @set   = Set\n    @map   = Map\n\n    @all = Query.build @state\n    @all.$sort[\"_reduce.list\"] = {}\n    @all._cache = {}\n    @all._finder = new Finder @$name, @state\n\n    @depend_on @$name.list\n    @map_property = {}\n\n    { base } = @$name\n    @model_property =\n      id:\n        enumerable: true\n        get: -> @_id\n      [@$name.id]:\n        enumerable: true\n        get: -> @_id\n\n    @form_property =\n      changes:\n        enumerable: true\n        value: (key)->\n          if _.isEqual @[key], @find[key]\n            null\n          else\n            @$model[key]\n      isChanged:\n        enumerable: true\n        get: ->\n          keys = Object.keys @\n          for key in keys\n            return true unless _.isEqual @[key], @$model[key]\n          return false\n\n    @list_property =\n      first:\n        enumerable: false\n        get: -> @[0]\n      head:\n        enumerable: false\n        get: -> @[0]\n      tail:\n        enumerable: false\n        get: -> @[@length - 1]\n      last:\n        enumerable: false\n        get: -> @[@length - 1]\n\n      uniq:\n        enumerable: false\n        get: ->\n          @constructor.bless _.uniq @\n\n      pluck:\n        enumerable: false\n        value: (keys...)->\n          cb =\n            switch keys.length\n              when 0\n                -> null\n              when 1\n                _.property keys[0]\n              else\n                (o)-> _.at(o, keys...)\n          @constructor.bless @map cb\n\n    @set_property = {}\n\n    @schema cb if cb\n    return\n\n  schema: (cb)->\n    cb.call @\n    if @model == Model\n      class @model extends @model\n    Object.defineProperties @model::, @model_property\n\n    if @list == List\n      class @list extends @list\n    Object.defineProperties @list::, @list_property\n\n    if @set == Set\n      class @set extends @set\n    Object.defineProperties @set::, @set_property\n\n    if @map == Map\n      class @map extends @map\n    Object.defineProperties @map::, @map_property\n\n    @model.$name = @list.$name = @set.$name = @map.$name = @$name\n\n\n    @list.bless [], @all\n    @all._finder.deploy @\n\n    Mem.Set[@$name.base] = new @set @\n    Mem.Query[@$name.list] = @all\n    Mem.Finder[@$name.list] = @all._finder\n    @\n\n  key_by: (keys)->\n    cb =\n      switch keys?.constructor\n        when undefined\n          -> @_id\n        when Function\n          keys\n        when String, Array\n          _.property keys\n        else\n          throw Error \"unimplemented #{keys}\"\n\n    @model_property.id =\n      enumerable: true\n      get: cb\n\n  deploy: (cb)->\n    @$name.deploys.push cb\n\n  depend_on: (parent)->\n    Mem.Name[parent].depends.push parent\n\n  scope: (cb)->\n    for key, val of cb @all\n      @use_cache key, val\n\n\n  property: (type, o)->\n    Object.assign @[\"#{type}_property\"], o\n\n\n  default_scope: (scope)->\n    @all._copy scope @all\n    base = Mem.State.base @$name.list\n    base.$sort = @all.$sort\n\n  shuffle: ->\n    @default_scope (all)-> all.shuffle()\n\n  sort: (...sort)->\n    @default_scope (all)-> all.sort ...sort\n\n  order: (...order)->\n    @default_scope (all)-> all.order ...order\n\n  relation_to_one: (key, target, ik, else_id)->\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        id = _.get @, ik\n        Mem.Query[target].find id, else_id\n\n  relation_to_many: (key, target, ik, cmd, qk)->\n    all = @all\n    @use_cache key, (id)->\n      Mem.Query[target][cmd] \"#{qk}\": id\n\n    @model_property[key] =\n      enumerable: true\n      get: ->\n        all[key](@[ik])\n\n  relation_tree: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      if n\n        q = all.where \"#{ik}\": id\n        all[key] q.ids, n - 1\n      else\n        all.where { id }\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  relation_graph: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      q = all.where { id }\n      if n\n        ids = []\n        for a in q.pluck(ik) when a?\n          for k in a when k?\n            ids.push k\n\n        all[key] _.uniq(ids), n - 1\n      else\n        q\n\n    @model_property[key] =\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  use_cache: (key, val)->\n    switch val?.constructor\n      when Function\n        @all[key] = (args...)=>\n          @all._cache[\"#{key}:#{JSON.stringify args}\"] ?= val args...\n      else\n        @all[key] = val\n\n  path: (keys...)->\n    for key in keys\n      @belongs_to key\n    @deploy ->\n      subids = @id.split(\"-\")\n      @idx = subids[keys.length]\n      for key, idx in keys\n        @[\"#{key}_id\"] = subids[0..idx].join '-'\n\n    { all } = @\n    pk = keys[-1..][0] + \"_id\"\n    @model_property.siblings =\n      get: ->\n        q = {}\n        q[pk] = @[pk]\n        all.where q\n\n  belongs_to: (to, option = {})->\n    name = rename to\n    { key = name.id, target = name.list, miss } = option\n    @relation_to_one name.base, target, key, miss\n\n  habtm: (to, option = {})->\n    name = rename to\n    if option.reverse\n      { key = @$name.ids, target = to } = option\n      @relation_to_many name.list, target, \"id\", \"in\", key\n    else\n      { key = name.ids, target = name.list } = option\n      @relation_to_many name.list, target, key, \"where\", \"id\"\n\n  has_many: (to, option = {})->\n    name = rename to\n    { key = @$name.id, target = name.list } = option\n    @relation_to_many name.list, target, \"id\", \"where\", key\n\n  tree: (option = {})->\n    fk = @$name.id\n    @relation_tree \"nodes\", fk\n    @belongs_to @$name.base, option\n\n    Object.defineProperties @all,\n      leaf:\n        get: ->\n          not_leaf = _.uniq @pluck fk\n          @where (o)-> o.id not in not_leaf\n\n  graph: (option = {})->\n    { directed, cost } = option\n    ik = @$name.ids\n    @relation_to_many @$name.list, @$name.list, ik, \"where\", \"id\"\n    @relation_graph \"path\", ik\n    unless directed\n      true # todo\n","_ = require \"lodash\"\n{ State, Set } = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nf_common = (type)-> (list, parent)->\n  meta = State.meta()\n  base = State.base @$name.list\n  journal = State.journal @$name.list\n  @all._finder[type] meta, base, journal, @all, list, parent\n\nf_update = (list, parent)->\n  meta = State.meta()\n  base = State.base @$name.list\n  journal = State.journal @$name.list\n  if parent?\n    @all._finder.update meta, base, journal, @all, list, parent\n\nf_item = (cb)->\n  (item, parent)->\n    if item?\n      cb.call @, [item], parent\n\nf_clear = ->\n  @all._finder.clear_cach()\n\nmodule.exports = class Set\n  constructor: ({ @all, @model, @$name })->\n\n  set:           f_common \"reset\"\n  reset:         f_common \"reset\"\n\n  merge:         f_common \"merge\"\n  add:    f_item f_common \"merge\"\n  append: f_item f_common \"merge\"\n\n  reject:        f_common \"remove\"\n  del:    f_item f_common \"remove\"\n  remove: f_item f_common \"remove\"\n  updates:       f_update\n  update: f_item f_update\n\n  clear_cache:   f_clear\n  refresh:       f_clear\n  rehash:        f_clear\n\n  find: (...ids)->\n    meta = State.meta()\n    journal = State.journal @$name.list\n    for id in ids when o = @all.$memory[id]\n      o.meta = meta\n      journal.$memory[id] = o\n      @all._finder.clear_cache()\n      return o.item\n    null\n","_ = require \"lodash\"\n{ State, Query } = require \"./mem.coffee\"\nDatum = require './datum.coffee'\n\nmodule.exports = class Map\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o\n\n  @$deploy: (model, $format, $sort, meta, journal, item)->\n    datum = new Datum( meta, item )\n\n    @$deploy_reduce model, item, $format, journal, datum\n    @$deploy_sort   model, item, $sort,   journal\n    datum\n\n  @$deploy_reduce: (model, item, $format, journal, o)->\n    emit_default = emit_default_origin = (keys, cmd)->\n      return cmd if keys.length\n      emit_default = (keys, cmd)-> cmd\n\n      base =\n        set: item.id\n        list: true\n      Object.assign base, cmd\n\n    emit = (target)=> (keys..., cmd)=>\n      cmd = emit_default keys, cmd\n      path = [\"_reduce\", keys...].join('.')\n      target.push [path, cmd]\n      map   = $format[path] ?= {}\n      map_j = journal.$format[path] ?= {}\n      @init map,   cmd\n      @init map_j, cmd\n\n    emit_group = emit o.$group\n    model.map_partition item, emit_group\n    model.map_reduce    item, emit_group\n\n    if emit_default == emit_default_origin\n      emit_group {}\n\n  @$deploy_sort: (model, item, $sort, journal)->\n    emit = (keys..., cmd)->\n      path = [\"_reduce\", keys...].join('.')\n      $sort[path] = cmd\n      journal.$sort[path] = cmd\n    model.order item, emit\n\n  @init: (o, map)->\n    if map.id\n      o.id = map.id\n    if map.list\n      o.list = []\n    if map.count\n      o.count = 0\n    if map.all\n      o.all = 0\n    if map.set\n      o.hash = {}\n\n  @order: (query, path, from, map, list, bless)->\n    unless from\n      console.error \"not found $sort\", path, map, query, list\n      return\n\n    o = from\n    if Object == from.constructor\n      if map.belongs_to\n        for id, val of from\n          Reflect.setPrototypeOf val, Query[map.belongs_to].find id\n      else\n        for id, val of from\n          val.id = id\n\n    else\n      if map.belongs_to\n        for val in from\n          Reflect.setPrototypeOf val, Query[map.belongs_to].find val.id\n\n    if map.cover\n      remain = []\n      cover  = []\n      for id in map.cover\n        if from[id]\n          cover.push id\n        else\n          remain.push id\n      o.remain = remain\n      o.cover  = cover\n\n    if map.sort\n      o = _.orderBy o, map.sort...\n    \n    if map.pluck\n      o = for oo in o when val = _.get oo, map.pluck\n        val\n\n    if key = map.group_by\n      from = o\n      o = _.groupBy o, (oo)-> _.get oo, key\n      for idx, a of o when a\n        bless a\n\n    if map.page && per = query.$page_by\n      from = o\n      o = []\n      o.all = from.length\n      for oo, idx in from\n        unless idx % per\n          o.push c = []\n          bless c\n        c.push oo\n      o.page_idx = (item)->\n        for a, page_idx in @ when a.includes item\n          return page_idx\n        null\n\n    if key = map.index\n      for ___, oo of o\n        is_ary = 'number' == typeof _.get oo, key\n        counts =\n          if is_ary\n            []\n          else\n            {}\n        break\n      \n      for ___, oo of o\n        idx = _.get oo, key\n        unless counts[idx]\n          a = []\n          bless a\n          counts[idx] = a\n        counts[idx].push oo\n      o = counts\n\n    bless o\n    o\n\n  @finish: (query, path, o, list)->\n    unless o\n      console.error \"not found $format\", path, query, list\n      return\n    if o.hash\n      o.set = Object.keys o.hash\n    if o.count && o.pow?\n      o.avg = o.all ** (1 / o.count)\n    if o.count && o.all?\n      o.avg = o.all * (1 / o.count)\n    if o.min? && o.max?\n      o.range = o.max - o.min\n      if o.all\n        o.density = o.all / o.range\n\n  @reduce: (query, path, item, o, map)->\n    unless o\n      console.error \"not found $format\", path, map, query, item\n      return\n    if map.count\n      o.count += map.count\n    if map.all\n      o.all += map.all\n    if map.pow\n      o.pow *= map.pow\n\n    if map.list\n      o.list.push item\n\n    if map.set\n      o.hash[map.set] = item\n\n    if map.max\n      unless map.max <= o.max\n        o.max_is = item\n        o.max = map.max\n    if map.min\n      unless o.min <= map.min\n        o.min_is = item\n        o.min = map.min\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nmodule.exports = class List extends Array\n  @bless: (list, query)->\n    Reflect.setPrototypeOf list, @::\n    list.query = query\n    list\n\n  sort: (sort...)->\n    o = _.orderBy @, sort...\n    Reflect.setPrototypeOf o, Reflect.getPrototypeOf @\n    o\n\n  group_by: (cb)->\n    o = _.groupBy @, cb\n    for key, oo of o\n      Reflect.setPrototypeOf oo, Reflect.getPrototypeOf @\n    o\n\n  page_by: (per)->\n    idx = 0\n    Object.values @group_by (o)->\n      Math.floor(idx++ / per)\n\n  where: (req)-> @query.where req\n  in:    (req)-> @query.in    req\n","_ = require \"lodash\"\n\n\nmodule.exports = class Model\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o\n\n  @$deploy: (item, parent)->\n    @bless item\n    if parent\n      _.merge item, parent\n    for deploy in @$name.deploys\n      deploy.call item, @\n    unless item.id\n      throw new Error \"detect bad data: #{JSON.stringify item}\"\n\n  @update: (item, old)->\n  @create: (item)->\n  @delete: (old)->\n\n  @map_partition:  (item, emit)->\n    undefined\n\n  @map_reduce: (item, emit)->\n    undefined\n\n  @order: (reduce, emit)->\n    undefined\n","_ = require \"lodash\"\n{ Finder, State, Query, Format, PureObject, step } = require \"./mem.coffee\"\n\neach_by_id = ({ list }, from, process)->\n  switch from?.constructor\n    when Array\n      for item in from\n        process item.id || item\n  return\n\neach = ({ list }, from, process)->\n  switch from?.constructor\n    when Array\n      for item in from\n        process item\n    when Object\n      for id, item of from\n        item._id = id\n        process item\n  return\n\nvalidate = (item, meta, chklist)->\n  return false unless item and chklist\n  for chk in chklist when ! chk item, meta\n    return false\n  true\n\n\nmodule.exports = class Finder\n  constructor: (@$name, { @$format })->\n    State.notify @$name.list\n\n  deploy: ({@set, @map, @list, @model})->\n\n  calculate: (query, memory)->\n    return unless query._step < State.step[@$name.list]\n\n    delete query._reduce\n    query._step = step()\n\n    cache = _.cloneDeep @$format\n    paths =\n      _reduce:\n        list: []\n        hash: {}\n\n    if query._all_ids\n      @reduce @map, cache, paths, query, memory, query._all_ids\n    else\n      if query == query.all\n        @reduce @map, cache, paths, query, memory, Object.keys memory\n      else\n        for partition in query.$partition\n          @reduce @map, cache, paths, query, memory, _.get query.all, \"reduce.#{partition}\"\n\n    @finish_order @map, cache, paths, query\n    return\n\n  reduce: (map, cache, paths, query, memory, ids)->\n    return unless ids\n    for id in ids when o = memory[id]\n      { meta, item, $group } = o\n      continue unless validate item, meta, query._filters\n      for [path, a] in $group\n        o = paths[path] = cache[path]\n        map.reduce query, path, item, o, a\n\n  finish_order: (map, cache, paths, query)->\n    for path, o of paths\n      map.finish query, path, o, @list\n      _.set query, path, o\n\n    for path, cmd of query.$sort when o = from = _.get(query, path)\n      o = map.order query, path, o, cmd, @list, (target)=>\n        @list.bless target, query\n      o.from = from\n      _.set query, path, o\n\n  clear_cache: (hit = true)->\n    if hit?\n      for name in @$name.depends\n        State.notify name\n    return\n\n  reset: (meta, base, journal, all, from, parent)->\n    journal.$memory = PureObject()\n    base.$memory = all.$memory = news = PureObject()\n\n    @merge meta, base, journal, all, from, parent\n\n    for key, old of base.$memory\n      item = news[key]\n      unless item?\n        @model.delete old\n    @clear_cache true\n\n  merge: (meta, base, journal, all, from, parent)->\n    hit = false\n    each @$name, from, (item)=>\n      old = base.$memory[item.id]\n      @model.$deploy item, parent\n      o = @map.$deploy @model, @$format, all.$sort, meta, journal, item\n      journal.$memory[item.id] = o\n      base.$memory[item.id] = o\n      if old?\n        @model.update item, old.item\n      else\n        @model.create item\n      hit = true\n    @clear_cache hit\n\n  remove: (meta, base, journal, all, ids)->\n    hit = false\n    each_by_id @$name, ids, (id)=>\n      old = base.$memory[id]\n      if old?\n        @model.delete old.item\n        delete journal.$memory[id]\n        delete base.$memory[id]\n        hit = true\n    @clear_cache hit\n\n  update: (meta, base, journal, all, ids, parent)->\n    { $memory } = all\n    hit = false\n    each_by_id @$name, ids, (id)=>\n      return unless old = base.$memory[id]\n      _.merge old.item, parent\n      o = @map.$deploy @model, @$format, all.$sort, meta, journal, old.item\n      journal.$memory[id] = o\n      base.$memory[id] = o\n\n      @model.update old.item, old.item\n      hit = true\n    @clear_cache hit\n      \n"],"sourceRoot":""}