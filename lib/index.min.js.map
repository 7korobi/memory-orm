{"version":3,"sources":["webpack://Mem/webpack/universalModuleDefinition","webpack://Mem/webpack/bootstrap","webpack://Mem/external \"lodash\"","webpack://Mem/./src/mem.coffee","webpack://Mem/./src/query.coffee","webpack://Mem/./src/datum.coffee","webpack://Mem/./src/base.coffee","webpack://Mem/./src/index.coffee","webpack://Mem/./src/rule.coffee","webpack://Mem/./src/set.coffee","webpack://Mem/./src/map.coffee","webpack://Mem/./src/list.ts","webpack://Mem/./src/model.ts","webpack://Mem/./src/finder.coffee"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","_","Datum","Set","Map","Name","Query","Finder","$react_listeners","$step","PureObject","Metadata","Reflect","pack","JSON","val","META","meta","step","State","transaction","cb","journal","cache","type","oo","base","$journal","$base","store","finder","list","$sort","$format","$memory","console","mixin","data","join","bye","react","notify","notify_for_react","e","changed","state","merge","set_for","set","query_parser","_filters","req","_all_ids","tap","_group","$partition","all","$page_by","add","q","constructor","Error","ary","path","text","item","regexp","RegExp","search_words","Math","keys","order","sort","page_by","form","ids","hash","id","reduce","_finder","_reduce","memory","model","$group","List","Model","Mem","rename","method","$name","map","_id","deploys","parent","depends","scope","target","ik","else_id","cmd","qk","subids","pk","to","option","fk","leaf","not_leaf","f_common","f_update","f_item","f_clear","reset","append","reject","del","remove","updates","update","clear_cache","refresh","rehash","Dash","_diff","writable","diff","a","idx","b","datum","emit_default","emit_default_origin","emit_group","map_j","emit","query","pow","min","max","from","origin","size","pad","box","counts","is_ary","max_idx","max_is","length","remain","cover","per","page_idx","Array","this","bless","uniq","at","setPrototypeOf","where","in","super","orderBy","getPrototypeOf","groupBy","values","group_by","floor","old","defineProperties","each_by_id","process","each","validate","paths","sorted","dashed","result","hit","news","deploy"],"mappings":"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","file":"lib/index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mem\"] = factory();\n\telse\n\t\troot[\"Mem\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"lodash\");","_ = require 'lodash'\n\nDatum = require './datum.coffee'\n\nSet = {}\nMap = {}\nName = {}\nQuery = {}\nFinder = {}\n\n$react_listeners = []\n$step = 0\n\nPureObject = ->\n  Object.create null\n\nclass Metadata\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o.pack ?= PureObject()\n    o\n\n  json: ->\n    JSON.stringify @, (key, val)=>\n      if ( val && val.meta && val.item && val.$group && val.meta == @ )\n        { item, $group } = val\n        { item, $group }\n      else\n        val\n\nMETA = (meta = {})->\n  Metadata.bless meta\n  meta\n\nstep = -> ++$step\n\ncache = (type)-> (list)->\n  o = State[type].pack\n  if o[list]\n    o[list]\n  else\n    oo = o[list] = PureObject()\n    oo.$sort   = PureObject()\n    oo.$memory = PureObject()\n    oo.$format = PureObject()\n    oo\n\n\nState =\n  transaction: (cb, meta)->\n    @$journal = pack = META meta\n    cb meta\n    @$journal = META()\n    pack\n\n  journal: cache '$journal'\n  base:    cache '$base'\n  meta: -> @$journal\n  step:     PureObject()\n  $journal: META()\n  $base:    META()\n\n  store: (meta)->\n    return false unless meta?.pack\n    for list, { $sort, $memory, $format } of meta.pack\n      finder = Finder[list]\n      unless finder\n        console.error \"not found Finder and Query\", list, meta.pack\n        continue\n      { model } = finder\n      base = @base list\n      journal = @journal list\n\n      for key, o of $sort\n        base.$sort[key] = o\n        journal.$sort[key] = o\n\n      for key, o of $format\n        base.$format[key] = o\n        journal.$format[key] = o\n\n      for key, o of $memory\n        Datum.bless o, meta, model\n        base.$memory[key] = o\n        journal.$memory[key] = o\n\n      finder.clear_cache()\n    true\n\n  mixin:\n    data: ->\n      $step: State.step\n\n  join: ({react})->\n    if react\n      $react_listeners.push react\n    return\n\n  bye: ({react})->\n    if react\n      $react_listeners = $react_listeners.filter (o)-> o != react\n    return\n\n  notify: ( list )->\n    @step[list] = val = step()\n    if $react_listeners.length\n      @notify_for_react()\n  \n  notify_for_react: _.debounce ->\n    for o in $react_listeners\n      e = {}\n      changed = false\n      for key, val of o.state \n        continue unless \"step_\" == key[0..4]\n        list = key[5..]\n        val = @step[list]\n        if o.state[key] < val\n          e[key] = val\n          changed = true\n      if changed\n        o.setState e\n  , 1\n\nmerge = (o)->\n  for key, val of o\n    switch\n      when Query[key]?\n        key = Name[key].base\n        Set[key].merge val\n      when Set[key]?\n        Set[key].append val\n\nmodule.exports = { Set, Map, Name, State, Finder, Query, PureObject, merge, step }\n","_ = require \"lodash\"\n\n\nset_for = (list)->\n  set = {}\n  Reflect.setPrototypeOf set, null\n  for key in list\n    set[key] = true\n  set\n\nquery_parser = (base, req, cb)->\n  return base unless req\n\n  new Query base, ->\n    @_filters = base._filters.concat()\n    switch req && req.constructor\n      when Object\n        for key, val of req\n          cb @, key, val, _.property key\n\n      when Function, Array, String\n        cb @, null, req, (o)-> o\n      else\n        console.log { req }\n        #throw Error 'unimplemented'\n\n\nmodule.exports = class Query\n  @build: ({ $sort, $memory })->\n    _all_ids = _group = null\n    _filters = []\n    $partition = [\"set\"]\n    new Query { _all_ids, _group, _filters, $sort, $partition }, ->\n      @all = @\n      @$memory = $memory\n\n  constructor: (base, tap)->\n    @_step = 0\n    @_copy base\n    tap.call @\n\n  _copy: ({ @all, @_all_ids, @_group, @_filters, @$sort, @$partition, @$page_by })->\n\n  in: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Array\n          set = set_for req\n          add (o)->\n            for key in path o\n              return true if set[key]\n            false\n        when RegExp\n          add (o)->\n            for val in path o\n              return true if req.test val\n            false\n        when null, 0, \"\", Boolean, String, Number\n          add (o)->\n            -1 < path(o)?.indexOf req\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  partition: (...ary)->\n    new Query @, ->\n      @$partition = ary\n\n  where: (req)->\n    query_parser @, req, (q, target, req, path)->\n      add = (f)-> q._filters.push f\n      switch req?.constructor ? req\n        when Function\n          add req\n        when Array\n          if \"_id\" == target\n            q._all_ids = req\n          else\n            set = set_for req\n            add (o)-> set[ path o ]\n        when RegExp\n          add (o)-> req.test path o\n        when null, 0, \"\", Boolean, String, Number\n          if \"_id\" == target\n            q._all_ids = [req]\n          else\n            add (o)-> req == path o\n        else\n          console.log { target, req: [req, req?.constructor] }\n          throw Error 'unimplemented'\n\n  search: (text)->\n    return @ unless text\n    list =\n      for item in text.split(/\\s+/)\n        item = item.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n        continue unless item.length\n        \"(#{item})\"\n    return @ unless list.length\n    regexp = (new RegExp list.join(\"|\"), \"ig\")\n    @where (o)->\n      s = o.q.search_words\n      (!s) || regexp.test s\n\n  shuffle: ->\n    @sort Math.random\n\n  order: (...keys, order)->\n    keys.push \"list\" unless keys.length\n    path = [\"_reduce\", ...keys].join('.')\n\n    return @ if _.isEqual order, @$sort[path]\n    new Query @, ->\n      @$sort = _.cloneDeep @$sort\n      @$sort[path] = order\n\n  sort: (...sort)->\n    @order { sort }\n\n  page: (page_by)->\n    new Query @, ->\n      @$page_by = page_by\n\n  form: (ids...)->\n    oo = @find ...ids\n    if oo\n      o = @all.$memory[oo.id].form ?= {}\n      Reflect.setPrototypeOf o, oo\n      o\n    else\n      oo\n\n  find: (...ids)->\n    for id in ids when o = @hash[id]\n      return o\n    null\n\n  finds: (ids)->\n    for id in ids when o = @hash[id]\n      o\n\n  pluck: -> @list.pluck arguments...\n\n  Object.defineProperties @::,\n    reduce:\n      get: ->\n        @all._finder.calculate @, @all.$memory\n        @_reduce\n\n    list:\n      get: ->\n        @reduce.list\n\n    hash:\n      get: ->\n        @reduce.hash\n\n    memory:\n      get: ->\n        @all.$memory\n\n    ids:\n      get: ->\n        Object.keys @hash\n","module.exports = class Datum\n  @bless: (o, meta, model)->\n    model.bless o.item\n    o.meta = meta\n\n  constructor: (@meta, @item)->\n    @$group = []\n\n  toJSON: (key)->\n    { @item, @$group }\n","\nmodule.exports =\n  Query:  require \"./query.coffee\"\n  Set:    require \"./set.coffee\"\n  Map:    require \"./map.coffee\"\n  List:   require \"./list.ts\"\n  Model:  require \"./model.ts\"\n  Finder: require \"./finder.coffee\"\n","module.exports = Mem = require \"./mem.coffee\"\nMem.Rule = require \"./rule.coffee\"\nMem.Base = require \"./base.coffee\"\n","_ = require \"lodash\"\nMem = require \"./mem.coffee\"\n{ Finder, Query, Model, List, Set, Map } = require \"./base.coffee\"\n\nrename = (base)->\n  base = _.snakeCase(base).replace /s$/, \"\"\n  name = Mem.Name[base]\n  return name if name\n\n  list = \"#{base}s\"\n  Mem.Name[list] = Mem.Name[base] = o = Mem.PureObject()\n  o.base = base\n  o.list = list\n  o.id =   \"#{base}_id\"\n  o.ids =  \"#{base}_ids\"\n  o.deploys = []\n  o.depends = []\n  o\n\nmethod = (r, key, o)->\n  Object.defineProperty r.model::, key, o\n\nmodule.exports = class Rule\n  constructor: (base, cb)->\n    @$name = rename base\n    @state = Mem.State.base @$name.list\n\n    @all = Query.build @state\n    @all.$sort[\"_reduce.list\"] = {}\n    @all._cache = {}\n    @all._finder = new Finder @$name, @state\n\n    @depend_on @$name.list\n\n    class @model extends Model\n    class @list  extends List\n    class @set   extends Set\n    class @map   extends Map\n\n    __form_property__ =\n      changes:\n        enumerable: true\n        value: (key)->\n          if _.isEqual @[key], @find[key]\n            null\n          else\n            @$model[key]\n      isChanged:\n        enumerable: true\n        get: ->\n          keys = Object.keys @\n          for key in keys\n            return true unless _.isEqual @[key], @$model[key]\n          return false\n\n    @schema cb if cb\n    return\n\n  schema: (cb)->\n    cb.call @\n    @model.$name = @list.$name = @set.$name = @map.$name = @$name\n    @all._finder.deploy @\n\n    Mem.Set[@$name.base] = new @set @\n    Mem.Query[@$name.list] = @all\n    Mem.Finder[@$name.list] = @all._finder\n    @\n\n  key_by: (keys)->\n    cb =\n      switch keys?.constructor\n        when undefined\n          -> @_id\n        when Function\n          keys\n        when String, Array\n          _.property keys\n        else\n          throw Error \"unimplemented #{keys}\"\n\n    method @, 'id',\n      enumerable: true\n      get: cb\n\n  deploy: (cb)->\n    @$name.deploys.push cb\n\n  depend_on: (parent)->\n    Mem.Name[parent].depends.push parent\n\n  scope_without_cache: (cb)->\n    for key, val of cb @all\n      @all[key] = val\n\n  scope: (cb)->\n    for key, val of cb @all\n      @use_cache key, val\n\n\n  property: (type, o)->\n    Object.defineProperties @[type]::, o\n\n  default_scope: (scope)->\n    @all._copy scope @all\n    base = Mem.State.base @$name.list\n    base.$sort = @all.$sort\n\n  shuffle: ->\n    @default_scope (all)-> all.shuffle()\n\n  sort: (...sort)->\n    @default_scope (all)-> all.sort ...sort\n\n  order: (...order)->\n    @default_scope (all)-> all.order ...order\n\n  relation_to_one: (key, target, ik, else_id)->\n    method @, key,\n      enumerable: true\n      get: ->\n        id = _.get @, ik\n        Mem.Query[target].find id, else_id\n\n  relation_to_many: (key, target, ik, cmd, qk)->\n    all = @all\n    @use_cache key, (id)->\n      Mem.Query[target][cmd] \"#{qk}\": id\n\n    method @, key,\n      enumerable: true\n      get: ->\n        all[key](@[ik])\n\n  relation_tree: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      if n\n        q = all.where \"#{ik}\": id\n        all[key] q.ids, n - 1\n      else\n        all.where { id }\n\n    method @, key,\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  relation_graph: (key, ik)->\n    all = @all\n    @use_cache key, (id, n)->\n      q = all.where { id }\n      if n\n        ids = []\n        for a in q.pluck(ik) when a?\n          for k in a when k?\n            ids.push k\n\n        all[key] _.uniq(ids), n - 1\n      else\n        q\n\n    method @, key,\n      enumerable: true\n      value: (n)->\n        all[key] [@id], n\n\n  use_cache: (key, val)->\n    switch val?.constructor\n      when Function\n        @all[key] = (args...)=>\n          @all._cache[\"#{key}:#{JSON.stringify args}\"] ?= val args...\n      else\n        @all[key] = val\n\n  path: (keys...)->\n    if '*' == keys[-1..][0]\n      { base, list } = @$name\n      @belongs_to base\n      @has_many   list\n      keys.pop()\n\n    for key in keys\n      @belongs_to key\n\n    @deploy ->\n      subids = @id.split(\"-\")\n      @idx = subids[-1..][0]\n      for key, idx in keys\n        @[\"#{key}_id\"] = subids[0..idx].join '-'\n\n      if base && keys.length + 1 < subids.length\n        @[\"#{base}_id\"] = subids[..-2].join '-'\n\n    { all } = @\n    pk = keys[-1..][0] + \"_id\"\n    method @, 'siblings',\n      get: ->\n        q = {}\n        q[pk] = @[pk]\n        all.where q\n\n  belongs_to: (to, option = {})->\n    name = rename to\n    { key = name.id, target = name.list, miss } = option\n    @relation_to_one name.base, target, key, miss\n\n  habtm: (to, option = {})->\n    name = rename to\n    if option.reverse\n      { key = @$name.ids, target = to } = option\n      @relation_to_many name.list, target, \"id\", \"in\", key\n    else\n      { key = name.ids, target = name.list } = option\n      @relation_to_many name.list, target, key, \"where\", \"id\"\n\n  has_many: (to, option = {})->\n    name = rename to\n    { key = @$name.id, target = name.list } = option\n    @relation_to_many name.list, target, \"id\", \"where\", key\n\n  tree: (option = {})->\n    fk = @$name.id\n    @relation_tree \"nodes\", fk\n    @belongs_to @$name.base, option\n\n    Object.defineProperties @all,\n      leaf:\n        get: ->\n          not_leaf = _.uniq @pluck fk\n          @where (o)-> o.id not in not_leaf\n\n  graph: (option = {})->\n    { directed, cost } = option\n    ik = @$name.ids\n    @relation_to_many @$name.list, @$name.list, ik, \"where\", \"id\"\n    @relation_graph \"path\", ik\n    unless directed\n      true # todo\n","_ = require \"lodash\"\n{ State, Set } = require \"./mem.coffee\"\nQuery = require \"./query.coffee\"\n\nf_common = (type)-> (list, parent)->\n  meta = State.meta()\n  base = State.base @$name.list\n  journal = State.journal @$name.list\n  @all._finder[type] meta, base, journal, @all, list, parent\n\nf_update = (list, parent)->\n  meta = State.meta()\n  base = State.base @$name.list\n  journal = State.journal @$name.list\n  if parent?\n    @all._finder.update meta, base, journal, @all, list, parent\n\nf_item = (cb)->\n  (item, parent)->\n    if item?\n      cb.call @, [item], parent\n\nf_clear = ->\n  @all._finder.clear_cach()\n\nmodule.exports = class Set\n  constructor: ({ @all, @model, @$name })->\n\n  set:           f_common \"reset\"\n  reset:         f_common \"reset\"\n\n  merge:         f_common \"merge\"\n  add:    f_item f_common \"merge\"\n  append: f_item f_common \"merge\"\n\n  reject:        f_common \"remove\"\n  del:    f_item f_common \"remove\"\n  remove: f_item f_common \"remove\"\n  updates:       f_update\n  update: f_item f_update\n\n  clear_cache:   f_clear\n  refresh:       f_clear\n  rehash:        f_clear\n\n  find: (...ids)->\n    meta = State.meta()\n    journal = State.journal @$name.list\n    for id in ids when o = @all.$memory[id]\n      o.meta = meta\n      journal.$memory[id] = o\n      @all._finder.clear_cache()\n      return o.item\n    null\n","_ = require \"lodash\"\n{ State, Query } = require \"./mem.coffee\"\nDatum = require './datum.coffee'\n\nDash = (o, keys)->\n  Object.defineProperties o,\n    _diff:\n      enumerable: false\n      writable: true\n      value: null\n    diff:\n      enumerable: false\n      get: ->\n        return @_diff if @_diff\n        @_diff =\n          for idx in [0 .. @length - 2]\n            a = @[idx]\n            b = @[idx + 1]\n            oo = {}\n            for key in keys\n              _.set oo, key, _.get(b, key) - _.get(a, key)\n            oo\n        Dash @_diff, keys\n  o\n\n\nmodule.exports = class Map\n  @bless: (o)->\n    Reflect.setPrototypeOf o, @::\n    o\n\n  @$deploy: (model, $format, $sort, meta, journal, item)->\n    datum = new Datum( meta, item )\n\n    @$deploy_reduce model, item, $format, journal, datum\n    @$deploy_sort   model, item, $sort,   journal\n    datum\n\n  @$deploy_reduce: (model, item, $format, journal, o)->\n    emit_default = emit_default_origin = (keys, cmd)->\n      return cmd if keys.length\n      emit_default = (keys, cmd)-> cmd\n\n      base =\n        set: item.id\n        list: true\n      Object.assign base, cmd\n\n    emit = (target)=> (keys..., cmd)=>\n      cmd = emit_default keys, cmd\n      path = [\"_reduce\", keys...].join('.')\n      target.push [path, cmd]\n      map   = $format[path] ?= {}\n      map_j = journal.$format[path] ?= {}\n      @init map,   cmd\n      @init map_j, cmd\n\n    emit_group = emit o.$group\n    model.map_partition item, emit_group\n    model.map_reduce    item, emit_group\n\n    if emit_default == emit_default_origin\n      emit_group {}\n\n  @$deploy_sort: (model, item, $sort, journal)->\n    emit = (keys..., cmd)->\n      path = [\"_reduce\", keys...].join('.')\n      $sort[path] = cmd\n      journal.$sort[path] = cmd\n    model.order item, emit\n\n  @init: (o, map)->\n    if map.id\n      o.id = map.id\n    if map.list\n      o.list = []\n    if map.count\n      o.count = 0\n    if map.all\n      o.all = 0\n    if map.set\n      o.hash = {}\n\n  @reduce: (query, path, item, o, map)->\n    unless o\n      console.error \"not found $format\", path, map, query, item\n      return\n    if map.count\n      o.count += map.count\n    if map.all\n      o.all += map.all\n    if map.pow\n      o.pow *= map.pow\n\n    if map.list\n      o.list.push item\n\n    if map.set\n      o.hash[map.set] = item\n\n    if map.max\n      unless map.max <= o.max\n        o.max_is = item\n        o.max = map.max\n    if map.min\n      unless o.min <= map.min\n        o.min_is = item\n        o.min = map.min\n\n  @finish: (query, path, o, list)->\n    unless o\n      console.error \"not found $format\", path, query, list\n      return\n    if o.hash\n      o.set = Object.keys o.hash\n    if o.count && o.pow?\n      o.avg = o.all ** (1 / o.count)\n    if o.count && o.all?\n      o.avg = o.all * (1 / o.count)\n    if o.min? && o.max?\n      o.range = o.max - o.min\n      if o.all\n        o.density = o.all / o.range\n\n  @order: (query, path, from, origin, map, list)->\n    o = from\n    if map.belongs_to\n      if o instanceof Array\n        for val in o\n          Reflect.setPrototypeOf val, Query[map.belongs_to].find val.id\n      else\n        for id, val of o\n          Reflect.setPrototypeOf val, Query[map.belongs_to].find id\n\n    else\n      if o.constructor == Object\n        for id, val of o\n          val.id = id\n\n    if map.sort\n      o = _.orderBy o, map.sort...\n\n    if size = map.quantile\n      pad = ( o.length - 1 ) / size\n      box = [0..size].map (i)=>\n        o[ Math.floor i * pad ]\n      o.quantile = box\n\n    if map.pluck\n      o = for oo in o when val = _.get oo, map.pluck\n        val\n\n    if key = map.index\n      for ___, oo of o\n        is_ary = 'number' == typeof _.get oo, key\n        counts =\n          if is_ary\n            []\n          else\n            {}\n        break\n      \n      for ___, oo of o\n        idx = _.get oo, key\n        a = counts[idx]\n        unless a\n          counts[idx] = a = new list query\n        a.push oo\n\n      if map.mode\n        max_idx = null\n        max_is = []\n        if is_ary\n          for a, idx in counts when a && max_is.length < a.length\n            max_idx = idx\n            max_is = a\n        else\n          for idx, a of counts when a && max_is.length < a.length\n            max_idx = idx\n            max_is = a\n        max_is.is_mode = max_idx\n      o = counts\n\n    o\n\n  @dash: (query, path, from, origin, map, list)->\n    return unless from instanceof Array\n\n    o = from\n    if keys = map.diff\n      o = Dash o, keys\n\n    o\n\n  @post_proc: (query, path, from, origin, map, list)->\n    o = from\n    if map.cover\n      remain = []\n      cover  = []\n      for id in map.cover\n        if origin[id]\n          cover.push id\n        else\n          remain.push id\n      o.remain = remain\n      o.cover  = cover\n\n    if map.page && per = query.$page_by\n      o = []\n      o.all = from.length\n      for oo, idx in from\n        unless idx % per\n          o.push c = new list query\n        c.push oo\n      o.page_idx = (item)->\n        for a, page_idx in @ when a.includes item\n          return page_idx\n        null\n    o\n","const _ = require(\"lodash\");\nconst Mem = require(\"./mem.coffee\");\nconst Query = require(\"./query.coffee\");\n\nmodule.exports = class List extends Array {\n\n  get first(){\n    return this[0];\n  }\n\n  get last(){\n    return this[this.length - 1];\n  }\n\n  get head(){\n    return this[0];\n  }\n\n  get tail(){\n    return this[this.length - 1];\n  }\n\n  get uniq(){\n    return this.constructor.bless(_.uniq(this));\n  }\n\n  pluck(...keys){\n    let cb;\n    switch (keys.length) {\n      case 0:\n        cb = function() {\n          return null;\n        };\n        break;\n      case 1:\n        cb = _.property(keys[0]);\n        break;\n      default:\n        cb = function(o) {\n          return _.at(o, ...keys);\n        };\n        break;\n    };\n    return this.constructor.bless(this.map(cb))\n  }\n\n  static bless(list, query) {\n    Reflect.setPrototypeOf(list, this.prototype);\n    if ( query && query.where && query.in ) {\n      list.query = query;\n    }\n    return list;\n  }\n\n  constructor(query) {\n    super();\n    if ( query && query.where && query.in ) {\n      this.query = query;\n    }\n  }\n\n  sort(...sort) {\n    const o = _.orderBy(this, ...sort);\n    Reflect.setPrototypeOf(o, Reflect.getPrototypeOf(this));\n    return o;\n  }\n\n  group_by(cb) {\n    const o = _.groupBy(this, cb);\n    for (const key in o) {\n      const oo = o[key];\n      Reflect.setPrototypeOf(oo, Reflect.getPrototypeOf(this));\n    }\n    return o;\n  }\n\n  page_by(per) {\n    let idx = 0;\n    return Object.values(this.group_by(function(o) {\n      return Math.floor(idx++ / per);\n    }));\n  }\n\n  where(req) {\n    return this.query.where(req);\n  }\n\n  in(req) {\n    return this.query.in(req);\n  }\n\n};\n","const _ = require(\"lodash\");\n\nconst model = class Model {\n  static bless(o) {\n    Reflect.setPrototypeOf(o, this.prototype);\n    return o;\n  }\n\n  static deploy(item, parent) {}\n\n  static update(item, old) {}\n\n  static create(item) {}\n\n  static delete(old) {}\n\n  static map_partition(item, emit) {\n    return void 0;\n  }\n\n  static map_reduce(item, emit) {\n    return void 0;\n  }\n\n  static order(reduce, emit) {\n    return void 0;\n  }\n\n};\n\nmodule.exports = model\n\nObject.defineProperties(model.prototype, {\n  id: {\n    enumerable: true,\n    get: function() {\n      return this._id;\n    },\n  }\n})","_ = require \"lodash\"\n{ Finder, State, Query, Format, PureObject, step } = require \"./mem.coffee\"\n\neach_by_id = ({ list }, from, process)->\n  switch from?.constructor\n    when Array\n      for item in from\n        process item.id || item\n  return\n\neach = ({ list }, from, process)->\n  switch from?.constructor\n    when Array\n      for item in from\n        process item\n    when Object\n      for id, item of from\n        item._id = id\n        process item\n  return\n\nvalidate = (item, meta, chklist)->\n  return false unless item and chklist\n  for chk in chklist when ! chk item, meta\n    return false\n  true\n\n\nmodule.exports = class Finder\n  constructor: (@$name, { @$format })->\n    State.notify @$name.list\n\n  deploy: ({@set, @map, @list, @model})->\n\n  calculate: (query, memory)->\n    return unless query._step < State.step[@$name.list]\n\n    delete query._reduce\n    query._step = step()\n\n    cache = _.cloneDeep @$format\n    paths =\n      _reduce:\n        list: []\n        hash: {}\n\n    if query._all_ids\n      @reduce @map, cache, paths, query, memory, query._all_ids\n    else\n      if query == query.all\n        @reduce @map, cache, paths, query, memory, Object.keys memory\n      else\n        for partition in query.$partition\n          @reduce @map, cache, paths, query, memory, _.get query.all, \"reduce.#{partition}\"\n\n    @finish @map, cache, paths, query\n    return\n\n  reduce: (map, cache, paths, query, memory, ids)->\n    return unless ids\n    for id in ids when o = memory[id]\n      { meta, item, $group } = o\n      continue unless validate item, meta, query._filters\n      for [path, a] in $group\n        o = paths[path] = cache[path]\n        map.reduce query, path, item, o, a\n\n  finish: (map, cache, paths, query)->\n    for path, o of paths\n      map.finish query, path, o, @list\n      _.set query, path, o\n\n    for path, cmd of query.$sort when from = _.get(query, path)\n      sorted = map.order     query, path, from,   from, cmd, @list\n      dashed = map.dash      query, path, sorted, from, cmd, @list\n      result = map.post_proc query, path, dashed, from, cmd, @list\n      @list.bless result, query\n      result.from = from\n      _.set query, path, result\n\n  clear_cache: (hit = true)->\n    if hit?\n      for name in @$name.depends\n        State.notify name\n    return\n\n  reset: (meta, base, journal, all, from, parent)->\n    journal.$memory = PureObject()\n    base.$memory = all.$memory = news = PureObject()\n\n    @merge meta, base, journal, all, from, parent\n\n    for key, old of base.$memory\n      item = news[key]\n      unless item?\n        @model.delete old\n    @clear_cache true\n\n  merge: (meta, base, journal, all, from, parent)->\n    hit = false\n    each @$name, from, (item)=>\n      old = base.$memory[item.id]\n\n      @model.bless item\n      parent && _.merge item, parent\n      @model.deploy.call item, @model\n      for deploy in @$name.deploys\n        deploy.call item, @model\n      unless item.id\n        throw new Error \"detect bad data: #{ JSON.stringify item }\"\n\n      o = @map.$deploy @model, @$format, all.$sort, meta, journal, item\n      journal.$memory[item.id] = o\n      base.$memory[item.id] = o\n      if old?\n        @model.update item, old.item\n      else\n        @model.create item\n      hit = true\n    @clear_cache hit\n\n  remove: (meta, base, journal, all, ids)->\n    hit = false\n    each_by_id @$name, ids, (id)=>\n      old = base.$memory[id]\n      if old?\n        @model.delete old.item\n        delete journal.$memory[id]\n        delete base.$memory[id]\n        hit = true\n    @clear_cache hit\n\n  update: (meta, base, journal, all, ids, parent)->\n    { $memory } = all\n    hit = false\n    each_by_id @$name, ids, (id)=>\n      return unless old = base.$memory[id]\n      _.merge old.item, parent\n      o = @map.$deploy @model, @$format, all.$sort, meta, journal, old.item\n      journal.$memory[id] = o\n      base.$memory[id] = o\n\n      @model.update old.item, old.item\n      hit = true\n    @clear_cache hit\n      \n"],"sourceRoot":""}